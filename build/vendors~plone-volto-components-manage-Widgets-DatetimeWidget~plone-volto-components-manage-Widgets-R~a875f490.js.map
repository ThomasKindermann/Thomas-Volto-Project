{"version":3,"file":"vendors~plone-volto-components-manage-Widgets-DatetimeWidget~plone-volto-components-manage-Widgets-R~a875f490.js","sources":["webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/DatetimeWidget.jsx","webpack:///./node_modules/rc-time-picker/assets/index.css","webpack:///./node_modules/react-dates/lib/css/_datepicker.css"],"sourcesContent":["/**\n * DatetimeWidget component.\n * @module components/manage/Widgets/DatetimeWidget\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport moment from 'moment';\nimport { SingleDatePicker } from 'react-dates';\nimport TimePicker from 'rc-time-picker';\nimport cx from 'classnames';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport leftKey from '@plone/volto/icons/left-key.svg';\nimport rightKey from '@plone/volto/icons/right-key.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport 'rc-time-picker/assets/index.css';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n\nconst messages = defineMessages({\n  date: {\n    id: 'Date',\n    defaultMessage: 'Date',\n  },\n  time: {\n    id: 'Time',\n    defaultMessage: 'Time',\n  },\n});\n\nconst PrevIcon = () => (\n  <div\n    style={{\n      color: '#000',\n      left: '22px',\n      padding: '5px',\n      position: 'absolute',\n      top: '15px',\n    }}\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    tabIndex=\"0\"\n  >\n    <Icon name={leftKey} size=\"30px\" />\n  </div>\n);\nconst NextIcon = () => (\n  <div\n    style={{\n      color: '#000',\n      right: '22px',\n      padding: '5px',\n      position: 'absolute',\n      top: '15px',\n    }}\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    tabIndex=\"0\"\n  >\n    <Icon name={rightKey} size=\"30px\" />\n  </div>\n);\n\nconst defaultTimeDateOnly = {\n  hour: 12,\n  minute: 0,\n  second: 0,\n};\n\n/**\n * DatetimeWidget component class\n * @class DatetimeWidget\n * @extends Component\n */\nclass DatetimeWidget extends Component {\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs DatetimeWidget\n   */\n  constructor(props) {\n    super(props);\n    //  Used to set a server timezone or UTC as default\n    moment.defineLocale(\n      this.props.intl.locale,\n      moment.localeData(this.props.intl.locale)._config,\n    ); // copy locale to moment-timezone\n    let datetime = null;\n\n    if (this.props.value) {\n      // check if datetime has timezone, otherwise assumes it's UTC\n      datetime = this.props.value.match(/T(.)*(-|\\+|Z)/g)\n        ? // Since we assume UTC everywhere, then transform to local (momentjs default)\n          moment(this.props.value)\n        : // This might happen in old Plone versions dates\n          moment(`${this.props.value}Z`);\n    }\n\n    this.state = {\n      focused: false,\n      isDefault: datetime?.toISOString() === moment().utc().toISOString(),\n      datetime,\n      dateOnly: this.props.dateOnly || this.props.widget === 'date',\n    };\n  }\n\n  /**\n   * Update date storage\n   * @method onDateChange\n   * @param {Object} date updated momentjs Object for date\n   * @returns {undefined}\n   */\n  onDateChange = (date) => {\n    if (date)\n      this.setState(\n        (prevState) => ({\n          datetime: prevState.datetime\n            ? prevState.datetime.set({\n                year: date.year(),\n                month: date.month(),\n                date: date.date(),\n                ...(this.state.dateOnly ? defaultTimeDateOnly : {}),\n              })\n            : moment().set({\n                year: date.year(),\n                month: date.month(),\n                date: date.date(),\n                ...(this.state.dateOnly ? defaultTimeDateOnly : {}),\n              }),\n          isDefault: false,\n        }),\n        () => this.onDateTimeChange(),\n      );\n  };\n\n  /**\n   * Update date storage\n   * @method onTimeChange\n   * @param {Object} time updated momentjs Object for time\n   * @returns {undefined}\n   */\n  onTimeChange = (time) => {\n    this.setState(\n      (prevState) => ({\n        datetime: prevState.datetime\n          ? prevState.datetime.set({\n              hours: time.hours(),\n              minutes: time.minutes(),\n              seconds: 0,\n            })\n          : moment().set({\n              hours: time.hours(),\n              minutes: time.minutes(),\n              seconds: 0,\n            }),\n        isDefault: false,\n      }),\n      () => this.onDateTimeChange(),\n    );\n  };\n\n  /**\n   * Update date storage\n   * @method onDateTimeChange\n   * @returns {undefined}\n   */\n  onDateTimeChange = () => {\n    const dateValue = this.state.dateOnly\n      ? this.state.datetime.format('YYYY-MM-DD')\n      : this.state.datetime.toISOString();\n    this.props.onChange(this.props.id, dateValue);\n  };\n\n  onResetDates = () => {\n    this.setState(\n      (prevState) => ({\n        datetime: null,\n        isDefault: false,\n      }),\n      this.props.onChange(this.props.id, null),\n    );\n  };\n\n  /**\n   * Handle SingleDatePicker focus\n   * @method onFocusChange\n   * @param {boolean} focused component focus state.\n   * @returns {undefined}\n   */\n  onFocusChange = ({ focused }) => this.setState({ focused });\n\n  render() {\n    const { id, noPastDates, resettable, intl } = this.props;\n    const { datetime, isDefault, focused } = this.state;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <div className=\"date-time-widget-wrapper\">\n          <div\n            className={cx('ui input date-input', {\n              'default-date': isDefault,\n            })}\n          >\n            <SingleDatePicker\n              date={datetime}\n              disabled={this.props.isDisabled}\n              onDateChange={this.onDateChange}\n              focused={focused}\n              numberOfMonths={1}\n              {...(noPastDates ? {} : { isOutsideRange: () => false })}\n              onFocusChange={this.onFocusChange}\n              noBorder\n              displayFormat={moment.localeData(intl.locale).longDateFormat('L')}\n              navPrev={<PrevIcon />}\n              navNext={<NextIcon />}\n              id={`${id}-date`}\n              placeholder={intl.formatMessage(messages.date)}\n            />\n          </div>\n          {!this.state.dateOnly && (\n            <div\n              className={cx('ui input time-input', {\n                'default-date': isDefault,\n              })}\n            >\n              <TimePicker\n                disabled={this.props.isDisabled}\n                defaultValue={datetime}\n                value={datetime}\n                onChange={this.onTimeChange}\n                allowEmpty={false}\n                showSecond={false}\n                use12Hours={intl.locale === 'en'}\n                id={`${id}-time`}\n                format={moment.localeData(intl.locale).longDateFormat('LT')}\n                placeholder={intl.formatMessage(messages.time)}\n                focusOnOpen\n                placement=\"bottomRight\"\n              />\n            </div>\n          )}\n          {resettable && (\n            <button\n              disabled={this.props.isDisabled || !datetime}\n              onClick={() => this.onResetDates()}\n              className=\"item ui noborder button\"\n            >\n              <Icon name={clearSVG} size=\"24px\" className=\"close\" />\n            </button>\n          )}\n        </div>\n      </FormFieldWrapper>\n    );\n  }\n}\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDatetimeWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  dateOnly: PropTypes.bool,\n  noPastDates: PropTypes.bool,\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  resettable: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nDatetimeWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  dateOnly: false,\n  noPastDates: false,\n  value: null,\n  resettable: true,\n};\n\nexport default injectIntl(DatetimeWidget);\n","// Exports\nmodule.exports = {};\n","// Exports\nmodule.exports = {};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAMA;;;;;;AAKA;AACA;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AAFA;AAiCA;AAGA;AAEA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAHA;AAMA;AAdA;AAkBA;AACA;AAtDA;AA8DA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAKA;AAZA;AAgBA;AACA;AAhFA;AAuFA;AAGA;AACA;AACA;AA5FA;AA8FA;AAEA;AACA;AAFA;AAMA;AACA;AAtGA;AA6GA;AAAA;AAAA;AAAA;AACA;AA3GA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;;;;;;;;AAqFA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AALA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AArLA;AAuLA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;;;;;;;;;;;ACjSA;AACA;;;;;;;;;;;;ACDA;AACA;;;;;A","sourceRoot":""}