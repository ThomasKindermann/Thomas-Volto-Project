{"version":3,"sources":["webpack:///./node_modules/@plone/volto/src/components/theme/View/EventDatesInfo.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/EventView.jsx"],"names":["datesForDisplay","start","end","mStart","moment","mEnd","isValid","sameDay","isSame","sameTime","startDate","format","startTime","endDate","endTime","When","whole_day","open_end","intl","useIntl","locale","datesInfo","className","cx","Recurrence","recurrence","indexOf","RRule","optionsToString","dtstart","Date","rrule","rrulestr","unfold","forceset","List","items","all","map","date","messages","defineMessages","what","when","allDates","where","contactName","contactPhone","attendees","website","visitWebsite","injectIntl","content","Container","title","description","image","Image","src","scales","thumb","download","floated","Segment","subjects","length","Header","dividing","sub","formatMessage","location","contact_name","contact_email","href","contact_phone","event_url","target","rel","text","dangerouslySetInnerHTML","__html","flattenHTMLToAppURL","data"],"mappings":"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","file":"static/js/plone-volto-components-theme-View-EventView.7d66e27e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { useIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { RRule, rrulestr } from 'rrule';\n\nexport const datesForDisplay = (start, end) => {\n  const mStart = moment(start);\n  const mEnd = moment(end);\n  if (!mStart.isValid() || !mEnd.isValid()) {\n    return null;\n  }\n  const sameDay = mStart.isSame(mEnd, 'day');\n  const sameTime = mStart.isSame(mEnd, 'minute');\n  return {\n    sameDay,\n    sameTime,\n    startDate: mStart.format('ll'),\n    startTime: mStart.format('LT'),\n    endDate: mEnd.format('ll'),\n    endTime: mEnd.format('LT'),\n  };\n};\n\nexport const When = ({ start, end, whole_day, open_end }) => {\n  const intl = useIntl();\n  moment.locale(intl.locale);\n\n  const datesInfo = datesForDisplay(start, end);\n  if (!datesInfo) {\n    return;\n  }\n  // TODO I18N INTL\n  return (\n    <p\n      className={cx('event-when', {\n        'same-day': datesInfo.sameDay,\n        'same-time': datesInfo.sameTime,\n        'whole-day': whole_day,\n        'open-end': open_end,\n      })}\n    >\n      {!datesInfo.sameDay ? (\n        <>\n          <span className=\"start\">\n            <span className=\"start-date\">{datesInfo.startDate}</span>\n            {!whole_day && (\n              <>\n                {/* Plone has an optional word based on locale here */}\n                <span> </span>\n                <span className=\"start-time\">{datesInfo.startTime}</span>\n              </>\n            )}\n          </span>\n          {!open_end && (\n            <>\n              &nbsp;to&nbsp;\n              <span className=\"end\">\n                <span className=\"end-date\">{datesInfo.endDate}</span>\n                {!whole_day && (\n                  <>\n                    {/* Plone has an optional word based on locale here */}\n                    <span> </span>\n                    <span className=\"end-time\">{datesInfo.endTime}</span>\n                  </>\n                )}\n              </span>\n            </>\n          )}\n        </>\n      ) : (\n        <>\n          {whole_day && (\n            <span className=\"start-date\">{datesInfo.startDate}</span>\n          )}\n          {open_end && !whole_day && (\n            <>\n              <span className=\"start-date\">{datesInfo.startDate}</span>\n              &nbsp;from&nbsp;\n              <span className=\"start-time\">{datesInfo.startTime}</span>\n            </>\n          )}\n          {!(whole_day || open_end) && (\n            <>\n              <span className=\"start-date\">{datesInfo.startDate}</span>\n              &nbsp;from&nbsp;\n              <span className=\"start-time\">{datesInfo.startTime}</span>\n              &nbsp;to&nbsp;\n              <span className=\"end-time\">{datesInfo.endTime}</span>\n            </>\n          )}\n        </>\n      )}\n    </p>\n  );\n};\n\nWhen.propTypes = {\n  start: PropTypes.string.isRequired,\n  end: PropTypes.string,\n  whole_day: PropTypes.bool,\n  open_end: PropTypes.bool,\n};\n\nexport const Recurrence = ({ recurrence, start }) => {\n  if (recurrence.indexOf('DTSTART') < 0) {\n    var dtstart = RRule.optionsToString({\n      dtstart: new Date(start),\n    });\n    recurrence = dtstart + '\\n' + recurrence;\n  }\n  const rrule = rrulestr(recurrence, { unfold: true, forceset: true });\n\n  return (\n    <List\n      items={rrule\n        .all()\n        .map((date) => datesForDisplay(date))\n        .map((date) => date.startDate)}\n    />\n  );\n};\n\nRecurrence.propTypes = {\n  recurrence: PropTypes.string.isRequired,\n  start: PropTypes.string.isRequired,\n};\n","/**\n * EventView view component.\n * @module components/theme/View/EventView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { flattenHTMLToAppURL } from '@plone/volto/helpers';\nimport { Container, Image, Segment, Header, List } from 'semantic-ui-react';\n\nimport {\n  When,\n  Recurrence,\n} from '@plone/volto/components/theme/View/EventDatesInfo';\n\nconst messages = defineMessages({\n  what: {\n    id: 'event_what',\n    defaultMessage: 'What',\n  },\n  when: {\n    id: 'event_when',\n    defaultMessage: 'When',\n  },\n  allDates: {\n    id: 'event_alldates',\n    defaultMessage: 'All dates',\n  },\n  where: {\n    id: 'event_where',\n    defaultMessage: 'Where',\n  },\n  contactName: {\n    id: 'event_contactname',\n    defaultMessage: 'Contact Name',\n  },\n  contactPhone: {\n    id: 'event_contactphone',\n    defaultMessage: 'Contact Phone',\n  },\n  attendees: {\n    id: 'event_attendees',\n    defaultMessage: 'Attendees',\n  },\n  website: {\n    id: 'event_website',\n    defaultMessage: 'Website',\n  },\n  visitWebsite: {\n    id: 'visit_external_website',\n    defaultMessage: 'Visit external website',\n  },\n});\n\n/**\n * EventView view component class.\n * @function EventView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst EventView = ({ intl, content }) => (\n  <Container className=\"view-wrapper event-view\">\n    {content.title && <h1 className=\"documentFirstHeading\">{content.title}</h1>}\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    {content.image && (\n      <Image\n        className=\"document-image\"\n        src={content.image.scales.thumb.download}\n        floated=\"right\"\n      />\n    )}\n    <Segment floated=\"right\">\n      {content.subjects.length > 0 && (\n        <>\n          <Header dividing sub>\n            {intl.formatMessage(messages.what)}\n          </Header>\n          <List items={content.subjects} />\n        </>\n      )}\n      <Header dividing sub>\n        {intl.formatMessage(messages.when)}\n      </Header>\n      <When\n        start={content.start}\n        end={content.end}\n        whole_day={content.whole_day}\n        open_end={content.open_end}\n      />\n      {content.recurrence && (\n        <>\n          <Header dividing sub>\n            {intl.formatMessage(messages.allDates)}\n          </Header>\n          <Recurrence recurrence={content.recurrence} start={content.start} />\n        </>\n      )}\n      {content.location && (\n        <>\n          <Header dividing sub>\n            {intl.formatMessage(messages.where)}\n          </Header>\n          <p>{content.location}</p>\n        </>\n      )}\n      {content.contact_name && (\n        <>\n          <Header dividing sub>\n            {intl.formatMessage(messages.contactName)}\n          </Header>\n          <p>\n            {content.contact_email ? (\n              <a href={`mailto:${content.contact_email}`}>\n                {content.contact_name}\n              </a>\n            ) : (\n              content.contact_name\n            )}\n          </p>\n        </>\n      )}\n      {content.contact_phone && (\n        <>\n          <Header dividing sub>\n            {intl.formatMessage(messages.contactPhone)}\n          </Header>\n          <p>{content.contact_phone}</p>\n        </>\n      )}\n      {content.attendees.length > 0 && (\n        <>\n          <Header dividing sub>\n            {intl.formatMessage(messages.attendees)}\n          </Header>\n          <List items={content.attendees} />\n        </>\n      )}\n      {content.event_url && (\n        <>\n          <Header dividing sub>\n            {intl.formatMessage(messages.website)}\n          </Header>\n          <p>\n            <a\n              href={content.event_url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {intl.formatMessage(messages.visitWebsite)}\n            </a>\n          </p>\n        </>\n      )}\n    </Segment>\n    {content.text && (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: flattenHTMLToAppURL(content.text.data),\n        }}\n      />\n    )}\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEventView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    text: PropTypes.shape({\n      data: PropTypes.string,\n    }),\n    attendees: PropTypes.arrayOf(PropTypes.string).isRequired,\n    contact_email: PropTypes.string,\n    contact_name: PropTypes.string,\n    contact_phone: PropTypes.string,\n    end: PropTypes.string.isRequired,\n    event_url: PropTypes.string,\n    location: PropTypes.string,\n    open_end: PropTypes.bool,\n    recurrence: PropTypes.any,\n    start: PropTypes.string.isRequired,\n    subjects: PropTypes.arrayOf(PropTypes.string).isRequired,\n    whole_day: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default injectIntl(EventView);\n"],"sourceRoot":""}