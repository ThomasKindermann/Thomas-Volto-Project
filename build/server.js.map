{"version":3,"file":"server.js","sources":["webpack:///webpack/bootstrap","webpack:////private/var/folders/6x/2bvkfpcs78n85c_xxfdt42000000gn/T/tmp-8010-0AgbpxgN1hiO-.js","webpack:///./locales lazy ^\\.\\/.*\\.json$ namespace object","webpack:///./node_modules/@plone/volto/src/actions/actions/actions.js","webpack:///./node_modules/@plone/volto/src/actions/addons/addons.js","webpack:///./node_modules/@plone/volto/src/actions/asyncConnect/asyncConnect.js","webpack:///./node_modules/@plone/volto/src/actions/blocksClipboard/blocksClipboard.js","webpack:///./node_modules/@plone/volto/src/actions/breadcrumbs/breadcrumbs.js","webpack:///./node_modules/@plone/volto/src/actions/clipboard/clipboard.js","webpack:///./node_modules/@plone/volto/src/actions/comments/comments.js","webpack:///./node_modules/@plone/volto/src/actions/content/content.js","webpack:///./node_modules/@plone/volto/src/actions/contextNavigation/contextNavigation.js","webpack:///./node_modules/@plone/volto/src/actions/controlpanels/controlpanels.js","webpack:///./node_modules/@plone/volto/src/actions/diff/diff.js","webpack:///./node_modules/@plone/volto/src/actions/emailNotification/emailNotification.js","webpack:///./node_modules/@plone/volto/src/actions/emailSend/emailSend.js","webpack:///./node_modules/@plone/volto/src/actions/groups/groups.js","webpack:///./node_modules/@plone/volto/src/actions/history/history.js","webpack:///./node_modules/@plone/volto/src/actions/index.js","webpack:///./node_modules/@plone/volto/src/actions/lazyLibraries/lazyLibraries.js","webpack:///./node_modules/@plone/volto/src/actions/messages/messages.js","webpack:///./node_modules/@plone/volto/src/actions/navigation/navigation.js","webpack:///./node_modules/@plone/volto/src/actions/querystring/querystring.js","webpack:///./node_modules/@plone/volto/src/actions/querystringsearch/querystringsearch.js","webpack:///./node_modules/@plone/volto/src/actions/roles/roles.js","webpack:///./node_modules/@plone/volto/src/actions/schema/schema.js","webpack:///./node_modules/@plone/volto/src/actions/search/search.js","webpack:///./node_modules/@plone/volto/src/actions/sharing/sharing.js","webpack:///./node_modules/@plone/volto/src/actions/sidebar/sidebar.js","webpack:///./node_modules/@plone/volto/src/actions/toolbar/toolbar.js","webpack:///./node_modules/@plone/volto/src/actions/translations/translations.js","webpack:///./node_modules/@plone/volto/src/actions/types/types.js","webpack:///./node_modules/@plone/volto/src/actions/userSession/userSession.js","webpack:///./node_modules/@plone/volto/src/actions/users/users.js","webpack:///./node_modules/@plone/volto/src/actions/vocabularies/vocabularies.js","webpack:///./node_modules/@plone/volto/src/actions/workflow/workflow.js","webpack:///./node_modules/@plone/volto/src/components/index.js","webpack:///./node_modules/@plone/volto/src/components/manage/Actions/Actions.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Add/Add.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/components/Link/index.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/components/LinkButton/AddLinkForm.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/components/LinkButton/index.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/index.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/linkStrategy.js","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/utils/EditorUtils.js","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/utils/URLUtils.js","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/utils/mailRegex.js","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/utils/telRegex.js","webpack:///./node_modules/@plone/volto/src/components/manage/AnchorPlugin/utils/urlRegex.js","webpack:///./node_modules/@plone/volto/src/components/manage/BlockChooser/BlockChooser.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Block/BlocksForm.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Block/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Block/EditBlockWrapper.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Block/Schema.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Block/Settings.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Block/Style.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Description/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Description/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/HTML/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/HTML/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/HeroImageLeft/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/HeroImageLeft/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Image/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Image/ImageSidebar.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Image/ImageSizeWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Image/Schema.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Image/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Image/block-image.svg","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/LeadImage/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/LeadImage/LeadImageSidebar.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/LeadImage/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/DefaultTemplate.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/ImageGallery.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/ListingBody.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/ListingData.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/ListingMore.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/ListingSidebar.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/ListingStyle.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/QuerystringWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/SummaryTemplate.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/TemplateWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Listing/default-image.svg","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Maps/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Maps/MapsSidebar.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Maps/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Maps/block-maps.svg","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Table/Cell.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Table/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Table/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Text/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Text/Schema.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Text/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Title/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Title/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/ToC/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/ToC/Schema.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/ToC/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Video/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Video/VideoSidebar.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Video/View.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Blocks/Video/block-video.svg","webpack:///./node_modules/@plone/volto/src/components/manage/ConditionalLink/ConditionalLink.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/Contents.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/ContentsBreadcrumbs.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/ContentsIndexHeader.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/ContentsItem.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/ContentsPropertiesModal.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/ContentsRenameModal.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/ContentsTagsModal.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/ContentsUploadModal.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/ContentsWorkflowModal.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Contents/circle.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/AddonsControlpanel.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/ContentType.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeLayout.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeSchema.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypes.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypesActions.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanel.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanels.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/DatabaseInformation.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/ModerateComments.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/UsersControlpanel.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/UsersControlpanelGroups.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/UsersControlpanelUser.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Controlpanels/VersionOverview.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Delete/Delete.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Diff/Diff.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Diff/DiffField.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Display/Display.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/DragDropList/DragDropList.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Edit/Edit.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Form/BlockDataForm.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Form/BlocksToolbar.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Form/Field.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Form/Form.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Form/InlineForm.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Form/ModalForm.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/History/History.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/MaybeWrap/MaybeWrap.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Messages/Messages.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Multilingual/CreateTranslation.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Multilingual/ManageTranslations.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Preferences/ChangePassword.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Preferences/PersonalInformation.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Preferences/PersonalPreferences.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Sharing/Sharing.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Sidebar/AlignBlock.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Sidebar/ObjectBrowser.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Sidebar/ObjectBrowserBody.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Sidebar/ObjectBrowserNav.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Sidebar/Sidebar.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Sidebar/SidebarPopup.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Sidebar/SidebarPortal.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Toast/Toast.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Toolbar/More.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Toolbar/PersonalTools.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Toolbar/StandardWrapper.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Toolbar/Toolbar.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Toolbar/Types.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Toolbar/pastanaga-small.svg","webpack:///./node_modules/@plone/volto/src/components/manage/Toolbar/pastanaga.svg","webpack:///./node_modules/@plone/volto/src/components/manage/UniversalLink/UniversalLink.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/AlignWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/ArrayWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/CheckboxWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/EmailWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/FileWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/FormFieldWrapper.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/NumberWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/ObjectBrowserWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/ObjectListWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/ObjectWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/PasswordWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/QuerystringWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/ReferenceWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/SchemaWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/SchemaWidgetFieldset.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/SelectStyling.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/SelectWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/TextWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/TextareaWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/TokenWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/UrlWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Widgets/WysiwygWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/manage/Workflow/Workflow.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Anontools/Anontools.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/App/App.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/AppExtras/AppExtras.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Avatar/Avatar.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Breadcrumbs/Breadcrumbs.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Comments/CommentEditModal.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Comments/Comments.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/ConnectionRefused/ConnectionRefused.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/ContactForm/ContactForm.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/CorsError/CorsError.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Error/Error.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Footer/Footer.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Forbidden/Forbidden.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Header/Header.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Icon/Icon.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/LanguageSelector/LanguageSelector.js","webpack:///./node_modules/@plone/volto/src/components/theme/Login/Login.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Logo/Logo.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Logo/Logo.svg","webpack:///./node_modules/@plone/volto/src/components/theme/Logout/Logout.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/MultilingualRedirector/MultilingualRedirector.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Navigation/Navigation.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/NotFound/NotFound.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/OutdatedBrowser/OutdatedBrowser.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Pagination/Pagination.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/PasswordReset/PasswordReset.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/PasswordReset/RequestPasswordReset.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Register/Register.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Search/Search.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Search/SearchTags.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/SearchWidget/SearchWidget.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Sitemap/Sitemap.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/SkipLinks/SkipLinks.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/SocialSharing/SocialSharing.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Tags/Tags.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Title/Title.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/Unauthorized/Unauthorized.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/AlbumView.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/DefaultView.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/FileView.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/ImageView.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/LinkView.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/ListingView.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/NewsItemView.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/RenderBlocks.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/SummaryView.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/TabularView.jsx","webpack:///./node_modules/@plone/volto/src/components/theme/View/View.jsx","webpack:///./node_modules/@plone/volto/src/config/Blocks.jsx","webpack:///./node_modules/@plone/volto/src/config/ContentIcons.jsx","webpack:///./node_modules/@plone/volto/src/config/Loadables.jsx","webpack:///./node_modules/@plone/volto/src/config/NonContentRoutes.jsx","webpack:///./node_modules/@plone/volto/src/config/RichTextEditor/Blocks.jsx","webpack:///./node_modules/@plone/volto/src/config/RichTextEditor/FromHTML.jsx","webpack:///./node_modules/@plone/volto/src/config/RichTextEditor/Plugins.jsx","webpack:///./node_modules/@plone/volto/src/config/RichTextEditor/Styles.jsx","webpack:///./node_modules/@plone/volto/src/config/RichTextEditor/ToHTML.jsx","webpack:///./node_modules/@plone/volto/src/config/Sentry.jsx","webpack:///./node_modules/@plone/volto/src/config/Views.jsx","webpack:///./node_modules/@plone/volto/src/config/Widgets.jsx","webpack:///./node_modules/@plone/volto/src/config/index.js","webpack:///./node_modules/@plone/volto/src/config/server.js","webpack:///./node_modules/@plone/volto/src/constants/ActionTypes.js","webpack:///./node_modules/@plone/volto/src/constants/ControlpanelIcons.js","webpack:///./node_modules/@plone/volto/src/constants/Indexes.js","webpack:///./node_modules/@plone/volto/src/constants/Languages.js","webpack:///./node_modules/@plone/volto/src/constants/Layouts.js","webpack:///./node_modules/@plone/volto/src/constants/Workflows.js","webpack:///./node_modules/@plone/volto/src/error.jsx","webpack:///./node_modules/@plone/volto/src/express-middleware/files.js","webpack:///./node_modules/@plone/volto/src/express-middleware/images.js","webpack:///./node_modules/@plone/volto/src/express-middleware/robotstxt.js","webpack:///./node_modules/@plone/volto/src/express-middleware/sitemap.js","webpack:///./node_modules/@plone/volto/src/helpers/Api/APIResourceWithAuth.js","webpack:///./node_modules/@plone/volto/src/helpers/Api/Api.js","webpack:///./node_modules/@plone/volto/src/helpers/AsyncConnect/AsyncConnect.jsx","webpack:///./node_modules/@plone/volto/src/helpers/AsyncConnect/index.js","webpack:///./node_modules/@plone/volto/src/helpers/AsyncConnect/ssr.js","webpack:///./node_modules/@plone/volto/src/helpers/AsyncConnect/utils.js","webpack:///./node_modules/@plone/volto/src/helpers/AuthToken/AuthToken.js","webpack:///./node_modules/@plone/volto/src/helpers/Blocks/Blocks.js","webpack:///./node_modules/@plone/volto/src/helpers/BodyClass/BodyClass.jsx","webpack:///./node_modules/@plone/volto/src/helpers/Content/Content.js","webpack:///./node_modules/@plone/volto/src/helpers/FormValidation/FormValidation.js","webpack:///./node_modules/@plone/volto/src/helpers/Helmet/Helmet.js","webpack:///./node_modules/@plone/volto/src/helpers/Helmet/HelmetConstants.js","webpack:///./node_modules/@plone/volto/src/helpers/Helmet/HelmetUtils.js","webpack:///./node_modules/@plone/volto/src/helpers/Html/Html.jsx","webpack:///./node_modules/@plone/volto/src/helpers/Loadable/Loadable.js","webpack:///./node_modules/@plone/volto/src/helpers/Loadable/index.js","webpack:///./node_modules/@plone/volto/src/helpers/MessageLabels/MessageLabels.js","webpack:///./node_modules/@plone/volto/src/helpers/Robots/Robots.js","webpack:///./node_modules/@plone/volto/src/helpers/ScrollToTop/ScrollToTop.jsx","webpack:///./node_modules/@plone/volto/src/helpers/Sitemap/Sitemap.js","webpack:///./node_modules/@plone/volto/src/helpers/Url/Url.js","webpack:///./node_modules/@plone/volto/src/helpers/Url/urlRegex.js","webpack:///./node_modules/@plone/volto/src/helpers/Utils/Utils.js","webpack:///./node_modules/@plone/volto/src/helpers/Vocabularies/Vocabularies.js","webpack:///./node_modules/@plone/volto/src/helpers/index.js","webpack:///./node_modules/@plone/volto/src/icons/add-document.svg","webpack:///./node_modules/@plone/volto/src/icons/add.svg","webpack:///./node_modules/@plone/volto/src/icons/ahead.svg","webpack:///./node_modules/@plone/volto/src/icons/back-down.svg","webpack:///./node_modules/@plone/volto/src/icons/back.svg","webpack:///./node_modules/@plone/volto/src/icons/blank.svg","webpack:///./node_modules/@plone/volto/src/icons/bold.svg","webpack:///./node_modules/@plone/volto/src/icons/calendar.svg","webpack:///./node_modules/@plone/volto/src/icons/camera.svg","webpack:///./node_modules/@plone/volto/src/icons/check.svg","webpack:///./node_modules/@plone/volto/src/icons/checkbox-checked.svg","webpack:///./node_modules/@plone/volto/src/icons/checkbox-indeterminate.svg","webpack:///./node_modules/@plone/volto/src/icons/checkbox-unchecked.svg","webpack:///./node_modules/@plone/volto/src/icons/circle-bottom.svg","webpack:///./node_modules/@plone/volto/src/icons/circle-plus.svg","webpack:///./node_modules/@plone/volto/src/icons/circle-top.svg","webpack:///./node_modules/@plone/volto/src/icons/clear.svg","webpack:///./node_modules/@plone/volto/src/icons/code.svg","webpack:///./node_modules/@plone/volto/src/icons/column-after.svg","webpack:///./node_modules/@plone/volto/src/icons/column-before.svg","webpack:///./node_modules/@plone/volto/src/icons/column-delete.svg","webpack:///./node_modules/@plone/volto/src/icons/configuration-app.svg","webpack:///./node_modules/@plone/volto/src/icons/content-existing.svg","webpack:///./node_modules/@plone/volto/src/icons/copy.svg","webpack:///./node_modules/@plone/volto/src/icons/cut.svg","webpack:///./node_modules/@plone/volto/src/icons/delete.svg","webpack:///./node_modules/@plone/volto/src/icons/description.svg","webpack:///./node_modules/@plone/volto/src/icons/down-key.svg","webpack:///./node_modules/@plone/volto/src/icons/drag.svg","webpack:///./node_modules/@plone/volto/src/icons/editing.svg","webpack:///./node_modules/@plone/volto/src/icons/error.svg","webpack:///./node_modules/@plone/volto/src/icons/file.svg","webpack:///./node_modules/@plone/volto/src/icons/folder.svg","webpack:///./node_modules/@plone/volto/src/icons/forbidden.svg","webpack:///./node_modules/@plone/volto/src/icons/fullscreen.svg","webpack:///./node_modules/@plone/volto/src/icons/globe.svg","webpack:///./node_modules/@plone/volto/src/icons/hero.svg","webpack:///./node_modules/@plone/volto/src/icons/home.svg","webpack:///./node_modules/@plone/volto/src/icons/image-fit.svg","webpack:///./node_modules/@plone/volto/src/icons/image-full.svg","webpack:///./node_modules/@plone/volto/src/icons/image-left.svg","webpack:///./node_modules/@plone/volto/src/icons/image-right.svg","webpack:///./node_modules/@plone/volto/src/icons/image.svg","webpack:///./node_modules/@plone/volto/src/icons/indent.svg","webpack:///./node_modules/@plone/volto/src/icons/info.svg","webpack:///./node_modules/@plone/volto/src/icons/italic.svg","webpack:///./node_modules/@plone/volto/src/icons/left-key.svg","webpack:///./node_modules/@plone/volto/src/icons/link.svg","webpack:///./node_modules/@plone/volto/src/icons/list-bullet.svg","webpack:///./node_modules/@plone/volto/src/icons/list-numbered.svg","webpack:///./node_modules/@plone/volto/src/icons/log-out.svg","webpack:///./node_modules/@plone/volto/src/icons/megaphone.svg","webpack:///./node_modules/@plone/volto/src/icons/more.svg","webpack:///./node_modules/@plone/volto/src/icons/move-down.svg","webpack:///./node_modules/@plone/volto/src/icons/move-up.svg","webpack:///./node_modules/@plone/volto/src/icons/nav.svg","webpack:///./node_modules/@plone/volto/src/icons/open.svg","webpack:///./node_modules/@plone/volto/src/icons/page.svg","webpack:///./node_modules/@plone/volto/src/icons/paste.svg","webpack:///./node_modules/@plone/volto/src/icons/pause.svg","webpack:///./node_modules/@plone/volto/src/icons/pen.svg","webpack:///./node_modules/@plone/volto/src/icons/play.svg","webpack:///./node_modules/@plone/volto/src/icons/properties.svg","webpack:///./node_modules/@plone/volto/src/icons/quote.svg","webpack:///./node_modules/@plone/volto/src/icons/ready.svg","webpack:///./node_modules/@plone/volto/src/icons/rename.svg","webpack:///./node_modules/@plone/volto/src/icons/right-key.svg","webpack:///./node_modules/@plone/volto/src/icons/row-after.svg","webpack:///./node_modules/@plone/volto/src/icons/row-before.svg","webpack:///./node_modules/@plone/volto/src/icons/row-delete.svg","webpack:///./node_modules/@plone/volto/src/icons/save.svg","webpack:///./node_modules/@plone/volto/src/icons/semaphore.svg","webpack:///./node_modules/@plone/volto/src/icons/show.svg","webpack:///./node_modules/@plone/volto/src/icons/sort-down.svg","webpack:///./node_modules/@plone/volto/src/icons/sort-up.svg","webpack:///./node_modules/@plone/volto/src/icons/subtext.svg","webpack:///./node_modules/@plone/volto/src/icons/table.svg","webpack:///./node_modules/@plone/volto/src/icons/tag.svg","webpack:///./node_modules/@plone/volto/src/icons/text.svg","webpack:///./node_modules/@plone/volto/src/icons/unlink.svg","webpack:///./node_modules/@plone/volto/src/icons/up-key.svg","webpack:///./node_modules/@plone/volto/src/icons/upload.svg","webpack:///./node_modules/@plone/volto/src/icons/user.svg","webpack:///./node_modules/@plone/volto/src/icons/videocamera.svg","webpack:///./node_modules/@plone/volto/src/icons/warning.svg","webpack:///./node_modules/@plone/volto/src/icons/zoom.svg","webpack:///./node_modules/@plone/volto/src/middleware/api.js","webpack:///./node_modules/@plone/volto/src/middleware/crashReporter.js","webpack:///./node_modules/@plone/volto/src/middleware/index.js","webpack:///./node_modules/@plone/volto/src/reducers/actions/actions.js","webpack:///./node_modules/@plone/volto/src/reducers/addons/addons.js","webpack:///./node_modules/@plone/volto/src/reducers/apierror/apierror.js","webpack:///./node_modules/@plone/volto/src/reducers/asyncConnect/asyncConnect.js","webpack:///./node_modules/@plone/volto/src/reducers/blocksClipboard/blocksClipboard.js","webpack:///./node_modules/@plone/volto/src/reducers/breadcrumbs/breadcrumbs.js","webpack:///./node_modules/@plone/volto/src/reducers/browserdetect/browserdetect.js","webpack:///./node_modules/@plone/volto/src/reducers/clipboard/clipboard.js","webpack:///./node_modules/@plone/volto/src/reducers/comments/comments.js","webpack:///./node_modules/@plone/volto/src/reducers/content/content.js","webpack:///./node_modules/@plone/volto/src/reducers/contextNavigation/contextNavigation.js","webpack:///./node_modules/@plone/volto/src/reducers/controlpanels/controlpanels.js","webpack:///./node_modules/@plone/volto/src/reducers/diff/diff.js","webpack:///./node_modules/@plone/volto/src/reducers/emailNotification/emailNotification.js","webpack:///./node_modules/@plone/volto/src/reducers/emailSend/emailSend.js","webpack:///./node_modules/@plone/volto/src/reducers/form/form.js","webpack:///./node_modules/@plone/volto/src/reducers/groups/groups.js","webpack:///./node_modules/@plone/volto/src/reducers/history/history.js","webpack:///./node_modules/@plone/volto/src/reducers/index.js","webpack:///./node_modules/@plone/volto/src/reducers/lazyLibraries/lazyLibraries.js","webpack:///./node_modules/@plone/volto/src/reducers/messages/messages.js","webpack:///./node_modules/@plone/volto/src/reducers/navigation/navigation.js","webpack:///./node_modules/@plone/volto/src/reducers/querystring/querystring.js","webpack:///./node_modules/@plone/volto/src/reducers/querystringsearch/querystringsearch.js","webpack:///./node_modules/@plone/volto/src/reducers/roles/roles.js","webpack:///./node_modules/@plone/volto/src/reducers/schema/schema.js","webpack:///./node_modules/@plone/volto/src/reducers/search/search.js","webpack:///./node_modules/@plone/volto/src/reducers/sharing/sharing.js","webpack:///./node_modules/@plone/volto/src/reducers/sidebar/sidebar.js","webpack:///./node_modules/@plone/volto/src/reducers/toolbar/toolbar.js","webpack:///./node_modules/@plone/volto/src/reducers/types/types.js","webpack:///./node_modules/@plone/volto/src/reducers/userSession/userSession.js","webpack:///./node_modules/@plone/volto/src/reducers/users/users.js","webpack:///./node_modules/@plone/volto/src/reducers/vocabularies/vocabularies.js","webpack:///./node_modules/@plone/volto/src/reducers/workflow/workflow.js","webpack:///./node_modules/@plone/volto/src/registry.js","webpack:///./node_modules/@plone/volto/src/routes.js","webpack:///./node_modules/@plone/volto/src/runtime_config.js","webpack:///./node_modules/@plone/volto/src/sentry.js","webpack:///./node_modules/@plone/volto/src/server.jsx","webpack:///./node_modules/@plone/volto/src/start-server.js","webpack:///./node_modules/@plone/volto/src/store.js","webpack:///./node_modules/razzle-dev-utils/prettyNodeErrors.js","webpack:///./node_modules/react-image-gallery/styles/css/image-gallery.css","webpack:///(webpack)/hot/log-apply-result.js","webpack:///(webpack)/hot/log.js","webpack:///(webpack)/hot/poll.js","webpack:///./src/config.js","webpack:///./src/index.js","webpack:///./src/reducers/index.js","webpack:///./src/routes.js","webpack:///external \"@babel/code-frame\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/extends\"","webpack:///external \"@babel/runtime/helpers/objectWithoutProperties\"","webpack:///external \"@loadable/component\"","webpack:///external \"@loadable/server\"","webpack:///external \"@sentry/browser\"","webpack:///external \"@sentry/integrations\"","webpack:///external \"@sentry/node\"","webpack:///external \"classnames\"","webpack:///external \"connected-react-router\"","webpack:///external \"date-fns\"","webpack:///external \"decorate-component-with-props\"","webpack:///external \"detect-browser\"","webpack:///external \"diff\"","webpack:///external \"draft-js\"","webpack:///external \"draft-js-block-breakout-plugin\"","webpack:///external \"draft-js-buttons/lib/utils/createBlockStyleButton\"","webpack:///external \"draft-js-buttons/lib/utils/createInlineStyleButton\"","webpack:///external \"draft-js-import-html\"","webpack:///external \"draft-js-inline-toolbar-plugin\"","webpack:///external \"draft-js-plugins-editor\"","webpack:///external \"draft-js-plugins-utils\"","webpack:///external \"draft-js/lib/isSoftNewlineEvent\"","webpack:///external \"draftjs-filters\"","webpack:///external \"express\"","webpack:///external \"filesize\"","webpack:///external \"fs\"","webpack:///external \"history\"","webpack:///external \"hoist-non-react-statics\"","webpack:///external \"http\"","webpack:///external \"http-proxy-middleware\"","webpack:///external \"immutable\"","webpack:///external \"jest-message-util\"","webpack:///external \"jwt-decode\"","webpack:///external \"langmap\"","webpack:///external \"locale\"","webpack:///external \"lodash-move\"","webpack:///external \"lodash/cloneDeep\"","webpack:///external \"lodash/compact\"","webpack:///external \"lodash/concat\"","webpack:///external \"lodash/endsWith\"","webpack:///external \"lodash/filter\"","webpack:///external \"lodash/find\"","webpack:///external \"lodash/findIndex\"","webpack:///external \"lodash/flatten\"","webpack:///external \"lodash/fromPairs\"","webpack:///external \"lodash/groupBy\"","webpack:///external \"lodash/identity\"","webpack:///external \"lodash/includes\"","webpack:///external \"lodash/indexOf\"","webpack:///external \"lodash/intersection\"","webpack:///external \"lodash/isArray\"","webpack:///external \"lodash/isBoolean\"","webpack:///external \"lodash/isEmpty\"","webpack:///external \"lodash/isEqual\"","webpack:///external \"lodash/isObject\"","webpack:///external \"lodash/isString\"","webpack:///external \"lodash/join\"","webpack:///external \"lodash/keys\"","webpack:///external \"lodash/last\"","webpack:///external \"lodash/map\"","webpack:///external \"lodash/mapKeys\"","webpack:///external \"lodash/mapValues\"","webpack:///external \"lodash/memoize\"","webpack:///external \"lodash/merge\"","webpack:///external \"lodash/nth\"","webpack:///external \"lodash/omit\"","webpack:///external \"lodash/omitBy\"","webpack:///external \"lodash/pickBy\"","webpack:///external \"lodash/pull\"","webpack:///external \"lodash/reduce\"","webpack:///external \"lodash/remove\"","webpack:///external \"lodash/reverse\"","webpack:///external \"lodash/slice\"","webpack:///external \"lodash/split\"","webpack:///external \"lodash/startsWith\"","webpack:///external \"lodash/toPairs\"","webpack:///external \"lodash/transform\"","webpack:///external \"lodash/trim\"","webpack:///external \"lodash/union\"","webpack:///external \"lodash/uniq\"","webpack:///external \"lodash/uniqBy\"","webpack:///external \"lodash/values\"","webpack:///external \"lodash/without\"","webpack:///external \"moment\"","webpack:///external \"object-assign\"","webpack:///external \"path\"","webpack:///external \"prepend-http\"","webpack:///external \"prettier/parser-html\"","webpack:///external \"prettier/standalone\"","webpack:///external \"pretty-bytes\"","webpack:///external \"prismjs/components/prism-core\"","webpack:///external \"prismjs/components/prism-markup\"","webpack:///external \"promise-file-reader\"","webpack:///external \"prop-types\"","webpack:///external \"query-string\"","webpack:///external \"rc-time-picker\"","webpack:///external \"react\"","webpack:///external \"react-anchor-link-smooth-scroll\"","webpack:///external \"react-animate-height\"","webpack:///external \"react-beautiful-dnd\"","webpack:///external \"react-cookie\"","webpack:///external \"react-dates\"","webpack:///external \"react-dates/initialize\"","webpack:///external \"react-dnd\"","webpack:///external \"react-dnd-html5-backend\"","webpack:///external \"react-dom/server\"","webpack:///external \"react-dropzone\"","webpack:///external \"react-fast-compare\"","webpack:///external \"react-image-gallery\"","webpack:///external \"react-intl\"","webpack:///external \"react-intl-redux\"","webpack:///external \"react-portal\"","webpack:///external \"react-redux\"","webpack:///external \"react-router\"","webpack:///external \"react-router-config\"","webpack:///external \"react-router-dom\"","webpack:///external \"react-select\"","webpack:///external \"react-select-async-paginate\"","webpack:///external \"react-select/async-creatable\"","webpack:///external \"react-select/creatable\"","webpack:///external \"react-share\"","webpack:///external \"react-side-effect\"","webpack:///external \"react-simple-code-editor\"","webpack:///external \"react-toastify\"","webpack:///external \"react-transition-group\"","webpack:///external \"redraft\"","webpack:///external \"redux\"","webpack:///external \"redux-devtools-extension/developmentOnly\"","webpack:///external \"redux-localstorage-simple\"","webpack:///external \"redux-mock-store\"","webpack:///external \"redux-thunk\"","webpack:///external \"rrule\"","webpack:///external \"semantic-ui-react\"","webpack:///external \"semantic-ui-react/dist/commonjs/lib\"","webpack:///external \"serialize-javascript\"","webpack:///external \"superagent\"","webpack:///external \"tlds\"","webpack:///external \"union-class-names\"","webpack:///external \"url\"","webpack:///external \"uuid\"","webpack:///external \"zlib\""],"sourcesContent":[" \t// eslint-disable-next-line no-unused-vars\n \tfunction hotDownloadUpdateChunk(chunkId) {\n \t\tvar chunk = require(\"./\" + \"\" + chunkId + \".\" + hotCurrentHash + \".hot-update.js\");\n \t\thotAddUpdateChunk(chunk.id, chunk.modules);\n \t}\n\n \t// eslint-disable-next-line no-unused-vars\n \tfunction hotDownloadManifest() {\n \t\ttry {\n \t\t\tvar update = require(\"./\" + \"\" + hotCurrentHash + \".hot-update.json\");\n \t\t} catch (e) {\n \t\t\treturn Promise.resolve();\n \t\t}\n \t\treturn Promise.resolve(update);\n \t}\n\n \t//eslint-disable-next-line no-unused-vars\n \tfunction hotDisposeChunk(chunkId) {\n \t\tdelete installedChunks[chunkId];\n \t}\n\n \tvar hotApplyOnUpdate = true;\n \t// eslint-disable-next-line no-unused-vars\n \tvar hotCurrentHash = \"e7704e899bae91923c1f\";\n \tvar hotRequestTimeout = 10000;\n \tvar hotCurrentModuleData = {};\n \tvar hotCurrentChildModule;\n \t// eslint-disable-next-line no-unused-vars\n \tvar hotCurrentParents = [];\n \t// eslint-disable-next-line no-unused-vars\n \tvar hotCurrentParentsTemp = [];\n\n \t// eslint-disable-next-line no-unused-vars\n \tfunction hotCreateRequire(moduleId) {\n \t\tvar me = installedModules[moduleId];\n \t\tif (!me) return __webpack_require__;\n \t\tvar fn = function(request) {\n \t\t\tif (me.hot.active) {\n \t\t\t\tif (installedModules[request]) {\n \t\t\t\t\tif (installedModules[request].parents.indexOf(moduleId) === -1) {\n \t\t\t\t\t\tinstalledModules[request].parents.push(moduleId);\n \t\t\t\t\t}\n \t\t\t\t} else {\n \t\t\t\t\thotCurrentParents = [moduleId];\n \t\t\t\t\thotCurrentChildModule = request;\n \t\t\t\t}\n \t\t\t\tif (me.children.indexOf(request) === -1) {\n \t\t\t\t\tme.children.push(request);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tconsole.warn(\n \t\t\t\t\t\"[HMR] unexpected require(\" +\n \t\t\t\t\t\trequest +\n \t\t\t\t\t\t\") from disposed module \" +\n \t\t\t\t\t\tmoduleId\n \t\t\t\t);\n \t\t\t\thotCurrentParents = [];\n \t\t\t}\n \t\t\treturn __webpack_require__(request);\n \t\t};\n \t\tvar ObjectFactory = function ObjectFactory(name) {\n \t\t\treturn {\n \t\t\t\tconfigurable: true,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: function() {\n \t\t\t\t\treturn __webpack_require__[name];\n \t\t\t\t},\n \t\t\t\tset: function(value) {\n \t\t\t\t\t__webpack_require__[name] = value;\n \t\t\t\t}\n \t\t\t};\n \t\t};\n \t\tfor (var name in __webpack_require__) {\n \t\t\tif (\n \t\t\t\tObject.prototype.hasOwnProperty.call(__webpack_require__, name) &&\n \t\t\t\tname !== \"e\" &&\n \t\t\t\tname !== \"t\"\n \t\t\t) {\n \t\t\t\tObject.defineProperty(fn, name, ObjectFactory(name));\n \t\t\t}\n \t\t}\n \t\tfn.e = function(chunkId) {\n \t\t\tif (hotStatus === \"ready\") hotSetStatus(\"prepare\");\n \t\t\thotChunksLoading++;\n \t\t\treturn __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {\n \t\t\t\tfinishChunkLoading();\n \t\t\t\tthrow err;\n \t\t\t});\n\n \t\t\tfunction finishChunkLoading() {\n \t\t\t\thotChunksLoading--;\n \t\t\t\tif (hotStatus === \"prepare\") {\n \t\t\t\t\tif (!hotWaitingFilesMap[chunkId]) {\n \t\t\t\t\t\thotEnsureUpdateChunk(chunkId);\n \t\t\t\t\t}\n \t\t\t\t\tif (hotChunksLoading === 0 && hotWaitingFiles === 0) {\n \t\t\t\t\t\thotUpdateDownloaded();\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t};\n \t\tfn.t = function(value, mode) {\n \t\t\tif (mode & 1) value = fn(value);\n \t\t\treturn __webpack_require__.t(value, mode & ~1);\n \t\t};\n \t\treturn fn;\n \t}\n\n \t// eslint-disable-next-line no-unused-vars\n \tfunction hotCreateModule(moduleId) {\n \t\tvar hot = {\n \t\t\t// private stuff\n \t\t\t_acceptedDependencies: {},\n \t\t\t_declinedDependencies: {},\n \t\t\t_selfAccepted: false,\n \t\t\t_selfDeclined: false,\n \t\t\t_selfInvalidated: false,\n \t\t\t_disposeHandlers: [],\n \t\t\t_main: hotCurrentChildModule !== moduleId,\n\n \t\t\t// Module API\n \t\t\tactive: true,\n \t\t\taccept: function(dep, callback) {\n \t\t\t\tif (dep === undefined) hot._selfAccepted = true;\n \t\t\t\telse if (typeof dep === \"function\") hot._selfAccepted = dep;\n \t\t\t\telse if (typeof dep === \"object\")\n \t\t\t\t\tfor (var i = 0; i < dep.length; i++)\n \t\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback || function() {};\n \t\t\t\telse hot._acceptedDependencies[dep] = callback || function() {};\n \t\t\t},\n \t\t\tdecline: function(dep) {\n \t\t\t\tif (dep === undefined) hot._selfDeclined = true;\n \t\t\t\telse if (typeof dep === \"object\")\n \t\t\t\t\tfor (var i = 0; i < dep.length; i++)\n \t\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\n \t\t\t\telse hot._declinedDependencies[dep] = true;\n \t\t\t},\n \t\t\tdispose: function(callback) {\n \t\t\t\thot._disposeHandlers.push(callback);\n \t\t\t},\n \t\t\taddDisposeHandler: function(callback) {\n \t\t\t\thot._disposeHandlers.push(callback);\n \t\t\t},\n \t\t\tremoveDisposeHandler: function(callback) {\n \t\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\n \t\t\t\tif (idx >= 0) hot._disposeHandlers.splice(idx, 1);\n \t\t\t},\n \t\t\tinvalidate: function() {\n \t\t\t\tthis._selfInvalidated = true;\n \t\t\t\tswitch (hotStatus) {\n \t\t\t\t\tcase \"idle\":\n \t\t\t\t\t\thotUpdate = {};\n \t\t\t\t\t\thotUpdate[moduleId] = modules[moduleId];\n \t\t\t\t\t\thotSetStatus(\"ready\");\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"ready\":\n \t\t\t\t\t\thotApplyInvalidatedModule(moduleId);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"prepare\":\n \t\t\t\t\tcase \"check\":\n \t\t\t\t\tcase \"dispose\":\n \t\t\t\t\tcase \"apply\":\n \t\t\t\t\t\t(hotQueuedInvalidatedModules =\n \t\t\t\t\t\t\thotQueuedInvalidatedModules || []).push(moduleId);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tdefault:\n \t\t\t\t\t\t// ignore requests in error states\n \t\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t},\n\n \t\t\t// Management API\n \t\t\tcheck: hotCheck,\n \t\t\tapply: hotApply,\n \t\t\tstatus: function(l) {\n \t\t\t\tif (!l) return hotStatus;\n \t\t\t\thotStatusHandlers.push(l);\n \t\t\t},\n \t\t\taddStatusHandler: function(l) {\n \t\t\t\thotStatusHandlers.push(l);\n \t\t\t},\n \t\t\tremoveStatusHandler: function(l) {\n \t\t\t\tvar idx = hotStatusHandlers.indexOf(l);\n \t\t\t\tif (idx >= 0) hotStatusHandlers.splice(idx, 1);\n \t\t\t},\n\n \t\t\t//inherit from previous dispose call\n \t\t\tdata: hotCurrentModuleData[moduleId]\n \t\t};\n \t\thotCurrentChildModule = undefined;\n \t\treturn hot;\n \t}\n\n \tvar hotStatusHandlers = [];\n \tvar hotStatus = \"idle\";\n\n \tfunction hotSetStatus(newStatus) {\n \t\thotStatus = newStatus;\n \t\tfor (var i = 0; i < hotStatusHandlers.length; i++)\n \t\t\thotStatusHandlers[i].call(null, newStatus);\n \t}\n\n \t// while downloading\n \tvar hotWaitingFiles = 0;\n \tvar hotChunksLoading = 0;\n \tvar hotWaitingFilesMap = {};\n \tvar hotRequestedFilesMap = {};\n \tvar hotAvailableFilesMap = {};\n \tvar hotDeferred;\n\n \t// The update info\n \tvar hotUpdate, hotUpdateNewHash, hotQueuedInvalidatedModules;\n\n \tfunction toModuleId(id) {\n \t\tvar isNumber = +id + \"\" === id;\n \t\treturn isNumber ? +id : id;\n \t}\n\n \tfunction hotCheck(apply) {\n \t\tif (hotStatus !== \"idle\") {\n \t\t\tthrow new Error(\"check() is only allowed in idle status\");\n \t\t}\n \t\thotApplyOnUpdate = apply;\n \t\thotSetStatus(\"check\");\n \t\treturn hotDownloadManifest(hotRequestTimeout).then(function(update) {\n \t\t\tif (!update) {\n \t\t\t\thotSetStatus(hotApplyInvalidatedModules() ? \"ready\" : \"idle\");\n \t\t\t\treturn null;\n \t\t\t}\n \t\t\thotRequestedFilesMap = {};\n \t\t\thotWaitingFilesMap = {};\n \t\t\thotAvailableFilesMap = update.c;\n \t\t\thotUpdateNewHash = update.h;\n\n \t\t\thotSetStatus(\"prepare\");\n \t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\thotDeferred = {\n \t\t\t\t\tresolve: resolve,\n \t\t\t\t\treject: reject\n \t\t\t\t};\n \t\t\t});\n \t\t\thotUpdate = {};\n \t\t\tfor(var chunkId in installedChunks)\n \t\t\t// eslint-disable-next-line no-lone-blocks\n \t\t\t{\n \t\t\t\thotEnsureUpdateChunk(chunkId);\n \t\t\t}\n \t\t\tif (\n \t\t\t\thotStatus === \"prepare\" &&\n \t\t\t\thotChunksLoading === 0 &&\n \t\t\t\thotWaitingFiles === 0\n \t\t\t) {\n \t\t\t\thotUpdateDownloaded();\n \t\t\t}\n \t\t\treturn promise;\n \t\t});\n \t}\n\n \t// eslint-disable-next-line no-unused-vars\n \tfunction hotAddUpdateChunk(chunkId, moreModules) {\n \t\tif (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])\n \t\t\treturn;\n \t\thotRequestedFilesMap[chunkId] = false;\n \t\tfor (var moduleId in moreModules) {\n \t\t\tif (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\thotUpdate[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif (--hotWaitingFiles === 0 && hotChunksLoading === 0) {\n \t\t\thotUpdateDownloaded();\n \t\t}\n \t}\n\n \tfunction hotEnsureUpdateChunk(chunkId) {\n \t\tif (!hotAvailableFilesMap[chunkId]) {\n \t\t\thotWaitingFilesMap[chunkId] = true;\n \t\t} else {\n \t\t\thotRequestedFilesMap[chunkId] = true;\n \t\t\thotWaitingFiles++;\n \t\t\thotDownloadUpdateChunk(chunkId);\n \t\t}\n \t}\n\n \tfunction hotUpdateDownloaded() {\n \t\thotSetStatus(\"ready\");\n \t\tvar deferred = hotDeferred;\n \t\thotDeferred = null;\n \t\tif (!deferred) return;\n \t\tif (hotApplyOnUpdate) {\n \t\t\t// Wrap deferred object in Promise to mark it as a well-handled Promise to\n \t\t\t// avoid triggering uncaught exception warning in Chrome.\n \t\t\t// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666\n \t\t\tPromise.resolve()\n \t\t\t\t.then(function() {\n \t\t\t\t\treturn hotApply(hotApplyOnUpdate);\n \t\t\t\t})\n \t\t\t\t.then(\n \t\t\t\t\tfunction(result) {\n \t\t\t\t\t\tdeferred.resolve(result);\n \t\t\t\t\t},\n \t\t\t\t\tfunction(err) {\n \t\t\t\t\t\tdeferred.reject(err);\n \t\t\t\t\t}\n \t\t\t\t);\n \t\t} else {\n \t\t\tvar outdatedModules = [];\n \t\t\tfor (var id in hotUpdate) {\n \t\t\t\tif (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\n \t\t\t\t\toutdatedModules.push(toModuleId(id));\n \t\t\t\t}\n \t\t\t}\n \t\t\tdeferred.resolve(outdatedModules);\n \t\t}\n \t}\n\n \tfunction hotApply(options) {\n \t\tif (hotStatus !== \"ready\")\n \t\t\tthrow new Error(\"apply() is only allowed in ready status\");\n \t\toptions = options || {};\n \t\treturn hotApplyInternal(options);\n \t}\n\n \tfunction hotApplyInternal(options) {\n \t\thotApplyInvalidatedModules();\n\n \t\tvar cb;\n \t\tvar i;\n \t\tvar j;\n \t\tvar module;\n \t\tvar moduleId;\n\n \t\tfunction getAffectedStuff(updateModuleId) {\n \t\t\tvar outdatedModules = [updateModuleId];\n \t\t\tvar outdatedDependencies = {};\n\n \t\t\tvar queue = outdatedModules.map(function(id) {\n \t\t\t\treturn {\n \t\t\t\t\tchain: [id],\n \t\t\t\t\tid: id\n \t\t\t\t};\n \t\t\t});\n \t\t\twhile (queue.length > 0) {\n \t\t\t\tvar queueItem = queue.pop();\n \t\t\t\tvar moduleId = queueItem.id;\n \t\t\t\tvar chain = queueItem.chain;\n \t\t\t\tmodule = installedModules[moduleId];\n \t\t\t\tif (\n \t\t\t\t\t!module ||\n \t\t\t\t\t(module.hot._selfAccepted && !module.hot._selfInvalidated)\n \t\t\t\t)\n \t\t\t\t\tcontinue;\n \t\t\t\tif (module.hot._selfDeclined) {\n \t\t\t\t\treturn {\n \t\t\t\t\t\ttype: \"self-declined\",\n \t\t\t\t\t\tchain: chain,\n \t\t\t\t\t\tmoduleId: moduleId\n \t\t\t\t\t};\n \t\t\t\t}\n \t\t\t\tif (module.hot._main) {\n \t\t\t\t\treturn {\n \t\t\t\t\t\ttype: \"unaccepted\",\n \t\t\t\t\t\tchain: chain,\n \t\t\t\t\t\tmoduleId: moduleId\n \t\t\t\t\t};\n \t\t\t\t}\n \t\t\t\tfor (var i = 0; i < module.parents.length; i++) {\n \t\t\t\t\tvar parentId = module.parents[i];\n \t\t\t\t\tvar parent = installedModules[parentId];\n \t\t\t\t\tif (!parent) continue;\n \t\t\t\t\tif (parent.hot._declinedDependencies[moduleId]) {\n \t\t\t\t\t\treturn {\n \t\t\t\t\t\t\ttype: \"declined\",\n \t\t\t\t\t\t\tchain: chain.concat([parentId]),\n \t\t\t\t\t\t\tmoduleId: moduleId,\n \t\t\t\t\t\t\tparentId: parentId\n \t\t\t\t\t\t};\n \t\t\t\t\t}\n \t\t\t\t\tif (outdatedModules.indexOf(parentId) !== -1) continue;\n \t\t\t\t\tif (parent.hot._acceptedDependencies[moduleId]) {\n \t\t\t\t\t\tif (!outdatedDependencies[parentId])\n \t\t\t\t\t\t\toutdatedDependencies[parentId] = [];\n \t\t\t\t\t\taddAllToSet(outdatedDependencies[parentId], [moduleId]);\n \t\t\t\t\t\tcontinue;\n \t\t\t\t\t}\n \t\t\t\t\tdelete outdatedDependencies[parentId];\n \t\t\t\t\toutdatedModules.push(parentId);\n \t\t\t\t\tqueue.push({\n \t\t\t\t\t\tchain: chain.concat([parentId]),\n \t\t\t\t\t\tid: parentId\n \t\t\t\t\t});\n \t\t\t\t}\n \t\t\t}\n\n \t\t\treturn {\n \t\t\t\ttype: \"accepted\",\n \t\t\t\tmoduleId: updateModuleId,\n \t\t\t\toutdatedModules: outdatedModules,\n \t\t\t\toutdatedDependencies: outdatedDependencies\n \t\t\t};\n \t\t}\n\n \t\tfunction addAllToSet(a, b) {\n \t\t\tfor (var i = 0; i < b.length; i++) {\n \t\t\t\tvar item = b[i];\n \t\t\t\tif (a.indexOf(item) === -1) a.push(item);\n \t\t\t}\n \t\t}\n\n \t\t// at begin all updates modules are outdated\n \t\t// the \"outdated\" status can propagate to parents if they don't accept the children\n \t\tvar outdatedDependencies = {};\n \t\tvar outdatedModules = [];\n \t\tvar appliedUpdate = {};\n\n \t\tvar warnUnexpectedRequire = function warnUnexpectedRequire() {\n \t\t\tconsole.warn(\n \t\t\t\t\"[HMR] unexpected require(\" + result.moduleId + \") to disposed module\"\n \t\t\t);\n \t\t};\n\n \t\tfor (var id in hotUpdate) {\n \t\t\tif (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\n \t\t\t\tmoduleId = toModuleId(id);\n \t\t\t\t/** @type {TODO} */\n \t\t\t\tvar result;\n \t\t\t\tif (hotUpdate[id]) {\n \t\t\t\t\tresult = getAffectedStuff(moduleId);\n \t\t\t\t} else {\n \t\t\t\t\tresult = {\n \t\t\t\t\t\ttype: \"disposed\",\n \t\t\t\t\t\tmoduleId: id\n \t\t\t\t\t};\n \t\t\t\t}\n \t\t\t\t/** @type {Error|false} */\n \t\t\t\tvar abortError = false;\n \t\t\t\tvar doApply = false;\n \t\t\t\tvar doDispose = false;\n \t\t\t\tvar chainInfo = \"\";\n \t\t\t\tif (result.chain) {\n \t\t\t\t\tchainInfo = \"\\nUpdate propagation: \" + result.chain.join(\" -> \");\n \t\t\t\t}\n \t\t\t\tswitch (result.type) {\n \t\t\t\t\tcase \"self-declined\":\n \t\t\t\t\t\tif (options.onDeclined) options.onDeclined(result);\n \t\t\t\t\t\tif (!options.ignoreDeclined)\n \t\t\t\t\t\t\tabortError = new Error(\n \t\t\t\t\t\t\t\t\"Aborted because of self decline: \" +\n \t\t\t\t\t\t\t\t\tresult.moduleId +\n \t\t\t\t\t\t\t\t\tchainInfo\n \t\t\t\t\t\t\t);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"declined\":\n \t\t\t\t\t\tif (options.onDeclined) options.onDeclined(result);\n \t\t\t\t\t\tif (!options.ignoreDeclined)\n \t\t\t\t\t\t\tabortError = new Error(\n \t\t\t\t\t\t\t\t\"Aborted because of declined dependency: \" +\n \t\t\t\t\t\t\t\t\tresult.moduleId +\n \t\t\t\t\t\t\t\t\t\" in \" +\n \t\t\t\t\t\t\t\t\tresult.parentId +\n \t\t\t\t\t\t\t\t\tchainInfo\n \t\t\t\t\t\t\t);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"unaccepted\":\n \t\t\t\t\t\tif (options.onUnaccepted) options.onUnaccepted(result);\n \t\t\t\t\t\tif (!options.ignoreUnaccepted)\n \t\t\t\t\t\t\tabortError = new Error(\n \t\t\t\t\t\t\t\t\"Aborted because \" + moduleId + \" is not accepted\" + chainInfo\n \t\t\t\t\t\t\t);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"accepted\":\n \t\t\t\t\t\tif (options.onAccepted) options.onAccepted(result);\n \t\t\t\t\t\tdoApply = true;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase \"disposed\":\n \t\t\t\t\t\tif (options.onDisposed) options.onDisposed(result);\n \t\t\t\t\t\tdoDispose = true;\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tdefault:\n \t\t\t\t\t\tthrow new Error(\"Unexception type \" + result.type);\n \t\t\t\t}\n \t\t\t\tif (abortError) {\n \t\t\t\t\thotSetStatus(\"abort\");\n \t\t\t\t\treturn Promise.reject(abortError);\n \t\t\t\t}\n \t\t\t\tif (doApply) {\n \t\t\t\t\tappliedUpdate[moduleId] = hotUpdate[moduleId];\n \t\t\t\t\taddAllToSet(outdatedModules, result.outdatedModules);\n \t\t\t\t\tfor (moduleId in result.outdatedDependencies) {\n \t\t\t\t\t\tif (\n \t\t\t\t\t\t\tObject.prototype.hasOwnProperty.call(\n \t\t\t\t\t\t\t\tresult.outdatedDependencies,\n \t\t\t\t\t\t\t\tmoduleId\n \t\t\t\t\t\t\t)\n \t\t\t\t\t\t) {\n \t\t\t\t\t\t\tif (!outdatedDependencies[moduleId])\n \t\t\t\t\t\t\t\toutdatedDependencies[moduleId] = [];\n \t\t\t\t\t\t\taddAllToSet(\n \t\t\t\t\t\t\t\toutdatedDependencies[moduleId],\n \t\t\t\t\t\t\t\tresult.outdatedDependencies[moduleId]\n \t\t\t\t\t\t\t);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tif (doDispose) {\n \t\t\t\t\taddAllToSet(outdatedModules, [result.moduleId]);\n \t\t\t\t\tappliedUpdate[moduleId] = warnUnexpectedRequire;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// Store self accepted outdated modules to require them later by the module system\n \t\tvar outdatedSelfAcceptedModules = [];\n \t\tfor (i = 0; i < outdatedModules.length; i++) {\n \t\t\tmoduleId = outdatedModules[i];\n \t\t\tif (\n \t\t\t\tinstalledModules[moduleId] &&\n \t\t\t\tinstalledModules[moduleId].hot._selfAccepted &&\n \t\t\t\t// removed self-accepted modules should not be required\n \t\t\t\tappliedUpdate[moduleId] !== warnUnexpectedRequire &&\n \t\t\t\t// when called invalidate self-accepting is not possible\n \t\t\t\t!installedModules[moduleId].hot._selfInvalidated\n \t\t\t) {\n \t\t\t\toutdatedSelfAcceptedModules.push({\n \t\t\t\t\tmodule: moduleId,\n \t\t\t\t\tparents: installedModules[moduleId].parents.slice(),\n \t\t\t\t\terrorHandler: installedModules[moduleId].hot._selfAccepted\n \t\t\t\t});\n \t\t\t}\n \t\t}\n\n \t\t// Now in \"dispose\" phase\n \t\thotSetStatus(\"dispose\");\n \t\tObject.keys(hotAvailableFilesMap).forEach(function(chunkId) {\n \t\t\tif (hotAvailableFilesMap[chunkId] === false) {\n \t\t\t\thotDisposeChunk(chunkId);\n \t\t\t}\n \t\t});\n\n \t\tvar idx;\n \t\tvar queue = outdatedModules.slice();\n \t\twhile (queue.length > 0) {\n \t\t\tmoduleId = queue.pop();\n \t\t\tmodule = installedModules[moduleId];\n \t\t\tif (!module) continue;\n\n \t\t\tvar data = {};\n\n \t\t\t// Call dispose handlers\n \t\t\tvar disposeHandlers = module.hot._disposeHandlers;\n \t\t\tfor (j = 0; j < disposeHandlers.length; j++) {\n \t\t\t\tcb = disposeHandlers[j];\n \t\t\t\tcb(data);\n \t\t\t}\n \t\t\thotCurrentModuleData[moduleId] = data;\n\n \t\t\t// disable module (this disables requires from this module)\n \t\t\tmodule.hot.active = false;\n\n \t\t\t// remove module from cache\n \t\t\tdelete installedModules[moduleId];\n\n \t\t\t// when disposing there is no need to call dispose handler\n \t\t\tdelete outdatedDependencies[moduleId];\n\n \t\t\t// remove \"parents\" references from all children\n \t\t\tfor (j = 0; j < module.children.length; j++) {\n \t\t\t\tvar child = installedModules[module.children[j]];\n \t\t\t\tif (!child) continue;\n \t\t\t\tidx = child.parents.indexOf(moduleId);\n \t\t\t\tif (idx >= 0) {\n \t\t\t\t\tchild.parents.splice(idx, 1);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// remove outdated dependency from module children\n \t\tvar dependency;\n \t\tvar moduleOutdatedDependencies;\n \t\tfor (moduleId in outdatedDependencies) {\n \t\t\tif (\n \t\t\t\tObject.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)\n \t\t\t) {\n \t\t\t\tmodule = installedModules[moduleId];\n \t\t\t\tif (module) {\n \t\t\t\t\tmoduleOutdatedDependencies = outdatedDependencies[moduleId];\n \t\t\t\t\tfor (j = 0; j < moduleOutdatedDependencies.length; j++) {\n \t\t\t\t\t\tdependency = moduleOutdatedDependencies[j];\n \t\t\t\t\t\tidx = module.children.indexOf(dependency);\n \t\t\t\t\t\tif (idx >= 0) module.children.splice(idx, 1);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// Now in \"apply\" phase\n \t\thotSetStatus(\"apply\");\n\n \t\tif (hotUpdateNewHash !== undefined) {\n \t\t\thotCurrentHash = hotUpdateNewHash;\n \t\t\thotUpdateNewHash = undefined;\n \t\t}\n \t\thotUpdate = undefined;\n\n \t\t// insert new code\n \t\tfor (moduleId in appliedUpdate) {\n \t\t\tif (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {\n \t\t\t\tmodules[moduleId] = appliedUpdate[moduleId];\n \t\t\t}\n \t\t}\n\n \t\t// call accept handlers\n \t\tvar error = null;\n \t\tfor (moduleId in outdatedDependencies) {\n \t\t\tif (\n \t\t\t\tObject.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)\n \t\t\t) {\n \t\t\t\tmodule = installedModules[moduleId];\n \t\t\t\tif (module) {\n \t\t\t\t\tmoduleOutdatedDependencies = outdatedDependencies[moduleId];\n \t\t\t\t\tvar callbacks = [];\n \t\t\t\t\tfor (i = 0; i < moduleOutdatedDependencies.length; i++) {\n \t\t\t\t\t\tdependency = moduleOutdatedDependencies[i];\n \t\t\t\t\t\tcb = module.hot._acceptedDependencies[dependency];\n \t\t\t\t\t\tif (cb) {\n \t\t\t\t\t\t\tif (callbacks.indexOf(cb) !== -1) continue;\n \t\t\t\t\t\t\tcallbacks.push(cb);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tfor (i = 0; i < callbacks.length; i++) {\n \t\t\t\t\t\tcb = callbacks[i];\n \t\t\t\t\t\ttry {\n \t\t\t\t\t\t\tcb(moduleOutdatedDependencies);\n \t\t\t\t\t\t} catch (err) {\n \t\t\t\t\t\t\tif (options.onErrored) {\n \t\t\t\t\t\t\t\toptions.onErrored({\n \t\t\t\t\t\t\t\t\ttype: \"accept-errored\",\n \t\t\t\t\t\t\t\t\tmoduleId: moduleId,\n \t\t\t\t\t\t\t\t\tdependencyId: moduleOutdatedDependencies[i],\n \t\t\t\t\t\t\t\t\terror: err\n \t\t\t\t\t\t\t\t});\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\tif (!options.ignoreErrored) {\n \t\t\t\t\t\t\t\tif (!error) error = err;\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// Load self accepted modules\n \t\tfor (i = 0; i < outdatedSelfAcceptedModules.length; i++) {\n \t\t\tvar item = outdatedSelfAcceptedModules[i];\n \t\t\tmoduleId = item.module;\n \t\t\thotCurrentParents = item.parents;\n \t\t\thotCurrentChildModule = moduleId;\n \t\t\ttry {\n \t\t\t\t__webpack_require__(moduleId);\n \t\t\t} catch (err) {\n \t\t\t\tif (typeof item.errorHandler === \"function\") {\n \t\t\t\t\ttry {\n \t\t\t\t\t\titem.errorHandler(err);\n \t\t\t\t\t} catch (err2) {\n \t\t\t\t\t\tif (options.onErrored) {\n \t\t\t\t\t\t\toptions.onErrored({\n \t\t\t\t\t\t\t\ttype: \"self-accept-error-handler-errored\",\n \t\t\t\t\t\t\t\tmoduleId: moduleId,\n \t\t\t\t\t\t\t\terror: err2,\n \t\t\t\t\t\t\t\toriginalError: err\n \t\t\t\t\t\t\t});\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (!options.ignoreErrored) {\n \t\t\t\t\t\t\tif (!error) error = err2;\n \t\t\t\t\t\t}\n \t\t\t\t\t\tif (!error) error = err;\n \t\t\t\t\t}\n \t\t\t\t} else {\n \t\t\t\t\tif (options.onErrored) {\n \t\t\t\t\t\toptions.onErrored({\n \t\t\t\t\t\t\ttype: \"self-accept-errored\",\n \t\t\t\t\t\t\tmoduleId: moduleId,\n \t\t\t\t\t\t\terror: err\n \t\t\t\t\t\t});\n \t\t\t\t\t}\n \t\t\t\t\tif (!options.ignoreErrored) {\n \t\t\t\t\t\tif (!error) error = err;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n\n \t\t// handle errors in accept handlers and self accepted module load\n \t\tif (error) {\n \t\t\thotSetStatus(\"fail\");\n \t\t\treturn Promise.reject(error);\n \t\t}\n\n \t\tif (hotQueuedInvalidatedModules) {\n \t\t\treturn hotApplyInternal(options).then(function(list) {\n \t\t\t\toutdatedModules.forEach(function(moduleId) {\n \t\t\t\t\tif (list.indexOf(moduleId) < 0) list.push(moduleId);\n \t\t\t\t});\n \t\t\t\treturn list;\n \t\t\t});\n \t\t}\n\n \t\thotSetStatus(\"idle\");\n \t\treturn new Promise(function(resolve) {\n \t\t\tresolve(outdatedModules);\n \t\t});\n \t}\n\n \tfunction hotApplyInvalidatedModules() {\n \t\tif (hotQueuedInvalidatedModules) {\n \t\t\tif (!hotUpdate) hotUpdate = {};\n \t\t\thotQueuedInvalidatedModules.forEach(hotApplyInvalidatedModule);\n \t\t\thotQueuedInvalidatedModules = undefined;\n \t\t\treturn true;\n \t\t}\n \t}\n\n \tfunction hotApplyInvalidatedModule(moduleId) {\n \t\tif (!Object.prototype.hasOwnProperty.call(hotUpdate, moduleId))\n \t\t\thotUpdate[moduleId] = modules[moduleId];\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded chunks\n \t// \"0\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t\"server\": 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {},\n \t\t\thot: hotCreateModule(moduleId),\n \t\t\tparents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),\n \t\t\tchildren: []\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// require() chunk loading for javascript\n\n \t\t// \"0\" is the signal for \"already loaded\"\n \t\tif(installedChunks[chunkId] !== 0) {\n \t\t\tvar chunk = require(\"./\" + ({\"vendors~plone-volto-components-manage-Widgets-DatetimeWidget~plone-volto-components-manage-Widgets-R~a875f490\":\"vendors~plone-volto-components-manage-Widgets-DatetimeWidget~plone-volto-components-manage-Widgets-R~a875f490\",\"vendors~plone-volto-components-manage-Widgets-RecurrenceWidget-RecurrenceWidget\":\"vendors~plone-volto-components-manage-Widgets-RecurrenceWidget-RecurrenceWidget\",\"vendors~plone-volto-components-theme-View-EventView\":\"vendors~plone-volto-components-theme-View-EventView\"}[chunkId]||chunkId) + \".js\");\n \t\t\tvar moreModules = chunk.modules, chunkIds = chunk.ids;\n \t\t\tfor(var moduleId in moreModules) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t\tfor(var i = 0; i < chunkIds.length; i++)\n \t\t\t\tinstalledChunks[chunkIds[i]] = 0;\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"http://localhost:3001/\";\n\n \t// uncaught error handler for webpack runtime\n \t__webpack_require__.oe = function(err) {\n \t\tprocess.nextTick(function() {\n \t\t\tthrow err; // catch this error by using import().catch()\n \t\t});\n \t};\n\n \t// __webpack_hash__\n \t__webpack_require__.h = function() { return hotCurrentHash; };\n\n\n \t// Load entry module and return exports\n \treturn hotCreateRequire(0)(__webpack_require__.s = 0);\n","/*\nThis file is autogenerated. Don't change it directly.\nInstead, change the \"addons\" setting in your package.json file.\n*/\n\nconst projectConfigLoader = require('@package/config');\n\nconst safeWrapper = (func) => (config) => {\n  const res = func(config);\n  if (typeof res === 'undefined') {\n    throw new Error(\"Configuration function doesn't return config\");\n  }\n  return res;\n}\n\nconst projectConfig = (config) => {\n  return typeof projectConfigLoader.default === \"function\" ? projectConfigLoader.default(config) : config;\n}\n\nconst load = (config) => {\n  const addonLoaders = [];\n  if(!addonLoaders.every((el) => typeof el === \"function\")) {\n    throw new TypeError(\n      'Each addon has to provide a function applying its configuration to the projects configuration.',\n    );\n  }\n  return projectConfig(addonLoaders.reduce((acc, apply) => safeWrapper(apply)(acc), config));\n};\nexport default load;\n","var map = {\n\t\"./de.json\": [\n\t\t\"./locales/de.json\",\n\t\t0\n\t],\n\t\"./en.json\": [\n\t\t\"./locales/en.json\",\n\t\t1\n\t],\n\t\"./es.json\": [\n\t\t\"./locales/es.json\",\n\t\t2\n\t],\n\t\"./eu.json\": [\n\t\t\"./locales/eu.json\",\n\t\t3\n\t],\n\t\"./fr.json\": [\n\t\t\"./locales/fr.json\",\n\t\t4\n\t],\n\t\"./it.json\": [\n\t\t\"./locales/it.json\",\n\t\t5\n\t],\n\t\"./ja.json\": [\n\t\t\"./locales/ja.json\",\n\t\t6\n\t],\n\t\"./nl.json\": [\n\t\t\"./locales/nl.json\",\n\t\t7\n\t],\n\t\"./pt.json\": [\n\t\t\"./locales/pt.json\",\n\t\t8\n\t],\n\t\"./pt_BR.json\": [\n\t\t\"./locales/pt_BR.json\",\n\t\t9\n\t],\n\t\"./ro.json\": [\n\t\t\"./locales/ro.json\",\n\t\t10\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./locales lazy recursive ^\\\\.\\\\/.*\\\\.json$\";\nmodule.exports = webpackAsyncContext;","/**\n * Actions actions.\n * @module actions/actions/actions\n */\n\nimport { LIST_ACTIONS } from '@plone/volto/constants/ActionTypes';\n\n/**\n * List actions.\n * @function listActions\n * @param {string} url Content url.\n * @returns {Object} List actions action.\n */\nexport function listActions(url) {\n  return {\n    type: LIST_ACTIONS,\n    request: {\n      op: 'get',\n      path: `${url}/@actions`,\n    },\n  };\n}\n","/**\n * Add-ons actions.\n * @module actions/addons/addons\n */\n\nimport {\n  INSTALL_ADDON,\n  LIST_ADDONS,\n  UNINSTALL_ADDON,\n  UPGRADE_ADDON,\n} from '../../constants/ActionTypes';\n\n/**\n * List addons function\n * @function listAddons\n * @returns {Object} List addons action\n */\nexport function listAddons() {\n  return {\n    type: LIST_ADDONS,\n    request: {\n      op: 'get',\n      path: `/@addons`,\n    },\n  };\n}\n\n/**\n * Install addon function.\n * @function installAddon\n * @param {string} id Addon id\n * @returns {Object} install addon action.\n */\nexport function installAddon(id) {\n  return {\n    type: INSTALL_ADDON,\n    request: {\n      op: 'post',\n      path: `/@addons/${id}/install`,\n    },\n  };\n}\n\n/**\n * Uninstall addon function.\n * @function uninstallAddon\n * @param {string} id Addon id\n * @returns {Object} uninstall addon action.\n */\nexport function uninstallAddon(id) {\n  return {\n    type: UNINSTALL_ADDON,\n    request: {\n      op: 'post',\n      path: `/@addons/${id}/uninstall`,\n    },\n  };\n}\n\n/**\n * Uninstall addon function.\n * @function upgradeAddon\n * @param {string} id Addon id\n * @returns {Object} id of addon to upgrade.\n */\nexport function upgradeAddon(id) {\n  return {\n    type: UPGRADE_ADDON,\n    request: {\n      op: 'post',\n      path: `/@addons/${id}/upgrade`,\n    },\n  };\n}\n","export function clearKey(key) {\n  return {\n    type: '@redux-conn/CLEAR',\n    key,\n  };\n}\n\nexport function beginGlobalLoad() {\n  return {\n    type: '@redux-conn/BEGIN_GLOBAL_LOAD',\n  };\n}\n\nexport function endGlobalLoad() {\n  return {\n    type: '@redux-conn/END_GLOBAL_LOAD',\n  };\n}\n\nexport function load(key) {\n  return {\n    type: '@redux-conn/LOAD',\n    key,\n  };\n}\n\nexport function loadSuccess(key, data) {\n  return {\n    type: '@redux-conn/LOAD_SUCCESS',\n    key,\n    data,\n  };\n}\n\nexport function loadFail(key, error) {\n  return {\n    type: '@redux-conn/LOAD_FAIL',\n    key,\n    error,\n  };\n}\n","import {\n  SET_BLOCKS_CLIPBOARD,\n  RESET_BLOCKS_CLIPBOARD,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Copy blocks to clipboard function.\n * @function copyBlocks\n * @param {array} blocksData Block data\n * @returns {Object} Copy action.\n */\nexport function setBlocksClipboard(payload) {\n  return {\n    type: SET_BLOCKS_CLIPBOARD,\n    ...Object.assign(\n      {},\n      payload.cut ? { cut: payload.cut } : {},\n      payload.copy ? { copy: payload.copy } : {},\n    ),\n  };\n}\n\n/**\n * Reset blocks clipboard function.\n * @function resetBlocksClipboard\n * @returns {Object} Reset blocks clipboard\n */\nexport function resetBlocksClipboard() {\n  return {\n    type: RESET_BLOCKS_CLIPBOARD,\n  };\n}\n","/**\n * Breadcrumbs actions.\n * @module actions/breadcrumbs/breadcrumbs\n */\n\nimport { GET_BREADCRUMBS } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Get breadcrumbs.\n * @function getBreadcrumbs\n * @param {string} url Content url.\n * @returns {Object} Get breadcrumbs action.\n */\nexport function getBreadcrumbs(url) {\n  return {\n    type: GET_BREADCRUMBS,\n    request: {\n      op: 'get',\n      path: `${url}/@breadcrumbs`,\n    },\n  };\n}\n","/**\n * Clipboard actions.\n * @module actions/clipboard/clipboard\n */\n\nimport {\n  COPY_CONTENT,\n  MOVE_CONTENT,\n  COPY,\n  CUT,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Copy content function.\n * @function copyContent\n * @param {array} source Source urls.\n * @param {string} target Target url.\n * @returns {Object} Copy content action.\n */\nexport function copyContent(source, target) {\n  return {\n    type: COPY_CONTENT,\n    request: {\n      op: 'post',\n      path: `${target}/@copy`,\n      data: { source },\n    },\n  };\n}\n\n/**\n * Move content function.\n * @function moveContent\n * @param {array} source Source urls.\n * @param {string} target Target url.\n * @returns {Object} Move content action.\n */\nexport function moveContent(source, target) {\n  return {\n    type: MOVE_CONTENT,\n    request: {\n      op: 'post',\n      path: `${target}/@move`,\n      data: { source },\n    },\n  };\n}\n\n/**\n * Copy function.\n * @function copy\n * @param {array} urls Source urls.\n * @returns {Object} Copy action.\n */\nexport function copy(urls) {\n  return {\n    type: COPY,\n    source: urls,\n  };\n}\n\n/**\n * Cut function.\n * @function cut\n * @param {array} urls Source urls.\n * @returns {Object} Cut action.\n */\nexport function cut(urls) {\n  return {\n    type: CUT,\n    source: urls,\n  };\n}\n","/**\n * Comments actions.\n * @module actions/comments/comments\n */\n\nimport {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  LIST_COMMENTS,\n  LIST_MORE_COMMENTS,\n  UPDATE_COMMENT,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Add comment function.\n * @function addComment\n * @param {string} url Content url.\n * @param {string} text Body of the comment.\n * @returns {Object} Add comment action.\n */\nexport function addComment(url, text, commentId) {\n  const path = commentId ? `${url}/@comments/${commentId}` : `${url}/@comments`;\n\n  return {\n    type: ADD_COMMENT,\n    request: {\n      op: 'post',\n      path,\n      data: { text },\n    },\n  };\n}\n\n/**\n * List comments function\n * @function listComments\n * @param {string} url Content url\n * @returns {Object} List comment action\n */\nexport function listComments(url) {\n  return {\n    type: LIST_COMMENTS,\n    request: {\n      op: 'get',\n      path: `${url}/@comments`,\n    },\n  };\n}\n\nexport function listMoreComments(url) {\n  return {\n    type: LIST_MORE_COMMENTS,\n    request: {\n      op: 'get',\n      path: `${url}`,\n    },\n  };\n}\n\n/**\n * Delete comment function.\n * @function deleteComment\n * @param {string} url Content url.\n * @returns {Object} Delete comment action.\n */\nexport function deleteComment(url) {\n  return {\n    type: DELETE_COMMENT,\n    request: {\n      op: 'del',\n      path: url,\n    },\n  };\n}\n\n/**\n * Update comment function.\n * @function updateComment\n * @param {string} url Content url(s).\n * @param {string} text Body of the comment.\n * @returns {Object} Update content action.\n */\nexport function updateComment(url, text) {\n  return {\n    type: UPDATE_COMMENT,\n    request: {\n      op: 'patch',\n      path: url,\n      data: { text },\n    },\n  };\n}\n","/**\n * Content actions.\n * @module actions/content/content\n */\n\nimport {\n  CREATE_CONTENT,\n  DELETE_CONTENT,\n  UPDATE_CONTENT,\n  GET_CONTENT,\n  ORDER_CONTENT,\n  RESET_CONTENT,\n  UPDATECOLUMNS_CONTENT,\n} from '@plone/volto/constants/ActionTypes';\nimport { nestContent } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\n/**\n * Create content function.\n * @function createContent\n * @param {string} url Parent URL.\n * @param {Object|Array} content Content data.\n * @param {string} subrequest Optional. Key of the subrequest.\n * @returns {Object} Create content action.\n */\nexport function createContent(url, content, subrequest) {\n  return {\n    type: CREATE_CONTENT,\n    subrequest,\n    mode: 'serial',\n    request: Array.isArray(content)\n      ? content.map((item) => ({ op: 'post', path: url, data: item }))\n      : { op: 'post', path: url, data: nestContent(content) },\n  };\n}\n\n/**\n * Delete content function.\n * @function deleteContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Delete content action.\n */\nexport function deleteContent(urls) {\n  return {\n    type: DELETE_CONTENT,\n    mode: 'serial',\n    request:\n      typeof urls === 'string'\n        ? { op: 'del', path: urls }\n        : urls.map((url) => ({ op: 'del', path: url })),\n  };\n}\n\n/**\n * Update content function.\n * @function updateContent\n * @param {string|Array} urls Content url(s).\n * @param {Object|Array} content Content data.\n * @returns {Object} Update content action.\n */\nexport function updateContent(urls, content) {\n  return {\n    type: UPDATE_CONTENT,\n    request:\n      typeof urls === 'string'\n        ? { op: 'patch', path: urls, data: nestContent(content) }\n        : urls.map((url, index) => ({\n            op: 'patch',\n            path: url,\n            data: nestContent(content[index]),\n          })),\n  };\n}\n\n/**\n * Order content function\n * @function orderContent\n * @param {string} parent Parent url\n * @param {string} url Content url\n * @param {string|number} delta Order delta\n * @param {Array} subset Subset ids\n * @returns {Object} Order content action\n */\nexport function orderContent(parent, url, delta, subset) {\n  return {\n    type: ORDER_CONTENT,\n    request: {\n      op: 'patch',\n      path: parent,\n      data: { ordering: { obj_id: url, delta, subset_ids: subset } },\n    },\n  };\n}\n\n/**\n * Sort content function\n * @function sortContent\n * @param {string} url Content url\n * @param {string} on Sort on index\n * @param {string} order Sort order\n * @returns {Object} Sort content action\n */\nexport function sortContent(url, on, order) {\n  return {\n    type: UPDATE_CONTENT,\n    sort: { on, order },\n    request: {\n      op: 'patch',\n      path: url,\n      data: { sort: { on, order } },\n    },\n  };\n}\n\n/**\n * Get content function\n * @function getContent\n * @param {string} url Content url\n * @param {string} version Version id\n * @param {string} subrequest Key of the subrequest.\n * @param {boolean} fullobjects If full object information should be retrieved\n * @returns {Object} Get content action\n */\nexport function getContent(\n  url,\n  version = null,\n  subrequest = null,\n  page = null,\n  fullobjects = false,\n) {\n  const { settings } = config;\n  const query = Object.assign(\n    {},\n    fullobjects || settings.bbb_getContentFetchesFullobjects\n      ? { fullobjects: true }\n      : {},\n    page\n      ? {\n          b_start: settings.defaultPageSize * (page - 1),\n          b_size: settings.defaultPageSize,\n        }\n      : {},\n    settings.isMultilingual ? { expand: 'translations' } : {},\n  );\n\n  let qs = Object.keys(query)\n    .map(function (key) {\n      return key + '=' + query[key];\n    })\n    .join('&');\n\n  return {\n    type: GET_CONTENT,\n    subrequest,\n    request: {\n      op: 'get',\n      path: `${url}${version ? `/@history/${version}` : ''}${\n        qs ? `?${qs}` : ''\n      }`,\n    },\n  };\n}\n\n/**\n * Reset content function\n * @function resetContent\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Get content action\n */\nexport function resetContent(subrequest = null) {\n  return {\n    type: RESET_CONTENT,\n    subrequest,\n  };\n}\n\n/**\n * Add, remove or order indexes\n * @param {string} url Content url\n * @param {string} index indexes with order\n * @returns {Object} Index content action\n */\nexport function updateColumnsContent(url, index) {\n  return {\n    type: UPDATECOLUMNS_CONTENT,\n    indexcolumns: index,\n  };\n}\n","/**\n * Navigation actions.\n * @module actions/contextNavigation/contextNavigation\n */\n\nimport { GET_CONTEXT_NAVIGATION } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Get the context navigation\n * @function getContextNavigation\n * @param {string} url Content url.\n * @param {params} params Options for the navigation component\n * @returns {Object} Get context navigation action\n */\nexport function getContextNavigation(url, params = {}) {\n  let qs = Object.keys(params)\n    .sort()\n    .map((key) => `expand.contextnavigation.${key}=${params[key]}`)\n    .join('&');\n  const path = `${url}/@contextnavigation${qs ? `?${qs}` : ''}`;\n\n  return {\n    type: GET_CONTEXT_NAVIGATION,\n    url: path, // api middleware strips request\n    request: {\n      op: 'get',\n      path,\n    },\n  };\n}\n","/**\n * Controlpanels actions.\n * @module actions/controlpanels/controlpanels\n */\n\nimport {\n  GET_CONTROLPANEL,\n  POST_CONTROLPANEL,\n  DELETE_CONTROLPANEL,\n  LIST_CONTROLPANELS,\n  UPDATE_CONTROLPANEL,\n  SYSTEM_INFORMATION,\n  DATABASE_INFORMATION,\n} from '@plone/volto/constants/ActionTypes';\n/**\n * Get controlpanel function.\n * @function getControlpanel\n * @param {id} id Controlpanel id.\n * @returns {Object} Get controlpanel action.\n */\nexport function getControlpanel(id) {\n  return {\n    type: GET_CONTROLPANEL,\n    request: {\n      op: 'get',\n      path: `/@controlpanels/${id}`,\n    },\n  };\n}\n\n/**\n * Post controlpanel function.\n * @function postControlpanel\n * @param {id} id Controlpanel id.\n * @param {Object} data Controlpanel data.\n * @returns {Object} Post controlpanel action.\n */\nexport function postControlpanel(id, data) {\n  return {\n    type: POST_CONTROLPANEL,\n    request: {\n      op: 'post',\n      path: `/@controlpanels/${id}`,\n      data,\n    },\n  };\n}\n\n/**\n * Delete controlpanel function.\n * @function deleteControlpanel\n * @param {id} id Controlpanel id.\n * @param {string} item Controlpanel item to be deleted.\n * @returns {Object} Delete controlpanel action.\n */\nexport function deleteControlpanel(id, item) {\n  return {\n    type: DELETE_CONTROLPANEL,\n    request: {\n      op: 'del',\n      path: `/@controlpanels/${id}/${item}`,\n    },\n  };\n}\n\n/**\n * List controlpanels function.\n * @function listControlpanels\n * @returns {Object} List controlpanels action.\n */\nexport function listControlpanels() {\n  return {\n    type: LIST_CONTROLPANELS,\n    request: {\n      op: 'get',\n      path: '/@controlpanels',\n    },\n  };\n}\n\n/**\n * Update controlpanel function.\n * @function updateControlpanel\n * @param {string} url Controlpanel url.\n * @param {Object} data Controlpanel data.\n * @returns {Object} Update controlpanel action.\n */\nexport function updateControlpanel(url, data) {\n  return {\n    type: UPDATE_CONTROLPANEL,\n    request: {\n      op: 'patch',\n      path: url,\n      data,\n    },\n  };\n}\n\nexport function getSystemInformation() {\n  return {\n    type: SYSTEM_INFORMATION,\n    request: {\n      op: 'get',\n      path: '/@system',\n    },\n  };\n}\n\nexport function getDatabaseInformation() {\n  return {\n    type: DATABASE_INFORMATION,\n    request: {\n      op: 'get',\n      path: '/@database',\n    },\n  };\n}\n","/**\n * Diff actions.\n * @module actions/diff/diff\n */\n\nimport { GET_DIFF } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Get diff.\n * @function getDiff\n * @param {string} url Content url.\n * @param {string} one First version id\n * @param {string} two Second version id\n * @returns {Object} Get diff action.\n */\nexport function getDiff(url, one, two) {\n  return {\n    type: GET_DIFF,\n    request: [\n      {\n        op: 'get',\n        path: `${url}/@history/${one}`,\n      },\n      {\n        op: 'get',\n        path: `${url}/@history/${two}`,\n      },\n    ],\n  };\n}\n","/**\n * emailNotification actions.\n * @module actions/emailNotification/emailNotification\n */\n\nimport { EMAIL_NOTIFICATION } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Email notification function\n * @function emailNotification\n * @param {string} from User id\n * @param {string} message Old password.\n * @param {string} name New password.\n * @param {string} subject New password.\n * @returns {Object} Edit password action.\n */\nexport function emailNotification(from, message, name, subject) {\n  return {\n    type: EMAIL_NOTIFICATION,\n    request: {\n      op: 'post',\n      path: '/@email-notification',\n      data: {\n        from,\n        message,\n        name,\n        subject,\n      },\n    },\n  };\n}\n","/**\n * emailNotification actions.\n * @module actions/emailNotification/emailNotification\n */\n\nimport { EMAIL_SEND } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Email send function\n * @function emailSend\n * @param {string} name New password.\n * @param {string} from Sender mail address.\n * @param {string} to Receiver mail address.\n * @param {string} subject Email subject.\n * @param {string} message Email message.\n * @returns {Object} Edit emailSend action.\n */\nexport function emailSend(name, from, to, subject, message) {\n  return {\n    type: EMAIL_SEND,\n    request: {\n      op: 'post',\n      path: '/@email-send',\n      data: {\n        name,\n        from,\n        to,\n        subject,\n        message,\n      },\n    },\n  };\n}\n","/**\n * Groups actions.\n * @module actions/groups/groups\n */\n\nimport {\n  CREATE_GROUP,\n  DELETE_GROUP,\n  GET_GROUP,\n  LIST_GROUPS,\n  UPDATE_GROUP,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Create group function.\n * @function createGroup\n * @param {Object} data Group data.\n * @returns {Object} Create group action.\n */\nexport function createGroup(data) {\n  return {\n    type: CREATE_GROUP,\n    request: {\n      op: 'post',\n      path: '/@groups',\n      data,\n    },\n  };\n}\n\n/**\n * Delete group function.\n * @function deleteGroup\n * @param {string} id Group id\n * @returns {Object} Delete group action.\n */\nexport function deleteGroup(id) {\n  return {\n    type: DELETE_GROUP,\n    request: {\n      op: 'del',\n      path: `/@groups/${id}`,\n    },\n  };\n}\n\n/**\n * Get group function\n * @function getGroup\n * @param {string} id Group id\n * @returns {Object} Get group action\n */\nexport function getGroup(id) {\n  return {\n    type: GET_GROUP,\n    request: {\n      op: 'get',\n      path: `/@groups/${id}`,\n    },\n  };\n}\n\n/**\n * List groups function\n * @function listGroups\n * @returns {Object} List groups action\n */\nexport function listGroups(query) {\n  return {\n    type: LIST_GROUPS,\n    request: query\n      ? {\n          op: 'get',\n          path: `/@groups?query=${query}`,\n        }\n      : {\n          op: 'get',\n          path: '/@groups',\n        },\n  };\n}\n\n/**\n * Update group function.\n * @function updateGroup\n * @param {string} id Group id\n * @param {Object} data Group data.\n * @returns {Object} Update group action.\n */\nexport function updateGroup(id, data) {\n  return {\n    type: UPDATE_GROUP,\n    request: {\n      op: 'patch',\n      path: `/@groups/${id}`,\n      data,\n    },\n  };\n}\n","/**\n * History actions.\n * @module actions/history/history\n */\n\nimport {\n  GET_HISTORY,\n  REVERT_HISTORY,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Get history function.\n * @function getHistory\n * @param {string} url Content url.\n * @returns {Object} Get history action.\n */\nexport function getHistory(url) {\n  return {\n    type: GET_HISTORY,\n    request: {\n      op: 'get',\n      path: `${url}/@history`,\n    },\n  };\n}\n\n/**\n * Revert history function.\n * @function revertHistory\n * @param {string} url Content url.\n * @param {number} version Revert version.\n * @returns {Object} Revet history action.\n */\nexport function revertHistory(url, version) {\n  return {\n    type: REVERT_HISTORY,\n    request: {\n      op: 'patch',\n      path: `${url}/@history`,\n      data: { version },\n    },\n  };\n}\n","/**\n * Point of contact for action modules.\n * @module actions\n * @example import { getSchema } from 'actions';\n */\nexport { listActions } from '@plone/volto/actions/actions/actions';\nexport { getBreadcrumbs } from '@plone/volto/actions/breadcrumbs/breadcrumbs';\nexport { setExpandedToolbar } from '@plone/volto/actions/toolbar/toolbar';\nexport {\n  copy,\n  cut,\n  copyContent,\n  moveContent,\n} from '@plone/volto/actions/clipboard/clipboard';\nexport {\n  installAddon,\n  listAddons,\n  uninstallAddon,\n  upgradeAddon,\n} from './addons/addons';\nexport {\n  addComment,\n  deleteComment,\n  listComments,\n  listMoreComments,\n  updateComment,\n} from '@plone/volto/actions/comments/comments';\nexport {\n  createContent,\n  deleteContent,\n  updateContent,\n  getContent,\n  orderContent,\n  sortContent,\n  resetContent,\n  updateColumnsContent,\n} from '@plone/volto/actions/content/content';\nexport {\n  getControlpanel,\n  postControlpanel,\n  deleteControlpanel,\n  listControlpanels,\n  updateControlpanel,\n  getSystemInformation,\n  getDatabaseInformation,\n} from '@plone/volto/actions/controlpanels/controlpanels';\nexport { getDiff } from '@plone/volto/actions/diff/diff';\nexport { emailNotification } from '@plone/volto/actions/emailNotification/emailNotification';\nexport { emailSend } from '@plone/volto/actions/emailSend/emailSend';\nexport {\n  createGroup,\n  deleteGroup,\n  getGroup,\n  listGroups,\n  updateGroup,\n} from '@plone/volto/actions/groups/groups';\nexport {\n  getHistory,\n  revertHistory,\n} from '@plone/volto/actions/history/history';\nexport {\n  addMessage,\n  removeMessage,\n  purgeMessages,\n} from '@plone/volto/actions/messages/messages';\nexport { getNavigation } from '@plone/volto/actions/navigation/navigation';\nexport { listRoles } from '@plone/volto/actions/roles/roles';\nexport {\n  getSchema,\n  postSchema,\n  putSchema,\n  updateSchema,\n} from '@plone/volto/actions/schema/schema';\nexport {\n  resetSearchContent,\n  searchContent,\n} from '@plone/volto/actions/search/search';\nexport {\n  updateSharing,\n  getSharing,\n} from '@plone/volto/actions/sharing/sharing';\nexport { getTypes } from '@plone/volto/actions/types/types';\nexport {\n  createUser,\n  deleteUser,\n  getUser,\n  listUsers,\n  setInitialPassword,\n  resetPassword,\n  updatePassword,\n  updateUser,\n  showAllUsers,\n} from '@plone/volto/actions/users/users';\nexport {\n  login,\n  loginRenew,\n  logout,\n} from '@plone/volto/actions/userSession/userSession';\nexport {\n  getVocabulary,\n  getVocabularyTokenTitle,\n} from '@plone/volto/actions/vocabularies/vocabularies';\nexport {\n  getWorkflow,\n  transitionWorkflow,\n} from '@plone/volto/actions/workflow/workflow';\nexport { getQuerystring } from '@plone/volto/actions/querystring/querystring';\nexport { getQueryStringResults } from '@plone/volto/actions/querystringsearch/querystringsearch';\nexport { setSidebarTab } from '@plone/volto/actions/sidebar/sidebar';\nexport {\n  deleteLinkTranslation,\n  getTranslationLocator,\n  linkTranslation,\n} from '@plone/volto/actions/translations/translations';\nexport {\n  setBlocksClipboard,\n  resetBlocksClipboard,\n} from '@plone/volto/actions/blocksClipboard/blocksClipboard';\nexport { loadLazyLibrary } from '@plone/volto/actions/lazyLibraries/lazyLibraries';\nexport { getContextNavigation } from '@plone/volto/actions/contextNavigation/contextNavigation';\nexport * from './asyncConnect/asyncConnect';\n","import { LOAD_LAZY_LIBRARY } from '@plone/volto/constants/ActionTypes';\n\nexport function loadLazyLibrary(libName, libModule) {\n  return {\n    type: LOAD_LAZY_LIBRARY,\n    libName,\n    libModule,\n  };\n}\n","/**\n * Message actions.\n * @module actions/message/message\n */\nimport { v4 as uuid } from 'uuid';\n\nimport {\n  ADD_MESSAGE,\n  REMOVE_MESSAGE,\n  PURGE_MESSAGES,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Add message function\n * @function addMessage\n * @param {string} title Message header\n * @param {string} body Message body.\n * @param {string} level Message level.\n * @returns {Object} Add message action.\n */\nexport function addMessage(title, body, level) {\n  return {\n    type: ADD_MESSAGE,\n    id: uuid(),\n    title,\n    body,\n    level,\n    show: true,\n  };\n}\n\n/**\n * Remove message function\n * @function removeMessage\n * @param {number} index Message index\n * @returns {Object} Add message action.\n */\nexport function removeMessage(index) {\n  return {\n    type: REMOVE_MESSAGE,\n    index,\n  };\n}\n\n/**\n * Purge all messages function\n * @function purgeMessages\n * @returns {Object} Add message action.\n */\nexport function purgeMessages() {\n  return {\n    type: PURGE_MESSAGES,\n  };\n}\n","/**\n * Navigation actions.\n * @module actions/navigation/navigation\n */\n\nimport { GET_NAVIGATION } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Get navigation.\n * @function getNavigation\n * @param {string} url Content url.\n * @param {number} depth Depth of the navigation tree.\n * @returns {Object} Get navigation action.\n */\nexport function getNavigation(url, depth) {\n  // Note: Depth can't be 0 in plone.restapi\n  return {\n    type: GET_NAVIGATION,\n    request: {\n      op: 'get',\n      path: `${url}/@navigation${\n        depth ? `?expand.navigation.depth=${depth}` : ''\n      }`,\n    },\n  };\n}\n","/**\n * Querystring actions.\n * @module actions/querystring/querystring\n */\n\nimport { GET_QUERYSTRING } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Get querystring.\n * @function getQuerystring\n * @returns {Object} Get querystring action.\n */\nexport function getQuerystring() {\n  return {\n    type: GET_QUERYSTRING,\n    request: {\n      op: 'get',\n      path: '/@querystring',\n    },\n  };\n}\n","import { GET_QUERYSTRING_RESULTS } from '@plone/volto/constants/ActionTypes';\nimport config from '@plone/volto/registry';\n\n/**\n * Get querystring results.\n * @function getQueryStringResults\n * @param {Object} data Data.\n * @returns {Object} Get querystringsearch results action.\n */\nexport function getQueryStringResults(path, data, subrequest, page) {\n  const { settings } = config;\n  // fixes https://github.com/plone/volto/issues/1059\n\n  let requestData = JSON.parse(JSON.stringify(data));\n  if (data?.depth != null) {\n    delete requestData.depth;\n    requestData.query.forEach((q) => {\n      if (q.i === 'path') {\n        q.v += '::' + data.depth;\n      }\n    });\n  }\n\n  return {\n    type: GET_QUERYSTRING_RESULTS,\n    subrequest,\n    request: {\n      op: 'post',\n      path: `${path}/@querystring-search`,\n      data: {\n        ...requestData,\n        ...(!requestData.b_size && {\n          b_size: settings.defaultPageSize,\n        }),\n        ...(page && {\n          b_start: requestData.b_size\n            ? data.b_size * (page - 1)\n            : settings.defaultPageSize * (page - 1),\n        }),\n        query: requestData?.query,\n      },\n    },\n  };\n}\n","/**\n * Roles actions.\n * @module actions/roles/roles\n */\n\nimport { LIST_ROLES } from '@plone/volto/constants/ActionTypes';\n\n/**\n * List roles.\n * @function listRoles\n * @returns {Object} List roles action.\n */\nexport function listRoles() {\n  return {\n    type: LIST_ROLES,\n    request: {\n      op: 'get',\n      path: '/@roles',\n    },\n  };\n}\n","/**\n * Schema actions.\n * @module actions/schema/schema\n */\n\nimport {\n  GET_SCHEMA,\n  POST_SCHEMA,\n  PUT_SCHEMA,\n  UPDATE_SCHEMA,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Get schema function.\n * @function getSchema\n * @param {string} type Content type.\n * @returns {Object} Get schema action.\n */\nexport function getSchema(type) {\n  return {\n    type: GET_SCHEMA,\n    request: {\n      op: 'get',\n      path: `/@types/${type}`,\n    },\n  };\n}\n\n/**\n * Post schema function.\n * @function postSchema\n * @param {string} type Content type.\n * @param {Object} data Schema data.\n * @returns {Object} Post schema action.\n */\nexport function postSchema(type, data) {\n  return {\n    type: POST_SCHEMA,\n    request: {\n      op: 'post',\n      path: `/@types/${type}`,\n      data,\n    },\n  };\n}\n\n/**\n * Put schema function.\n * @function putSchema\n * @param {string} type Content type.\n * @param {Object} data Schema data.\n * @returns {Object} Put schema action.\n */\nexport function putSchema(type, data) {\n  return {\n    type: PUT_SCHEMA,\n    request: {\n      op: 'put',\n      path: `/@types/${type}`,\n      data,\n    },\n  };\n}\n\n/**\n * Update schema function.\n * @function updateSchema\n * @param {string} type Content type.\n * @param {Object} data Schema data.\n * @returns {Object} Update schema action.\n */\nexport function updateSchema(type, data) {\n  return {\n    type: UPDATE_SCHEMA,\n    request: {\n      op: 'patch',\n      path: `/@types/${type}`,\n      data,\n    },\n  };\n}\n","/**\n * Search actions.\n * @module actions/search/search\n */\n\nimport {\n  compact,\n  concat,\n  isArray,\n  join,\n  map,\n  pickBy,\n  toPairs,\n  identity,\n} from 'lodash';\n\nimport {\n  RESET_SEARCH_CONTENT,\n  SEARCH_CONTENT,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Search content function.\n * @function searchContent\n * @param {string} url Url to use as base.\n * @param {Object} options Search options.\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Search content action.\n */\nexport function searchContent(url, options, subrequest = null) {\n  let queryArray = [];\n  options = pickBy(options, identity);\n  const arrayOptions = pickBy(options, (item) => isArray(item));\n\n  queryArray = concat(\n    queryArray,\n    options\n      ? join(\n          map(toPairs(pickBy(options, (item) => !isArray(item))), (item) => {\n            if (item[0] === 'SearchableText') {\n              // Adds the wildcard to the SearchableText param\n              item[1] = `${item[1]}*`;\n            }\n            return join(item, '=');\n          }),\n          '&',\n        )\n      : '',\n  );\n\n  queryArray = concat(\n    queryArray,\n    arrayOptions\n      ? join(\n          map(pickBy(arrayOptions), (item, key) =>\n            join(\n              item.map((value) => `${key}:list=${value}`),\n              '&',\n            ),\n          ),\n          '&',\n        )\n      : '',\n  );\n\n  const querystring = join(compact(queryArray), '&');\n\n  return {\n    type: SEARCH_CONTENT,\n    subrequest,\n    request: {\n      op: 'get',\n      path: `${url}/@search${querystring ? `?${querystring}` : ''}`,\n    },\n  };\n}\n\n/**\n * Reset search content function.\n * @function resetSearchContent\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Search content action.\n */\nexport function resetSearchContent(subrequest = null) {\n  return {\n    type: RESET_SEARCH_CONTENT,\n    subrequest,\n  };\n}\n","/**\n * Sharing actions.\n * @module actions/sharing/sharing\n */\n\nimport {\n  UPDATE_SHARING,\n  GET_SHARING,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Update sharing function.\n * @function updateSharing\n * @param {string} url Content url.\n * @param {Object} sharing Sharing data.\n * @returns {Object} Update sharing action.\n */\nexport function updateSharing(url, sharing) {\n  return {\n    type: UPDATE_SHARING,\n    request: {\n      op: 'post',\n      path: `${url}/@sharing`,\n      data: sharing,\n    },\n  };\n}\n\n/**\n * Get sharing function.\n * @function getSharing\n * @param {string} url Content url.\n * @param {string} search Search value.\n * @returns {Object} Get sharing action.\n */\nexport function getSharing(url, search = '') {\n  return {\n    type: GET_SHARING,\n    request: {\n      op: 'get',\n      path: `${url}/@sharing${search !== '' ? `?search=${search}` : ''}`,\n    },\n  };\n}\n","/**\n * Sidebar actions.\n * @module actions/sidebar/sidebar\n */\n\nimport { SET_SIDEBAR_TAB } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Set sidebar tab function.\n * @function setSidebarTab\n * @param {Number} index New tab index.\n * @returns {Object} Set sidebar action.\n */\nexport function setSidebarTab(index) {\n  return {\n    type: SET_SIDEBAR_TAB,\n    index,\n  };\n}\n","import { EXPAND_TOOLBAR } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Set sidebar tab function.\n * @function setExpandedToolbar\n * @param {Number} index New tab index.\n * @returns {Object} Set sidebar action.\n */\nexport function setExpandedToolbar(isExpanded) {\n  return {\n    type: EXPAND_TOOLBAR,\n    isExpanded,\n  };\n}\n","/**\n * translations actions.\n * @module actions/translations/translations\n */\n\nimport {\n  DELETE_TRANSLATION,\n  GET_TRANSLATION_LOCATOR,\n  LINK_TRANSLATION,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Get translations function.\n * @function getTranslationLocator\n * @param {string} url URL type.\n * @returns {Object} Get translations action.\n */\nexport function getTranslationLocator(url, lang) {\n  return {\n    type: GET_TRANSLATION_LOCATOR,\n    request: {\n      op: 'get',\n      path: `${url}/@translation-locator?target_language=${lang}`,\n    },\n  };\n}\n\n/**\n * Link translations function.\n * @function linkTranslation\n * @param {string} url URL type origin object to be linked to.\n * @param {string} target URL type (absolute, relative or UUID).\n * @returns {Object} Get translations action.\n */\nexport function linkTranslation(url, target) {\n  return {\n    type: LINK_TRANSLATION,\n    request: {\n      op: 'post',\n      path: `${url}/@translations`,\n      data: {\n        id: target,\n      },\n    },\n  };\n}\n\n/**\n * Delete link translations function.\n * @function linkTranslation\n * @param {string} url URL type origin object to be linked to.\n * @param {string} lang short language code of the translation to be deleted.\n * @returns {Object} Get translations action.\n */\nexport function deleteLinkTranslation(url, lang) {\n  return {\n    type: DELETE_TRANSLATION,\n    request: {\n      op: 'del',\n      path: `${url}/@translations`,\n      data: {\n        language: lang,\n      },\n    },\n  };\n}\n","/**\n * Types actions.\n * @module actions/types/types\n */\n\nimport { GET_TYPES } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Get types function.\n * @function getTypes\n * @param {string} url Content url.\n * @returns {Object} Get types action.\n */\nexport function getTypes(url) {\n  return (dispatch, getState) => {\n    if (getState().userSession.token) {\n      dispatch({\n        type: GET_TYPES,\n        request: {\n          op: 'get',\n          path: `${url}/@types`,\n        },\n      });\n    }\n  };\n}\n","/**\n * Search actions.\n * @module actions/search/search\n */\n\nimport { LOGIN, LOGIN_RENEW, LOGOUT } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Login function.\n * @function login\n * @param {string} username Username.\n * @param {string} password Password.\n * @returns {Object} Login action.\n */\nexport function login(username, password) {\n  return {\n    type: LOGIN,\n    request: {\n      op: 'post',\n      path: '@login',\n      data: { login: username, password },\n    },\n  };\n}\n\n/**\n * Login renew function.\n * @function loginRenew\n * @returns {Object} Login renew action.\n */\nexport function loginRenew() {\n  return {\n    type: LOGIN_RENEW,\n    request: {\n      op: 'post',\n      path: '@login-renew',\n    },\n  };\n}\n\n/**\n * Logout function.\n * @function logout\n * @returns {Object} Logout action.\n */\nexport function logout() {\n  return {\n    type: LOGOUT,\n  };\n}\n","/**\n * Users actions.\n * @module actions/users/users\n */\n\nimport {\n  CREATE_USER,\n  DELETE_USER,\n  GET_USER,\n  LIST_USERS,\n  UPDATE_USER,\n  UPDATE_PASSWORD,\n  INITIAL_PASSWORD,\n  RESET_PASSWORD,\n  Show_All_USERS,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Create user function.\n * @function createUser\n * @param {Object|Array} content User data.\n * @returns {Object} Create user action.\n */\nexport function createUser(content) {\n  return {\n    type: CREATE_USER,\n    request: {\n      op: 'post',\n      path: '/@users',\n      data: content,\n    },\n  };\n}\n\n/**\n * Delete user function.\n * @function deleteUser\n * @param {string} id User id\n * @returns {Object} Delete user action.\n */\nexport function deleteUser(id) {\n  return {\n    type: DELETE_USER,\n    request: {\n      op: 'del',\n      path: `/@users/${id}`,\n    },\n  };\n}\n\n/**\n * Get user function\n * @function getUser\n * @param {string} id User id\n * @returns {Object} Get user action\n */\nexport function getUser(id) {\n  return {\n    type: GET_USER,\n    request: {\n      op: 'get',\n      path: `/@users/${id}`,\n    },\n  };\n}\n\n/**\n * List users function\n * @function listUsers\n * @param {string} query Query\n * @returns {Object} List users action\n */\nexport function listUsers(query) {\n  return {\n    type: LIST_USERS,\n    request: query\n      ? { op: 'get', path: `/@users?query=${query}` }\n      : { op: 'get', path: '/@users' },\n  };\n}\n\n/**\n * Show All users function\n * @function showAllUsers\n * @returns boolean\n */\nexport function showAllUsers() {\n  return {\n    type: Show_All_USERS,\n  };\n}\n\n/**\n * Update user function\n * @function updateUser\n * @param {string} id User id\n * @param {Object} user User data.\n * @returns {Object} Update user action.\n */\nexport function updateUser(id, user) {\n  return {\n    type: UPDATE_USER,\n    request: { op: 'patch', path: `/@users/${id}`, data: user },\n  };\n}\n\n/**\n * Update password function\n * @function updatePassword\n * @param {string} id User id\n * @param {string} oldPassword Old password.\n * @param {string} newPassword New password.\n * @returns {Object} Update password action.\n */\nexport function updatePassword(id, oldPassword, newPassword) {\n  return {\n    type: UPDATE_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        old_password: oldPassword,\n        new_password: newPassword,\n      },\n    },\n  };\n}\n\n/**\n * Set initial password function\n * @function setInitialPassword\n * @param {string} id User id\n * @param {string} token One time user token.\n * @param {string} newPassword New password.\n * @returns {Object} Set initial password action.\n */\nexport function setInitialPassword(id, token, newPassword) {\n  return {\n    type: INITIAL_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        reset_token: token,\n        new_password: newPassword,\n      },\n    },\n  };\n}\n\n/**\n * Reset password function\n * @function resetPassword\n * @param {string} id User id\n * @returns {Object} Reset password action.\n */\nexport function resetPassword(id) {\n  return {\n    type: RESET_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n    },\n  };\n}\n","/**\n * Vocabularies actions.\n * @module actions/vocabularies/vocabularies\n */\n\nimport {\n  GET_VOCABULARY,\n  GET_VOCABULARY_TOKEN_TITLE,\n} from '@plone/volto/constants/ActionTypes';\nimport config from '@plone/volto/registry';\n\n/**\n * Get vocabulary given a URL (coming from a Schema) or from a vocabulary name.\n * @function getVocabulary\n * @param {string} vocabNameOrURL Full API URL of vocabulary or vocabulary name\n * @param {string} query Only include results containing this string.\n * @param {number} start Start of result batch.\n * @returns {Object} Get vocabulary action.\n */\nexport function getVocabulary(vocabNameOrURL, query = null, start = 0) {\n  const { settings } = config;\n  // In case we have a URL, we have to get the vocabulary name\n  const vocabulary =\n    vocabNameOrURL &&\n    vocabNameOrURL.replace(`${settings.apiPath}/@vocabularies/`, '');\n  let queryString = `b_start=${start}`;\n  if (query) {\n    queryString = `${queryString}&title=${query}`;\n  }\n  return {\n    type: GET_VOCABULARY,\n    vocabulary: vocabNameOrURL,\n    start,\n    request: {\n      op: 'get',\n      path: `/@vocabularies/${vocabulary}?${queryString}`,\n    },\n  };\n}\n\n/**\n * Get the title value given a token from vocabulary given a vocabulary URL\n * (coming from a Schema) or from a vocabulary name.\n * @function getVocabularyTokenTitle\n * @param {string} vocabNameOrURL Full API URL of vocabulary or vocabulary name\n * @param {string} token Only include results containing this string.\n * @returns {Object} Get vocabulary action.\n */\nexport function getVocabularyTokenTitle(vocabNameOrURL, token = null) {\n  const { settings } = config;\n  // In case we have a URL, we have to get the vocabulary name\n  const vocabulary = vocabNameOrURL.replace(\n    `${settings.apiPath}/@vocabularies/`,\n    '',\n  );\n\n  return {\n    type: GET_VOCABULARY_TOKEN_TITLE,\n    vocabulary: vocabNameOrURL,\n    token,\n    request: {\n      op: 'get',\n      path: `/@vocabularies/${vocabulary}?token=${token}`,\n    },\n  };\n}\n","/**\n * Workflow actions.\n * @module actions/workflow/workflow\n */\n\nimport {\n  GET_WORKFLOW,\n  GET_WORKFLOW_MULTIPLE,\n  TRANSITION_WORKFLOW,\n} from '@plone/volto/constants/ActionTypes';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\n/**\n * Get workflow function.\n * @function getWorkflow\n * @param {string|Array} urls Workflow url(s).\n * @returns {Object} Get workflow action.\n */\nexport function getWorkflow(urls) {\n  return {\n    type: typeof urls === 'string' ? GET_WORKFLOW : GET_WORKFLOW_MULTIPLE,\n    request:\n      typeof urls === 'string'\n        ? { op: 'get', path: `${urls}/@workflow` }\n        : urls.map((url) => ({ op: 'get', path: `${url}/@workflow` })),\n  };\n}\n\n/**\n * Transition workflow.\n * @function transitionWorkflow\n * @param {string} urls Content url(s).\n * @param {bool} include_children Include children.\n * @returns {Object} Transition workflow action.\n */\nexport function transitionWorkflow(urls, include_children = false) {\n  return {\n    type: TRANSITION_WORKFLOW,\n    request:\n      typeof urls === 'string'\n        ? {\n            op: 'post',\n            path: flattenToAppURL(urls),\n            data: { include_children },\n          }\n        : urls.map((url) => ({\n            op: 'post',\n            path: flattenToAppURL(url),\n            data: { include_children },\n          })),\n  };\n}\n","/**\n * Point of contact for component modules. This file is quite sensitive regarding the\n * order in which it's loaded. e.g. if the component depends on others to work, it\n * should ideally be loaded after them. If you start seeing imported components as\n * undefined, check the order of imports in this file.\n * @module components\n */\nimport loadable from '@loadable/component';\n\n//  Do not lazy load them, since it has not much sense (they will live in the main chunk)\n// The App and View component are deliberatelly left out of this index.js file!\n// They should be used by Volto and only by Volto internally\nexport AppExtras from '@plone/volto/components/theme/AppExtras/AppExtras';\nexport Header from '@plone/volto/components/theme/Header/Header';\nexport Logo from '@plone/volto/components/theme/Logo/Logo';\nexport Anontools from '@plone/volto/components/theme/Anontools/Anontools';\nexport Navigation from '@plone/volto/components/theme/Navigation/Navigation';\nexport Breadcrumbs from '@plone/volto/components/theme/Breadcrumbs/Breadcrumbs';\nexport SearchWidget from '@plone/volto/components/theme/SearchWidget/SearchWidget';\nexport Footer from '@plone/volto/components/theme/Footer/Footer';\nexport Title from '@plone/volto/components/theme/Title/Title';\nexport DefaultView from '@plone/volto/components/theme/View/DefaultView';\nexport Pagination from '@plone/volto/components/theme/Pagination/Pagination';\nexport Tags from '@plone/volto/components/theme/Tags/Tags';\nexport OutdatedBrowser from '@plone/volto/components/theme/OutdatedBrowser/OutdatedBrowser';\nexport LanguageSelector from '@plone/volto/components/theme/LanguageSelector/LanguageSelector';\nexport RenderBlocks from '@plone/volto/components/theme/View/RenderBlocks';\nexport SkipLinks from '@plone/volto/components/theme/SkipLinks/SkipLinks';\n\nexport Error from '@plone/volto/components/theme/Error/Error';\nexport NotFound from '@plone/volto/components/theme/NotFound/NotFound';\nexport Forbidden from '@plone/volto/components/theme/Forbidden/Forbidden';\nexport Unauthorized from '@plone/volto/components/theme/Unauthorized/Unauthorized';\n\nexport Avatar from '@plone/volto/components/theme/Avatar/Avatar';\nexport Icon from '@plone/volto/components/theme/Icon/Icon';\nexport ConditionalLink from '@plone/volto/components/manage/ConditionalLink/ConditionalLink';\nexport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\n\n// Lazy load them, since we want them and its deps to be in its own chunk\nexport ContactForm from '@plone/volto/components/theme/ContactForm/ContactForm';\nexport Login from '@plone/volto/components/theme/Login/Login';\nexport Logout from '@plone/volto/components/theme/Logout/Logout';\nexport Sitemap from '@plone/volto/components/theme/Sitemap/Sitemap';\nexport Search from '@plone/volto/components/theme/Search/Search';\nexport Comments from '@plone/volto/components/theme/Comments/Comments';\nexport SocialSharing from '@plone/volto/components/theme/SocialSharing/SocialSharing';\nexport Register from '@plone/volto/components/theme/Register/Register';\nexport PasswordReset from '@plone/volto/components/theme/PasswordReset/PasswordReset';\nexport RequestPasswordReset from '@plone/volto/components/theme/PasswordReset/RequestPasswordReset';\nexport ChangePassword from '@plone/volto/components/manage/Preferences/ChangePassword';\nexport PersonalPreferences from '@plone/volto/components/manage/Preferences/PersonalPreferences';\nexport PersonalInformation from '@plone/volto/components/manage/Preferences/PersonalInformation';\nexport CreateTranslation from '@plone/volto/components/manage/Multilingual/CreateTranslation';\n\nexport FileView from '@plone/volto/components/theme/View/FileView';\nexport ImageView from '@plone/volto/components/theme/View/ImageView';\nexport NewsItemView from '@plone/volto/components/theme/View/NewsItemView';\n\nexport const EventView = loadable(() =>\n  import('@plone/volto/components/theme/View/EventView'),\n);\n\nexport ListingView from '@plone/volto/components/theme/View/ListingView';\nexport SummaryView from '@plone/volto/components/theme/View/SummaryView';\nexport TabularView from '@plone/volto/components/theme/View/TabularView';\nexport AlbumView from '@plone/volto/components/theme/View/AlbumView';\n\nexport Actions from '@plone/volto/components/manage/Actions/Actions';\nexport Add from '@plone/volto/components/manage/Add/Add';\nexport AddonsControlpanel from '@plone/volto/components/manage/Controlpanels/AddonsControlpanel';\nexport Contents from '@plone/volto/components/manage/Contents/Contents';\nexport Circle from '@plone/volto/components/manage/Contents/circle';\nexport DatabaseInformation from '@plone/volto/components/manage/Controlpanels/DatabaseInformation';\nexport Controlpanel from '@plone/volto/components/manage/Controlpanels/Controlpanel';\nexport Controlpanels from '@plone/volto/components/manage/Controlpanels/Controlpanels';\nexport ContentTypes from '@plone/volto/components/manage/Controlpanels/ContentTypes';\nexport ContentType from '@plone/volto/components/manage/Controlpanels/ContentType';\nexport ContentTypeLayout from '@plone/volto/components/manage/Controlpanels/ContentTypeLayout';\nexport ContentTypeSchema from '@plone/volto/components/manage/Controlpanels/ContentTypeSchema';\nexport ContentTypesActions from '@plone/volto/components/manage/Controlpanels/ContentTypesActions';\nexport UsersControlpanel from '@plone/volto/components/manage/Controlpanels/UsersControlpanel';\nexport ModerateComments from '@plone/volto/components/manage/Controlpanels/ModerateComments';\nexport VersionOverview from '@plone/volto/components/manage/Controlpanels/VersionOverview';\nexport Delete from '@plone/volto/components/manage/Delete/Delete';\nexport Diff from '@plone/volto/components/manage/Diff/Diff';\nexport Display from '@plone/volto/components/manage/Display/Display';\nexport Edit from '@plone/volto/components/manage/Edit/Edit';\nexport ModalForm from '@plone/volto/components/manage/Form/ModalForm';\nexport History from '@plone/volto/components/manage/History/History';\nexport Sharing from '@plone/volto/components/manage/Sharing/Sharing';\nexport Workflow from '@plone/volto/components/manage/Workflow/Workflow';\nexport Messages from '@plone/volto/components/manage/Messages/Messages';\nexport BlockChooser from '@plone/volto/components/manage/BlockChooser/BlockChooser';\nexport Toolbar from '@plone/volto/components/manage/Toolbar/Toolbar';\nexport Sidebar from '@plone/volto/components/manage/Sidebar/Sidebar';\nexport SidebarPopup from '@plone/volto/components/manage/Sidebar/SidebarPopup';\nexport SidebarPortal from '@plone/volto/components/manage/Sidebar/SidebarPortal';\nexport PersonalTools from '@plone/volto/components/manage/Toolbar/PersonalTools';\nexport More from '@plone/volto/components/manage/Toolbar/More';\nexport Types from '@plone/volto/components/manage/Toolbar/Types';\nexport Toast from '@plone/volto/components/manage/Toast/Toast';\nexport ManageTranslations from '@plone/volto/components/manage/Multilingual/ManageTranslations';\n\n// Potentially could ve removed from index, since they are internal components and\n// we don't want them to end up in the main chunk\nexport Form from '@plone/volto/components/manage/Form/Form';\nexport BlocksToolbar from '@plone/volto/components/manage/Form/BlocksToolbar';\nexport Field from '@plone/volto/components/manage/Form/Field';\nexport SearchTags from '@plone/volto/components/theme/Search/SearchTags';\nexport CommentEditModal from '@plone/volto/components/theme/Comments/CommentEditModal';\nexport ContentsIndexHeader from '@plone/volto/components/manage/Contents/ContentsIndexHeader';\nexport ContentsItem from '@plone/volto/components/manage/Contents/ContentsItem';\nexport ContentsUploadModal from '@plone/volto/components/manage/Contents/ContentsUploadModal';\nexport ContentsPropertiesModal from '@plone/volto/components/manage/Contents/ContentsPropertiesModal';\nexport ContentsRenameModal from '@plone/volto/components/manage/Contents/ContentsRenameModal';\nexport ContentsWorkflowModal from '@plone/volto/components/manage/Contents/ContentsWorkflowModal';\nexport ContentsTagsModal from '@plone/volto/components/manage/Contents/ContentsTagsModal';\nexport UsersControlpanelUser from '@plone/volto/components/manage/Controlpanels/UsersControlpanelUser';\nexport UsersControlpanelGroups from '@plone/volto/components/manage/Controlpanels/UsersControlpanelGroups';\nexport DiffField from '@plone/volto/components/manage/Diff/DiffField';\nexport DragDropList from '@plone/volto/components/manage/DragDropList/DragDropList';\nexport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nexport BlocksForm from '@plone/volto/components/manage/Blocks/Block/BlocksForm';\nexport BlockDataForm from '@plone/volto/components/manage/Form/BlockDataForm';\n\nexport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\nexport ArrayWidget from '@plone/volto/components/manage/Widgets/ArrayWidget';\nexport CheckboxWidget from '@plone/volto/components/manage/Widgets/CheckboxWidget';\n\nexport const DatetimeWidget = loadable(() =>\n  import('@plone/volto/components/manage/Widgets/DatetimeWidget'),\n);\nexport const RecurrenceWidget = loadable(() =>\n  import(\n    '@plone/volto/components/manage/Widgets/RecurrenceWidget/RecurrenceWidget'\n  ),\n);\n\nexport FileWidget from '@plone/volto/components/manage/Widgets/FileWidget';\nexport PasswordWidget from '@plone/volto/components/manage/Widgets/PasswordWidget';\nexport ReferenceWidget from '@plone/volto/components/manage/Widgets/ReferenceWidget';\nexport SchemaWidget from '@plone/volto/components/manage/Widgets/SchemaWidget';\nexport SchemaWidgetFieldset from '@plone/volto/components/manage/Widgets/SchemaWidgetFieldset';\nexport SelectWidget from '@plone/volto/components/manage/Widgets/SelectWidget';\nexport TextareaWidget from '@plone/volto/components/manage/Widgets/TextareaWidget';\nexport TextWidget from '@plone/volto/components/manage/Widgets/TextWidget';\nexport WysiwygWidget from '@plone/volto/components/manage/Widgets/WysiwygWidget';\nexport ObjectBrowserWidget from '@plone/volto/components/manage/Widgets/ObjectBrowserWidget';\nexport ObjectBrowserWidgetMode from '@plone/volto/components/manage/Widgets/ObjectBrowserWidget';\nexport ObjectWidget from '@plone/volto/components/manage/Widgets/ObjectWidget';\nexport ObjectListWidget from '@plone/volto/components/manage/Widgets/ObjectListWidget';\n\nexport EditDescriptionBlock from '@plone/volto/components/manage/Blocks/Description/Edit';\nexport EditTitleBlock from '@plone/volto/components/manage/Blocks/Title/Edit';\nexport EditToCBlock from '@plone/volto/components/manage/Blocks/ToC/Edit';\nexport EditTextBlock from '@plone/volto/components/manage/Blocks/Text/Edit';\nexport EditImageBlock from '@plone/volto/components/manage/Blocks/Image/Edit';\nexport EditListingBlock from '@plone/volto/components/manage/Blocks/Listing/Edit';\nexport EditVideoBlock from '@plone/volto/components/manage/Blocks/Video/Edit';\nexport EditBlock from '@plone/volto/components/manage/Blocks/Block/Edit';\nexport EditHeroImageLeftBlock from '@plone/volto/components/manage/Blocks/HeroImageLeft/Edit';\nexport ViewHeroImageLeftBlock from '@plone/volto/components/manage/Blocks/HeroImageLeft/View';\nexport EditMapBlock from '@plone/volto/components/manage/Blocks/Maps/Edit';\nexport EditHTMLBlock from '@plone/volto/components/manage/Blocks/HTML/Edit';\n\nexport ViewDescriptionBlock from '@plone/volto/components/manage/Blocks/Description/View';\nexport ViewTitleBlock from '@plone/volto/components/manage/Blocks/Title/View';\nexport ViewToCBlock from '@plone/volto/components/manage/Blocks/ToC/View';\nexport ViewTextBlock from '@plone/volto/components/manage/Blocks/Text/View';\nexport ViewImageBlock from '@plone/volto/components/manage/Blocks/Image/View';\nexport ViewListingBlock from '@plone/volto/components/manage/Blocks/Listing/View';\nexport ViewVideoBlock from '@plone/volto/components/manage/Blocks/Video/View';\nexport ViewMapBlock from '@plone/volto/components/manage/Blocks/Maps/View';\nexport ViewHTMLBlock from '@plone/volto/components/manage/Blocks/HTML/View';\n\nexport ListingBlockBody from '@plone/volto/components/manage/Blocks/Listing/ListingBody';\nexport ListingBlockData from '@plone/volto/components/manage/Blocks/Listing/ListingData';\nexport ListingBlockStyle from '@plone/volto/components/manage/Blocks/Listing/ListingStyle';\nexport ListingBlockMore from '@plone/volto/components/manage/Blocks/Listing/ListingMore';\nexport ListingBlockSidebar from '@plone/volto/components/manage/Blocks/Listing/ListingSidebar';\nexport QuerystringWidget from '@plone/volto/components/manage/Blocks/Listing/QuerystringWidget';\n\nexport ImageSidebar from '@plone/volto/components/manage/Blocks/Image/ImageSidebar';\nexport MapsSidebar from '@plone/volto/components/manage/Blocks/Maps/MapsSidebar';\nexport VideoSidebar from '@plone/volto/components/manage/Blocks/Video/VideoSidebar';\nexport LeadImageSidebar from '@plone/volto/components/manage/Blocks/LeadImage/LeadImageSidebar';\n\nexport Style from '@plone/volto/components/manage/Blocks/Block/Style';\nexport BlockSettingsSidebar from '@plone/volto/components/manage/Blocks/Block/Settings';\nexport BlockSettingsSchema from '@plone/volto/components/manage/Blocks/Block/Schema';\nexport TextSettingsSchema from '@plone/volto/components/manage/Blocks/Text/Schema';\nexport ImageSettingsSchema from '@plone/volto/components/manage/Blocks/Image/Schema';\nexport ToCSettingsSchema from '@plone/volto/components/manage/Blocks/ToC/Schema';\n\nexport MaybeWrap from '@plone/volto/components/manage/MaybeWrap/MaybeWrap';\n\nexport App from '@plone/volto/components/theme/App/App';\n","/**\n * Actions component.\n * @module components/manage/Actions/Actions\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { cut, copy, copyContent, moveContent } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { ContentsRenameModal, Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  cut: {\n    id: 'Cut',\n    defaultMessage: 'Cut',\n  },\n  copy: {\n    id: 'Copy',\n    defaultMessage: 'Copy',\n  },\n  paste: {\n    id: 'Paste',\n    defaultMessage: 'Paste',\n  },\n  rename: {\n    id: 'Rename',\n    defaultMessage: 'Rename',\n  },\n  messageCopied: {\n    id: '{title} copied.',\n    defaultMessage: '{title} copied.',\n  },\n  messageCut: {\n    id: '{title} cut.',\n    defaultMessage: '{title} cut.',\n  },\n  messageDeleted: {\n    id: '{title} has been deleted.',\n    defaultMessage: '{title} has been deleted.',\n  },\n  messagePasted: {\n    id: 'Item(s) pasted.',\n    defaultMessage: 'Item(s) pasted.',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * Actions container class.\n * @class Actions\n * @extends Component\n */\nclass Actions extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    action: PropTypes.string,\n    source: PropTypes.arrayOf(PropTypes.string),\n    cut: PropTypes.func.isRequired,\n    copy: PropTypes.func.isRequired,\n    copyContent: PropTypes.func.isRequired,\n    moveContent: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    action: null,\n    actions: null,\n    source: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.cut = this.cut.bind(this);\n    this.copy = this.copy.bind(this);\n    this.paste = this.paste.bind(this);\n    this.rename = this.rename.bind(this);\n    this.onRenameOk = this.onRenameOk.bind(this);\n    this.onRenameCancel = this.onRenameCancel.bind(this);\n    this.state = {\n      showRename: false,\n    };\n  }\n\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n  onRenameOk() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * On rename cancel\n   * @method onRenameCancel\n   * @returns {undefined}\n   */\n  onRenameCancel() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * Cut handler\n   * @method cut\n   * @returns {undefined}\n   */\n  cut() {\n    this.props.cut([getBaseUrl(this.props.pathname)]);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCut, {\n          title: this.props.title,\n        })}\n      />,\n    );\n  }\n\n  /**\n   * Copy handler\n   * @method copy\n   * @returns {undefined}\n   */\n  copy() {\n    this.props.copy([getBaseUrl(this.props.pathname)]);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCopied, {\n          title: this.props.title,\n        })}\n      />,\n    );\n  }\n\n  /**\n   * Paste handler\n   * @method paste\n   * @returns {undefined}\n   */\n  paste() {\n    if (this.props.action === 'copy') {\n      this.props.copyContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    if (this.props.action === 'cut') {\n      this.props.moveContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messagePasted)}\n      />,\n    );\n  }\n\n  /**\n   * Rename handler\n   * @method rename\n   * @returns {undefined}\n   */\n  rename() {\n    this.setState({\n      showRename: true,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Dropdown\n        item\n        id=\"toolbar-actions\"\n        trigger={\n          <span>\n            <Icon name=\"lightning\" size=\"big\" />{' '}\n            <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n          </span>\n        }\n      >\n        <Dropdown.Menu>\n          {this.props.actions.object_buttons &&\n            this.props.actions.object_buttons.map((item) => {\n              switch (item.id) {\n                case 'cut':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"cut\"\n                      text={item.title}\n                      onClick={this.cut}\n                    />\n                  );\n                case 'copy':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"copy\"\n                      text={item.title}\n                      onClick={this.copy}\n                    />\n                  );\n                case 'paste':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"paste\"\n                      text={item.title}\n                      onClick={this.paste}\n                      disabled={this.props.action === null}\n                    />\n                  );\n                case 'delete':\n                  return (\n                    <Link\n                      key={item.id}\n                      to={`${this.props.pathname}/delete`}\n                      className=\"item\"\n                    >\n                      <Icon name=\"trash\" />\n                      {item.title}\n                    </Link>\n                  );\n                case 'rename':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"text cursor\"\n                      text={item.title}\n                      onClick={this.rename}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })}\n\n          <ContentsRenameModal\n            open={this.state.showRename}\n            onCancel={this.onRenameCancel}\n            onOk={this.onRenameOk}\n            items={[\n              {\n                url: this.props.pathname,\n                title: this.props.title,\n                id: this.props.id,\n              },\n            ]}\n          />\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      actions: state.actions.actions,\n      action: state.clipboard.action,\n      source: state.clipboard.source,\n      id: state.content.data ? state.content.data.id : '',\n      title: state.content.data ? state.content.data.title : '',\n    }),\n    {\n      cut,\n      copy,\n      copyContent,\n      moveContent,\n    },\n  ),\n)(Actions);\n","/**\n * Add container.\n * @module components/manage/Add/Add\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { keys, isEmpty } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Button } from 'semantic-ui-react';\nimport { Portal } from 'react-portal';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { v4 as uuid } from 'uuid';\nimport qs from 'query-string';\nimport { toast } from 'react-toastify';\n\nimport { createContent, getSchema } from '@plone/volto/actions';\nimport { Form, Icon, Toolbar, Sidebar, Toast } from '@plone/volto/components';\nimport {\n  getBaseUrl,\n  hasBlocksData,\n  flattenToAppURL,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { preloadLazyLibs } from '@plone/volto/helpers/Loadable';\n\nimport config from '@plone/volto/registry';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add {type}',\n    defaultMessage: 'Add {type}',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n});\n\n/**\n * Add class.\n * @class Add\n * @extends Component\n */\nclass Add extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createContent: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    content: PropTypes.shape({\n      // eslint-disable-line react/no-unused-prop-types\n      '@id': PropTypes.string,\n      '@type': PropTypes.string,\n    }),\n    returnUrl: PropTypes.string,\n    createRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    schemaRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    type: PropTypes.string,\n    location: PropTypes.objectOf(PropTypes.any),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: null,\n    content: null,\n    returnUrl: null,\n    type: 'Default',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    if (config.blocks?.initialBlocks[props.type]) {\n      this.initialBlocksLayout = config.blocks.initialBlocks[\n        props.type\n      ].map((item) => uuid());\n      this.initialBlocks = this.initialBlocksLayout.reduce(\n        (acc, value, index) => ({\n          ...acc,\n          [value]: { '@type': config.blocks.initialBlocks[props.type][index] },\n        }),\n        {},\n      );\n    }\n    this.state = {\n      isClient: false,\n      error: null,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.type);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      this.props.createRequest.loading &&\n      nextProps.createRequest.loaded &&\n      nextProps.content['@type'] === this.props.type\n    ) {\n      this.props.history.push(\n        this.props.returnUrl || flattenToAppURL(nextProps.content['@id']),\n      );\n    }\n\n    if (this.props.createRequest.loading && nextProps.createRequest.error) {\n      const message =\n        nextProps.createRequest.error.response?.body?.message ||\n        nextProps.createRequest.error.response?.text;\n\n      const error =\n        new DOMParser().parseFromString(message, 'text/html')?.all[0]\n          ?.textContent || message;\n\n      this.setState({ error: error });\n\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={`${nextProps.createRequest.error.status}:  ${error}`}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.createContent(getBaseUrl(this.props.pathname), {\n      ...data,\n      '@static_behaviors': this.props.schema.definitions\n        ? keys(this.props.schema.definitions)\n        : null,\n      '@type': this.props.type,\n      ...(config.settings.isMultilingual &&\n        this.props.location?.state?.translationOf && {\n          translation_of: this.props.location.state.translationOf,\n          language: this.props.location.state.language,\n        }),\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(getBaseUrl(this.props.pathname));\n  }\n\n  form = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.schemaRequest.loaded) {\n      const visual = hasBlocksData(this.props.schema.properties);\n      const blocksFieldname = getBlocksFieldname(this.props.schema.properties);\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(\n        this.props.schema.properties,\n      );\n\n      // Lookup initialBlocks and initialBlocksLayout within schema\n      const schemaBlocks = this.props.schema.properties[blocksFieldname]\n        ?.default;\n      const schemaBlocksLayout = this.props.schema.properties[\n        blocksLayoutFieldname\n      ]?.default?.items;\n      let initialBlocks = this.initialBlocks;\n      let initialBlocksLayout = this.initialBlocksLayout;\n      if (!isEmpty(schemaBlocksLayout) && !isEmpty(schemaBlocks)) {\n        initialBlocks = {};\n        initialBlocksLayout = [];\n        schemaBlocksLayout.forEach((value) => {\n          if (!isEmpty(schemaBlocks[value])) {\n            let newUid = uuid();\n            initialBlocksLayout.push(newUid);\n            initialBlocks[newUid] = schemaBlocks[value];\n\n            // Layout ID - keep a reference to the original block id within layout\n            initialBlocks[newUid]['@layout'] = value;\n          }\n        });\n      }\n\n      return (\n        <div id=\"page-add\">\n          <Helmet\n            title={this.props.intl.formatMessage(messages.add, {\n              type: this.props.type,\n            })}\n          />\n          <Form\n            ref={this.form}\n            schema={this.props.schema}\n            formData={{\n              ...(blocksFieldname && {\n                [blocksFieldname]:\n                  initialBlocks ||\n                  this.props.schema.properties[blocksFieldname]?.default,\n              }),\n              ...(blocksLayoutFieldname && {\n                [blocksLayoutFieldname]: {\n                  items:\n                    initialBlocksLayout ||\n                    this.props.schema.properties[blocksLayoutFieldname]?.default\n                      ?.items,\n                },\n              }),\n            }}\n            requestError={this.state.error}\n            onSubmit={this.onSubmit}\n            hideActions\n            pathname={this.props.pathname}\n            visual={visual}\n            title={\n              this.props?.schema?.title\n                ? this.props.intl.formatMessage(messages.add, {\n                    type: this.props.schema.title,\n                  })\n                : null\n            }\n            loading={this.props.createRequest.loading}\n          />\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      loading={this.props.createRequest.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button className=\"cancel\" onClick={() => this.onCancel()}>\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        aria-label={this.props.intl.formatMessage(\n                          messages.cancel,\n                        )}\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />\n            </Portal>\n          )}\n          {visual && this.state.isClient && (\n            <Portal node={document.getElementById('sidebar')}>\n              <Sidebar />\n            </Portal>\n          )}\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  DragDropContext(HTML5Backend),\n  injectIntl,\n  connect(\n    (state, props) => ({\n      createRequest: state.content.create,\n      schemaRequest: state.schema,\n      content: state.content.data,\n      schema: state.schema.schema,\n      pathname: props.location.pathname,\n      returnUrl: qs.parse(props.location.search).return_url,\n      type: qs.parse(props.location.search).type,\n    }),\n    { createContent, getSchema },\n  ),\n  preloadLazyLibs('cms'),\n)(Add);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  entityKey: PropTypes.string,\n  getEditorState: PropTypes.func.isRequired,\n  target: PropTypes.string,\n};\n\nconst Link = ({ children, className, entityKey, getEditorState, target }) => {\n  const entity = getEditorState().getCurrentContent().getEntity(entityKey);\n  const entityData = entity ? entity.get('data') : undefined;\n  const href = (entityData && entityData.url) || undefined;\n\n  return (\n    <a\n      className={className}\n      title={href}\n      href={href}\n      target={target}\n      rel=\"noopener noreferrer\"\n    >\n      {children}\n    </a>\n  );\n};\n\nLink.propTypes = propTypes;\nLink.defaultProps = {\n  className: null,\n  entityKey: null,\n  target: null,\n};\nexport default Link;\n","/**\n * Add link form.\n * @module components/manage/AnchorPlugin/components/LinkButton/AddLinkForm\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\n\nimport unionClassNames from 'union-class-names';\nimport {\n  addAppURL,\n  isInternalURL,\n  flattenToAppURL,\n} from '@plone/volto/helpers';\nimport EditorUtils from 'draft-js-plugins-utils';\n\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport { Input, Form, Button } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport URLUtils from '@plone/volto/components/manage/AnchorPlugin/utils/URLUtils';\n\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\n\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport { withRouter } from 'react-router';\n\nimport { Icon } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  placeholder: {\n    id: 'Enter URL or select an item',\n    defaultMessage: 'Enter URL or select an item',\n  },\n});\n\n/**\n * Add link form class.\n * @class AddLinkForm\n * @extends Component\n */\nclass AddLinkForm extends Component {\n  static propTypes = {\n    getEditorState: PropTypes.func.isRequired,\n    setEditorState: PropTypes.func.isRequired,\n    onOverrideContent: PropTypes.func.isRequired,\n    theme: PropTypes.objectOf(PropTypes.any).isRequired,\n    openObjectBrowser: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    placeholder: 'Enter URL or select an item',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs AddLinkForm\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: isInternalURL(props.data.url)\n        ? flattenToAppURL(props.data.url)\n        : props.data.url || '',\n      isInvalid: false,\n    };\n    this.onRef = this.onRef.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.input.focus();\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  handleClickOutside = (e) => {\n    if (\n      this.linkFormContainer.current &&\n      doesNodeContainClick(this.linkFormContainer.current, e)\n    )\n      return;\n    if (this.linkFormContainer.current && this.props.isObjectBrowserOpen)\n      return;\n    this.onClose();\n  };\n\n  /**\n   * Ref handler\n   * @method onRef\n   * @param {Object} node Node\n   * @returns {undefined}\n   */\n  onRef(node) {\n    this.input = node;\n  }\n\n  linkFormContainer = React.createRef();\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {Object} value Value\n   * @returns {undefined}\n   */\n  onChange(value, clear) {\n    let nextState = { value };\n    if (!clear) {\n      if (\n        this.state.isInvalid &&\n        URLUtils.isUrl(URLUtils.normalizeUrl(value))\n      ) {\n        nextState.isInvalid = false;\n      }\n\n      if (isInternalURL(value)) {\n        nextState = { value: flattenToAppURL(value) };\n      }\n    }\n    this.setState(nextState);\n\n    if (clear) {\n      this.props.setEditorState(\n        EditorUtils.removeLinkAtSelection(this.props.getEditorState()),\n      );\n    }\n  }\n\n  /**\n   * Select item handler\n   * @method onSelectItem\n   * @param {string} e event\n   * @param {string} url Url\n   * @returns {undefined}\n   */\n  onSelectItem = (e, url) => {\n    e.preventDefault();\n    this.setState({\n      value: url,\n      isInvalid: false,\n    });\n    this.props.setEditorState(\n      EditorUtils.createLinkAtSelection(\n        this.props.getEditorState(),\n        addAppURL(url),\n      ),\n    );\n  };\n\n  /**\n   * Clear handler\n   * @method clear\n   * @param {Object} value Value\n   * @returns {undefined}\n   */\n  clear() {\n    const nextState = { value: '' };\n    this.setState(nextState);\n\n    this.props.setEditorState(\n      EditorUtils.removeLinkAtSelection(this.props.getEditorState()),\n    );\n  }\n\n  /**\n   * Close handler\n   * @method onClose\n   * @returns {undefined}\n   */\n  onClose = () => this.props.onOverrideContent(undefined);\n\n  /**\n   * Keydown handler\n   * @method onKeyDown\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n  onKeyDown(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmit();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      this.onClose();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @returns {undefined}\n   */\n  onSubmit() {\n    const { getEditorState, setEditorState } = this.props;\n    let { value: url } = this.state;\n\n    if (URLUtils.isMail(URLUtils.normaliseMail(url))) {\n      //Mail\n      url = URLUtils.normaliseMail(url);\n    } else if (URLUtils.isTelephone(url)) {\n      //Phone\n      url = URLUtils.normalizeTelephone(url);\n    } else {\n      //url\n      url = URLUtils.normalizeUrl(url);\n      if (!URLUtils.isUrl(url) && !url.startsWith('/')) {\n        this.setState({ isInvalid: true });\n        return;\n      }\n    }\n\n    const editorStateUrl = isInternalURL(url) ? addAppURL(url) : url;\n\n    setEditorState(\n      EditorUtils.createLinkAtSelection(getEditorState(), editorStateUrl),\n    );\n    this.onClose();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { value, isInvalid } = this.state;\n    const className = isInvalid\n      ? unionClassNames(\n          'ui input editor-link',\n          'input-anchorlink-theme',\n          'input-anchorlink-theme-Invalid',\n        )\n      : unionClassNames('ui input editor-link', 'input-anchorlink-theme');\n\n    return (\n      <div className=\"link-form-container\" ref={this.linkFormContainer}>\n        <div\n          style={{ marginLeft: '5px', display: 'flex', alignItems: 'center' }}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 36 36\"\n            fill=\"#B8B2C8\"\n          >\n            <g fillRule=\"evenodd\">\n              <path d=\"M27.1318,7.333 C24.4028,4.604 19.9618,4.604 17.2328,7.333 L12.9898,11.576 C11.8428,12.723 11.1288,14.248 10.9778,15.871 C10.8228,17.541 11.2708,19.211 12.2378,20.576 C12.4818,20.919 12.7278,21.213 12.9888,21.475 C13.7848,22.271 14.7778,22.868 15.8608,23.202 C16.5498,23.415 17.2548,23.519 17.9518,23.518 C19.7808,23.518 21.5598,22.804 22.8888,21.475 L23.9498,20.414 L22.5358,19 L21.4748,20.061 C20.1648,21.371 18.2388,21.842 16.4498,21.291 C15.6668,21.049 14.9778,20.635 14.4038,20.061 C14.2218,19.879 14.0478,19.668 13.8698,19.418 C13.1778,18.443 12.8588,17.249 12.9688,16.056 C13.0768,14.896 13.5868,13.808 14.4038,12.99 L18.6468,8.747 C20.5958,6.798 23.7688,6.798 25.7178,8.747 C26.6568,9.687 27.1748,10.942 27.1748,12.283 C27.1748,13.623 26.6568,14.878 25.7178,15.818 L27.1318,17.232 C28.4488,15.915 29.1748,14.157 29.1748,12.283 C29.1748,10.408 28.4488,8.65 27.1318,7.333\" />\n              <path d=\"M25.0107,16.5254 C24.2147,15.7294 23.2217,15.1324 22.1387,14.7984 C19.6417,14.0284 16.9477,14.6894 15.1107,16.5254 L14.0507,17.5864 L15.4647,19.0004 L16.5247,17.9394 C17.8357,16.6294 19.7587,16.1554 21.5497,16.7094 C22.3337,16.9514 23.0217,17.3644 23.5957,17.9394 C23.7777,18.1214 23.9527,18.3314 24.1307,18.5824 C24.8217,19.5564 25.1417,20.7514 25.0317,21.9444 C24.9237,23.1034 24.4137,24.1924 23.5957,25.0104 L19.3537,29.2534 C17.4047,31.2024 14.2317,31.2024 12.2817,29.2534 C11.3427,28.3134 10.8247,27.0574 10.8247,25.7174 C10.8247,24.3774 11.3427,23.1214 12.2817,22.1824 L10.8677,20.7684 C9.5507,22.0854 8.8247,23.8424 8.8247,25.7174 C8.8247,27.5924 9.5507,29.3504 10.8677,30.6674 C12.2327,32.0314 14.0257,32.7134 15.8177,32.7134 C17.6107,32.7134 19.4027,32.0314 20.7677,30.6674 L25.0107,26.4244 C26.1567,25.2774 26.8717,23.7524 27.0227,22.1294 C27.1777,20.4594 26.7297,18.7894 25.7617,17.4244 C25.5177,17.0814 25.2717,16.7874 25.0107,16.5254\" />\n            </g>\n          </svg>\n          <Form.Field inline>\n            <div className=\"wrapper\">\n              <Input\n                className={className}\n                id={`field-link`}\n                name=\"link\"\n                value={value || ''}\n                onChange={({ target }) => this.onChange(target.value)}\n                placeholder={this.props.intl.formatMessage(\n                  messages.placeholder,\n                )}\n                onKeyDown={this.onKeyDown}\n                ref={this.onRef}\n              />\n              {value.length > 0 ? (\n                <Button.Group>\n                  <Button\n                    basic\n                    className=\"cancel\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      this.clear();\n                    }}\n                  >\n                    <Icon name={clearSVG} size=\"24px\" />\n                  </Button>\n                </Button.Group>\n              ) : (\n                <Button.Group>\n                  <Button\n                    basic\n                    icon\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      this.props.openObjectBrowser({\n                        mode: 'link',\n                        overlay: true,\n                        onSelectItem: (url) => {\n                          this.onChange(url);\n                          this.onSubmit();\n                        },\n                      });\n                    }}\n                  >\n                    <Icon name={navTreeSVG} size=\"24px\" />\n                  </Button>\n                </Button.Group>\n              )}\n              <Button.Group>\n                <Button\n                  basic\n                  primary\n                  disabled={!value.length > 0}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    this.onSubmit();\n                  }}\n                >\n                  <Icon name={aheadSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n            </div>\n          </Form.Field>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(injectIntl, withRouter, withObjectBrowser)(AddLinkForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport unionClassNames from 'union-class-names';\n//import EditorUtils from 'draft-js-plugins-utils';\nimport EditorUtils from '../../utils/EditorUtils';\nimport AddLinkForm from '@plone/volto/components/manage/AnchorPlugin/components/LinkButton/AddLinkForm';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\n\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\n\n/**\n * Add link form class.\n * @class LinkButton\n * @extends Component\n */\nclass LinkButton extends Component {\n  static propTypes = {\n    placeholder: PropTypes.string,\n    theme: PropTypes.shape({}).isRequired,\n    ownTheme: PropTypes.shape({}).isRequired,\n    onRemoveLinkAtSelection: PropTypes.func.isRequired,\n    onOverrideContent: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    placeholder: '',\n  };\n\n  onMouseDown = (event) => {\n    event.preventDefault();\n  };\n\n  onAddLinkClick = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { ownTheme, placeholder, onOverrideContent } = this.props;\n    const link = EditorUtils.getCurrentEntity(\n      this.props.getEditorState(),\n    )?.getData()?.url;\n\n    const content = (props) => (\n      <AddLinkForm\n        {...props}\n        placeholder={placeholder}\n        theme={ownTheme}\n        block=\"draft-js\"\n        data={{ url: link || '' }}\n        onChangeBlock={() => {}}\n      />\n    );\n    onOverrideContent(content);\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { theme } = this.props;\n    const hasLinkSelected = EditorUtils.hasEntity(\n      this.props.getEditorState(),\n      'LINK',\n    );\n    const className = hasLinkSelected\n      ? unionClassNames(theme.button, theme.active)\n      : theme.button;\n\n    return (\n      <div\n        className={theme.buttonWrapper}\n        onMouseDown={this.onMouseDown}\n        role=\"presentation\"\n      >\n        <button\n          className={className}\n          onClick={\n            this.onAddLinkClick\n            // hasLinkSelected\n            //   ? () =>\n            //       onRemoveLinkAtSelection(\n            //         this.props.setEditorState,\n            //         this.props.getEditorState,\n            //       )\n            //   : this.onAddLinkClick\n          }\n          type=\"button\"\n        >\n          {!hasLinkSelected ? (\n            <Icon name={linkSVG} size=\"24px\" />\n          ) : (\n            <Icon name={unlinkSVG} size=\"24px\" />\n          )}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default LinkButton;\n","import decorateComponentWithProps from 'decorate-component-with-props';\nimport { EditorState, Modifier } from 'draft-js';\n\nimport DefaultLink from './components/Link';\nimport LinkButton from './components/LinkButton';\nimport linkStrategy, { matchesEntityType } from './linkStrategy';\n\nfunction removeEntity(editorState) {\n  const contentState = editorState.getCurrentContent();\n  const selectionState = editorState.getSelection();\n  const startKey = selectionState.getStartKey();\n  const contentBlock = contentState.getBlockForKey(startKey);\n  const startOffset = selectionState.getStartOffset();\n  const entity = contentBlock.getEntityAt(startOffset);\n\n  if (!entity) {\n    return editorState;\n  }\n\n  let entitySelection = null;\n\n  contentBlock.findEntityRanges(\n    (character) => character.getEntity() === entity,\n    (start, end) => {\n      entitySelection = selectionState.merge({\n        anchorOffset: start,\n        focusOffset: end,\n        isBackward: false,\n      });\n    },\n  );\n\n  const newContentState = Modifier.applyEntity(\n    contentState,\n    entitySelection,\n    null,\n  );\n\n  const newEditorState = EditorState.push(\n    editorState,\n    newContentState,\n    'apply-entity',\n  );\n\n  return newEditorState;\n}\n\nexport default (config = {}) => {\n  // ToDo: Get rif of the remainings of having the original CSS modules\n  const defaultTheme = {};\n\n  const { theme = defaultTheme, placeholder, Link, linkTarget } = config;\n\n  return {\n    decorators: [\n      {\n        strategy: linkStrategy,\n        matchesEntityType,\n        component:\n          Link ||\n          decorateComponentWithProps(DefaultLink, {\n            className: 'link-anchorlink-theme',\n            target: linkTarget,\n          }),\n      },\n    ],\n\n    LinkButton: decorateComponentWithProps(LinkButton, {\n      ownTheme: theme,\n      placeholder,\n      onRemoveLinkAtSelection: (setEditorState, getEditorState) =>\n        setEditorState(removeEntity(getEditorState())),\n    }),\n  };\n};\n","export const matchesEntityType = (type) => type === 'LINK';\n\n/**\n *\n *\n * @export strategy\n * @param {*} contentBlock contentBlock\n * @param {*} cb cb\n * @param {*} contentState contentState\n * @returns {*} string\n */\nexport default function strategy(contentBlock, cb, contentState) {\n  if (!contentState) return;\n  contentBlock.findEntityRanges((character) => {\n    const entityKey = character.getEntity();\n    return (\n      entityKey !== null &&\n      matchesEntityType(contentState.getEntity(entityKey).getType())\n    );\n  }, cb);\n}\n","import { RichUtils, EditorState } from 'draft-js';\n\nexport default {\n  createLinkAtSelection(editorState, url) {\n    const contentState = editorState\n      .getCurrentContent()\n      .createEntity('LINK', 'MUTABLE', { url });\n    const entityKey = contentState.getLastCreatedEntityKey();\n    const withLink = RichUtils.toggleLink(\n      editorState,\n      editorState.getSelection(),\n      entityKey,\n    );\n    return EditorState.forceSelection(withLink, editorState.getSelection());\n  },\n\n  removeLinkAtSelection(editorState) {\n    const selection = editorState.getSelection();\n    return RichUtils.toggleLink(editorState, selection, null);\n  },\n\n  getCurrentEntityKey(editorState) {\n    const selection = editorState.getSelection();\n    const anchorKey = selection.getAnchorKey();\n    const contentState = editorState.getCurrentContent();\n    const anchorBlock = contentState.getBlockForKey(anchorKey);\n    const index = selection.isBackward\n      ? selection.focusOffset\n      : selection.anchorOffset;\n\n    return anchorBlock.getEntityAt(index);\n  },\n\n  getCurrentEntity(editorState) {\n    const contentState = editorState.getCurrentContent();\n    const entityKey = this.getCurrentEntityKey(editorState);\n    return entityKey ? contentState.getEntity(entityKey) : null;\n  },\n\n  hasEntity(editorState, entityType) {\n    const entity = this.getCurrentEntity(editorState);\n    return entity && entity.getType() === entityType;\n  },\n};\n","import prependHttp from 'prepend-http';\nimport urlRegex from './urlRegex';\nimport mailRegex from './mailRegex';\nimport telRegex from './telRegex';\n\nexport default {\n  isUrl(text) {\n    return urlRegex().test(text);\n  },\n\n  isMail(text) {\n    return mailRegex().test(text);\n  },\n\n  isTelephone(text) {\n    return telRegex().test(text);\n  },\n\n  normaliseMail(email) {\n    if (email.toLowerCase().startsWith('mailto:')) {\n      return email;\n    }\n    return `mailto:${email}`;\n  },\n\n  normalizeTelephone(tel) {\n    if (tel.toLowerCase().startsWith('tel:')) {\n      return tel;\n    }\n    return `tel:${tel}`;\n  },\n\n  normalizeUrl(url) {\n    return prependHttp(url);\n  },\n};\n","export default () =>\n  /^((mailto:[^<>()/[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i;\n","export default () => /^[tel:]*[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/g;\n","/* eslint-disable  arrow-body-style */\n/* eslint-disable  no-confusing-arrow */\nimport tlds from 'tlds';\n\nconst v4 =\n  '(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?:\\\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){3}';\nconst v6seg = '[0-9a-fA-F]{1,4}';\nconst v6 = `\n(\n(?:${v6seg}:){7}(?:${v6seg}|:)|                                // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                         // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6seg}:){5}(?::${v4}|(:${v6seg}){1,2}|:)|                 // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6seg}:){4}(?:(:${v6seg}){0,1}:${v4}|(:${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6seg}:){3}(?:(:${v6seg}){0,2}:${v4}|(:${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6seg}:){2}(?:(:${v6seg}){0,3}:${v4}|(:${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6seg}:){1}(?:(:${v6seg}){0,4}:${v4}|(:${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::((?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))           // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(%[0-9a-zA-Z]{1,})?                                           // %eth0            %1\n`\n  .replace(/\\s*\\/\\/.*$/gm, '')\n  .replace(/\\n/g, '')\n  .trim();\n\nconst ipRegex = (opts) =>\n  opts && opts.exact\n    ? new RegExp(`(?:^${v4}$)|(?:^${v6}$)`)\n    : new RegExp(`(?:${v4})|(?:${v6})`, 'g');\n\nipRegex.v4 = (opts) =>\n  opts && opts.exact ? new RegExp(`^${v4}$`) : new RegExp(v4, 'g');\nipRegex.v6 = (opts) =>\n  opts && opts.exact ? new RegExp(`^${v6}$`) : new RegExp(v6, 'g');\n\nexport default (_opts) => {\n  const opts = Object.assign({ strict: true }, _opts);\n  const protocol = `(?:(?:[a-z]+:)?//)${opts.strict ? '' : '?'}`;\n  const auth = '(?:\\\\S+(?::\\\\S*)?@)?';\n  const ip = ipRegex.v4().source;\n  const host = '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)';\n  const domain =\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*';\n  const tld = `(?:\\\\.${\n    opts.strict\n      ? '(?:[a-z\\\\u00a1-\\\\uffff]{2,})'\n      : `(?:${tlds.sort((a, b) => b.length - a.length).join('|')})`\n  })\\\\.?`;\n  const port = '(?::\\\\d{2,5})?';\n  const path = '(?:[/?#][^\\\\s\"]*)?';\n  const regex = `(?:${protocol}|www\\\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;\n\n  return opts.exact\n    ? new RegExp(`(?:^${regex}$)`, 'i')\n    : new RegExp(regex, 'ig');\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { filter, map, groupBy, isEmpty } from 'lodash';\nimport { Accordion, Button } from 'semantic-ui-react';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport AnimateHeight from 'react-animate-height';\nimport config from '@plone/volto/registry';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\n\nconst messages = defineMessages({\n  fold: {\n    id: 'Fold',\n    defaultMessage: 'Fold',\n  },\n  unfold: {\n    id: 'Unfold',\n    defaultMessage: 'Unfold',\n  },\n});\n\nconst BlockChooser = ({\n  currentBlock,\n  onInsertBlock,\n  onMutateBlock,\n  allowedBlocks,\n  showRestricted,\n  blocksConfig = config.blocks.blocksConfig,\n  intl,\n}) => {\n  const useAllowedBlocks = !isEmpty(allowedBlocks);\n\n  const filteredBlocksConfig = filter(blocksConfig, (item) => {\n    if (showRestricted) {\n      if (useAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        return true;\n      }\n    } else {\n      if (useAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        return !item.restricted;\n      }\n    }\n  });\n\n  let blocksAvailable = {};\n  const mostUsedBlocks = filter(filteredBlocksConfig, (item) => item.mostUsed);\n  if (mostUsedBlocks) {\n    blocksAvailable.mostUsed = mostUsedBlocks;\n  }\n  const groupedBlocks = groupBy(filteredBlocksConfig, (item) => item.group);\n  blocksAvailable = {\n    ...blocksAvailable,\n    ...groupedBlocks,\n  };\n\n  const groupBlocksOrder = filter(config.blocks.groupBlocksOrder, (item) =>\n    Object.keys(blocksAvailable).includes(item.id),\n  );\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  function handleClick(e, titleProps) {\n    const { index } = titleProps;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    setActiveIndex(newIndex);\n  }\n\n  return (\n    <div className=\"blocks-chooser\">\n      <Accordion fluid styled className=\"form\">\n        {map(groupBlocksOrder, (groupName, index) => (\n          <React.Fragment key={groupName.id}>\n            <Accordion.Title\n              aria-label={\n                activeIndex === index\n                  ? `${intl.formatMessage(messages.fold)} ${\n                      groupName.title\n                    } blocks`\n                  : `${intl.formatMessage(messages.unfold)} ${\n                      groupName.title\n                    } blocks`\n              }\n              active={activeIndex === index}\n              index={index}\n              onClick={handleClick}\n            >\n              {intl.formatMessage({\n                id: groupName.id,\n                defaultMessage: groupName.title,\n              })}\n              <div className=\"accordion-tools\">\n                {activeIndex === 0 ? (\n                  <Icon name={upSVG} size=\"20px\" />\n                ) : (\n                  <Icon name={downSVG} size=\"20px\" />\n                )}\n              </div>\n            </Accordion.Title>\n            <Accordion.Content\n              className={groupName.id}\n              active={activeIndex === index}\n            >\n              <AnimateHeight\n                animateOpacity\n                duration={500}\n                height={activeIndex === index ? 'auto' : 0}\n              >\n                {map(blocksAvailable[groupName.id], (block) => (\n                  <Button.Group key={block.id}>\n                    <Button\n                      icon\n                      basic\n                      className={block.id}\n                      onClick={() =>\n                        onInsertBlock\n                          ? onInsertBlock(currentBlock, { '@type': block.id })\n                          : onMutateBlock(currentBlock, { '@type': block.id })\n                      }\n                    >\n                      <Icon name={block.icon} size=\"36px\" />\n                      {intl.formatMessage({\n                        id: block.id,\n                        defaultMessage: block.title,\n                      })}\n                    </Button>\n                  </Button.Group>\n                ))}\n              </AnimateHeight>\n            </Accordion.Content>\n          </React.Fragment>\n        ))}\n      </Accordion>\n    </div>\n  );\n};\n\nBlockChooser.propTypes = {\n  currentBlock: PropTypes.string.isRequired,\n  onMutateBlock: PropTypes.func.isRequired,\n  onInsertBlock: PropTypes.func.isRequired,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  blocksConfig: PropTypes.objectOf(PropTypes.any),\n};\n\nexport default injectIntl(BlockChooser);\n","import React from 'react';\nimport EditBlock from './Edit';\nimport { DragDropList } from '@plone/volto/components';\nimport { getBlocks } from '@plone/volto/helpers';\nimport {\n  addBlock,\n  insertBlock,\n  changeBlock,\n  deleteBlock,\n  moveBlock,\n  mutateBlock,\n  nextBlockId,\n  previousBlockId,\n} from '@plone/volto/helpers';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport config from '@plone/volto/registry';\n\nconst BlocksForm = (props) => {\n  const {\n    pathname,\n    onChangeField,\n    properties,\n    onChangeFormData,\n    selectedBlock,\n    multiSelected,\n    onSelectBlock,\n    allowedBlocks,\n    showRestricted,\n    title,\n    description,\n    metadata,\n    manage,\n    children,\n    blocksConfig = config.blocks.blocksConfig,\n  } = props;\n\n  const blockList = getBlocks(properties);\n\n  const handleKeyDown = (\n    e,\n    index,\n    block,\n    node,\n    {\n      disableEnter = false,\n      disableArrowUp = false,\n      disableArrowDown = false,\n    } = {},\n  ) => {\n    const isMultipleSelection = e.shiftKey;\n    if (e.key === 'ArrowUp' && !disableArrowUp) {\n      onFocusPreviousBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowDown' && !disableArrowDown) {\n      onFocusNextBlock(block, node, isMultipleSelection);\n      e.preventDefault();\n    }\n    if (e.key === 'Enter' && !disableEnter) {\n      onAddBlock(config.settings.defaultBlockType, index + 1);\n      e.preventDefault();\n    }\n  };\n\n  const onFocusPreviousBlock = (\n    currentBlock,\n    blockNode,\n    isMultipleSelection,\n  ) => {\n    const prev = previousBlockId(properties, currentBlock);\n    if (prev === null) return;\n\n    blockNode.blur();\n\n    onSelectBlock(prev, isMultipleSelection);\n  };\n\n  const onFocusNextBlock = (currentBlock, blockNode, isMultipleSelection) => {\n    const next = nextBlockId(properties, currentBlock);\n    if (next === null) return;\n\n    blockNode.blur();\n\n    onSelectBlock(next, isMultipleSelection);\n  };\n\n  const onMutateBlock = (id, value) => {\n    const newFormData = mutateBlock(properties, id, value);\n    onChangeFormData(newFormData);\n  };\n\n  const onInsertBlock = (id, value) => {\n    const [newId, newFormData] = insertBlock(properties, id, value);\n    onChangeFormData(newFormData);\n    return newId;\n  };\n\n  const onAddBlock = (type, index) => {\n    const [id, newFormData] = addBlock(properties, type, index);\n    onChangeFormData(newFormData);\n    return id;\n  };\n\n  const onChangeBlock = (id, value) => {\n    const newFormData = changeBlock(properties, id, value);\n    onChangeFormData(newFormData);\n  };\n\n  const onDeleteBlock = (id, selectPrev) => {\n    const previous = previousBlockId(properties, id);\n\n    const newFormData = deleteBlock(properties, id);\n    onChangeFormData(newFormData);\n\n    onSelectBlock(selectPrev ? previous : null);\n  };\n\n  const onMoveBlock = (dragIndex, hoverIndex) => {\n    const newFormData = moveBlock(properties, dragIndex, hoverIndex);\n    onChangeFormData(newFormData);\n  };\n\n  const defaultBlockWrapper = ({ draginfo }, editBlock, blockProps) => (\n    <EditBlockWrapper draginfo={draginfo} blockProps={blockProps}>\n      {editBlock}\n    </EditBlockWrapper>\n  );\n\n  const editBlockWrapper = children || defaultBlockWrapper;\n\n  return (\n    <div className=\"blocks-form\">\n      <DragDropList\n        childList={blockList}\n        onMoveItem={(result) => {\n          const { source, destination } = result;\n          if (!destination) {\n            return;\n          }\n          const newFormData = moveBlock(\n            properties,\n            source.index,\n            destination.index,\n          );\n          onChangeFormData(newFormData);\n          return true;\n        }}\n      >\n        {(dragProps) => {\n          const { child, childId, index } = dragProps;\n          const blockProps = {\n            allowedBlocks,\n            showRestricted,\n            block: childId,\n            data: child,\n            handleKeyDown,\n            id: childId,\n            formTitle: title,\n            formDescription: description,\n            index,\n            manage,\n            onAddBlock,\n            onInsertBlock,\n            onChangeBlock,\n            onChangeField,\n            onDeleteBlock,\n            onFocusNextBlock,\n            onFocusPreviousBlock,\n            onMoveBlock,\n            onMutateBlock,\n            onSelectBlock,\n            pathname,\n            metadata,\n            properties,\n            blocksConfig,\n            selected: selectedBlock === childId,\n            multiSelected: multiSelected?.includes(childId),\n            type: child['@type'],\n          };\n          return editBlockWrapper(\n            dragProps,\n            <EditBlock key={childId} {...blockProps} />,\n            blockProps,\n          );\n        }}\n      </DragDropList>\n    </div>\n  );\n};\n\nexport default BlocksForm;\n","/**\n * Edit block.\n * @module components/manage/Blocks/Block/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\n\nimport {\n  SidebarPortal,\n  BlockSettingsSidebar,\n  BlockSettingsSchema,\n} from '@plone/volto/components';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n});\n\n/**\n * Edit block class.\n * @class Edit\n * @extends Component\n */\nexport class Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    type: PropTypes.string.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    // properties is mapped to formData, so it's not connected to changes of the object\n    properties: PropTypes.objectOf(PropTypes.any).isRequired,\n    selected: PropTypes.bool.isRequired,\n    multiSelected: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    id: PropTypes.string.isRequired,\n    manage: PropTypes.bool,\n    onMoveBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    manage: false,\n  };\n\n  componentDidMount() {\n    const { type } = this.props;\n    const { blocksConfig = config.blocks.blocksConfig } = this.props;\n\n    const blockHasOwnFocusManagement =\n      blocksConfig?.[type]?.['blockHasOwnFocusManagement'] || null;\n    if (\n      !blockHasOwnFocusManagement &&\n      this.props.selected &&\n      this.blockNode.current\n    ) {\n      this.blockNode.current.focus();\n    }\n    const tab = this.props.manage ? 1 : blocksConfig?.[type]?.sidebarTab || 0;\n    if (this.props.selected) {\n      this.props.setSidebarTab(tab);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { blocksConfig = config.blocks.blocksConfig } = this.props;\n    const { selected, type } = this.props;\n    const blockHasOwnFocusManagement =\n      blocksConfig?.[type]?.['blockHasOwnFocusManagement'] || null;\n    if (\n      !blockHasOwnFocusManagement &&\n      nextProps.selected &&\n      selected !== nextProps.selected &&\n      this.blockNode.current\n    ) {\n      this.blockNode.current.focus();\n    }\n    if (\n      (!this.props.selected && nextProps.selected) ||\n      type !== nextProps.type\n    ) {\n      const tab = this.props.manage\n        ? 1\n        : blocksConfig?.[nextProps.type]?.sidebarTab || 0;\n      this.props.setSidebarTab(tab);\n    }\n  }\n\n  blockNode = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { blocksConfig = config.blocks.blocksConfig } = this.props;\n    const { type } = this.props;\n\n    const disableNewBlocks = this.props.data?.disableNewBlocks;\n\n    let Block = blocksConfig?.[type]?.['edit'] || null;\n    if (this.props.data?.readOnly) {\n      Block = blocksConfig?.[type]?.['view'] || null;\n    }\n    const schema = blocksConfig?.[type]?.['schema'] || BlockSettingsSchema;\n    const blockHasOwnFocusManagement =\n      blocksConfig?.[type]?.['blockHasOwnFocusManagement'] || null;\n\n    return (\n      <>\n        {Block !== null ? (\n          <div\n            role=\"presentation\"\n            onClick={(e) => {\n              const isMultipleSelection = e.shiftKey || e.ctrlKey || e.metaKey;\n              !this.props.selected &&\n                this.props.onSelectBlock(\n                  this.props.id,\n                  this.props.selected ? false : isMultipleSelection,\n                  e,\n                );\n            }}\n            onKeyDown={\n              !(blockHasOwnFocusManagement || disableNewBlocks)\n                ? (e) =>\n                    this.props.handleKeyDown(\n                      e,\n                      this.props.index,\n                      this.props.id,\n                      this.blockNode.current,\n                    )\n                : null\n            }\n            className={cx(`block ${type}`, {\n              selected: this.props.selected || this.props.multiSelected,\n              multiSelected: this.props.multiSelected,\n            })}\n            style={{ outline: 'none' }}\n            ref={this.blockNode}\n            // The tabIndex is required for the keyboard navigation\n            /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n            tabIndex={!blockHasOwnFocusManagement ? -1 : null}\n          >\n            <Block {...this.props} blockNode={this.blockNode} />\n            {this.props.manage && (\n              <SidebarPortal\n                selected={this.props.selected}\n                tab=\"sidebar-settings\"\n              >\n                <BlockSettingsSidebar {...this.props} schema={schema} />\n              </SidebarPortal>\n            )}\n          </div>\n        ) : (\n          <div\n            role=\"presentation\"\n            onClick={() =>\n              !this.props.selected && this.props.onSelectBlock(this.props.id)\n            }\n            onKeyDown={\n              !(blockHasOwnFocusManagement || disableNewBlocks)\n                ? (e) =>\n                    this.props.handleKeyDown(\n                      e,\n                      this.props.index,\n                      this.props.id,\n                      this.blockNode.current,\n                    )\n                : null\n            }\n            className={cx(`block ${type}`, { selected: this.props.selected })}\n            style={{ outline: 'none' }}\n            ref={this.blockNode}\n            // The tabIndex is required for the keyboard navigation\n            tabIndex={-1}\n          >\n            {this.props.intl.formatMessage(messages.unknownBlock, {\n              block: type,\n            })}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  withObjectBrowser,\n  connect(null, { setSidebarTab }),\n)(Edit);\n","import React from 'react';\nimport { Icon } from '@plone/volto/components';\nimport { blockHasValue } from '@plone/volto/helpers';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport { Button } from 'semantic-ui-react';\nimport includes from 'lodash/includes';\nimport isBoolean from 'lodash/isBoolean';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\n\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nconst messages = defineMessages({\n  delete: {\n    id: 'delete',\n    defaultMessage: 'delete',\n  },\n});\n\nconst EditBlockWrapper = (props) => {\n  const hideHandler = (data) => {\n    return !!data.fixed || !blockHasValue(data);\n  };\n\n  const { intl, blockProps, draginfo, children } = props;\n  const { block, selected, type, onDeleteBlock, data } = blockProps;\n  const visible = selected && !hideHandler(data);\n\n  const required = isBoolean(data.required)\n    ? data.required\n    : includes(config.blocks.requiredBlocks, type);\n\n  return (\n    <div\n      ref={draginfo.innerRef}\n      {...draginfo.draggableProps}\n      className={`block-editor-${data['@type']}`}\n    >\n      <div style={{ position: 'relative' }}>\n        <div\n          style={{\n            visibility: visible ? 'visible' : 'hidden',\n            display: 'inline-block',\n          }}\n          {...draginfo.dragHandleProps}\n          className=\"drag handle wrapper\"\n        >\n          <Icon name={dragSVG} size=\"18px\" />\n        </div>\n        <div className={`ui drag block inner ${type}`}>\n          {children}\n          {selected && !required && (\n            <Button\n              icon\n              basic\n              onClick={() => onDeleteBlock(block)}\n              className=\"delete-button\"\n              aria-label={intl.formatMessage(messages.delete)}\n            >\n              <Icon name={trashSVG} size=\"18px\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default injectIntl(EditBlockWrapper);\n","const Schema = {\n  title: 'Block settings',\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: [\n        'placeholder',\n        'required',\n        'fixed',\n        'disableNewBlocks',\n        'readOnly',\n      ],\n    },\n  ],\n  properties: {\n    placeholder: {\n      title: 'Helper text',\n      description:\n        'A short hint that describes the expected value within this block',\n      type: 'string',\n    },\n    required: {\n      title: 'Required',\n      description: \"Don't allow deletion of this block\",\n      type: 'boolean',\n    },\n    fixed: {\n      title: 'Fixed position',\n      description: 'Disable drag & drop on this block',\n      type: 'boolean',\n    },\n    disableNewBlocks: {\n      title: 'Disable new blocks',\n      description: 'Disable creation of new blocks after this block',\n      type: 'boolean',\n    },\n    readOnly: {\n      title: 'Read-only',\n      description: 'Disable editing on this block',\n      type: 'boolean',\n    },\n  },\n  required: [],\n};\n\nexport default Schema;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\n\nconst Settings = ({ data, block, onChangeBlock, schema }) => {\n  return (\n    <InlineForm\n      schema={schema}\n      title={schema.title}\n      onChangeField={(id, value) => {\n        onChangeBlock(block, {\n          ...data,\n          [id]: value,\n        });\n      }}\n      formData={data}\n    />\n  );\n};\n\nSettings.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  schema: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default injectIntl(Settings);\n","import React from 'react';\nimport cx from 'classnames';\n\nexport default ({ data, detached, children }) => {\n  return (\n    <div\n      className={cx(\n        `${data['@type'] ? `${data['@type']} block` : ''} align`,\n        {\n          center: !Boolean(data.align),\n          detached,\n        },\n        data.align,\n      )}\n    >\n      <div\n        className={cx({\n          'full-width': data.align === 'full',\n          large: data.size === 'l',\n          medium: data.size === 'm',\n          small: data.size === 's',\n        })}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n","/**\n * Edit description block.\n * @module components/manage/Blocks/Description/Edit\n */\n\nimport React, { Component } from 'react';\nimport { Map } from 'immutable';\nimport PropTypes from 'prop-types';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { isEqual } from 'lodash';\nimport { Editor, DefaultDraftBlockRenderMap, EditorState } from 'draft-js';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  description: {\n    id: 'Add a description…',\n    defaultMessage: 'Add a description…',\n  },\n});\n\nconst blockRenderMap = Map({\n  unstyled: {\n    element: 'div',\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\n/**\n * Edit description block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    properties: PropTypes.objectOf(PropTypes.any).isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    onChangeField: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.properties && props.properties.description) {\n        const contentState = stateFromHTML(props.properties.description);\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n      this.state = { editorState, focus: false };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.node) {\n      this.node._onBlur = () => this.setState({ focus: false });\n      this.node._onFocus = () => this.setState({ focus: true });\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.properties.description &&\n      this.props.properties.description !== nextProps.properties.description &&\n      !this.state.focus\n    ) {\n      const contentState = stateFromHTML(nextProps.properties.description);\n      this.setState({\n        editorState: nextProps.properties.description\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (!this.props.selected && nextProps.selected) {\n      this.node.focus();\n      this.setState({ focus: true });\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return (\n      this.props.selected ||\n      !isEqual(\n        this.props.properties.description,\n        nextProps.properties.description,\n      )\n    );\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    this.setState({ editorState }, () => {\n      this.props.onChangeField(\n        'description',\n        editorState.getCurrentContent().getPlainText(),\n      );\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n    return (\n      <div\n        className={cx('block description', { selected: this.props.selected })}\n      >\n        <Editor\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          blockRenderMap={extendedBlockRenderMap}\n          handleReturn={() => {\n            if (this.props.data?.disableNewBlocks) {\n              return 'handled';\n            }\n            this.props.onSelectBlock(\n              this.props.onAddBlock(\n                config.settings.defaultBlockType,\n                this.props.index + 1,\n              ),\n            );\n            return 'handled';\n          }}\n          handleKeyCommand={(command, editorState) => {\n            if (\n              command === 'backspace' &&\n              editorState.getCurrentContent().getPlainText().length === 0\n            ) {\n              this.props.onDeleteBlock(this.props.block, true);\n            }\n          }}\n          placeholder={this.props.intl.formatMessage(messages.description)}\n          blockStyleFn={() => 'documentDescription'}\n          onUpArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const { editorState } = this.state;\n            if (\n              editorState.getCurrentContent().getBlockMap().first().getKey() ===\n              selectionState.getFocusKey()\n            ) {\n              this.props.onFocusPreviousBlock(this.props.block, this.node);\n            }\n          }}\n          onDownArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const { editorState } = this.state;\n            if (\n              editorState.getCurrentContent().getBlockMap().last().getKey() ===\n              selectionState.getFocusKey()\n            ) {\n              this.props.onFocusNextBlock(this.props.block, this.node);\n            }\n          }}\n          ref={(node) => {\n            this.node = node;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n","/**\n * View description block.\n * @module components/manage/Blocks/Description/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * View description block class.\n * @class View\n * @extends Component\n */\nconst View = ({ properties }) => (\n  <p className=\"documentDescription\">{properties.description}</p>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit html block.\n * @module components/manage/Blocks/HTML/Edit\n */\n\nimport { compose } from 'redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport { isEqual } from 'lodash';\n\nimport { Icon } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport codeSVG from '@plone/volto/icons/code.svg';\nimport indentSVG from '@plone/volto/icons/indent.svg';\n\nconst Editor = loadable(() => import('react-simple-code-editor'));\n\nconst messages = defineMessages({\n  source: {\n    id: 'Source',\n    defaultMessage: 'Source',\n  },\n  preview: {\n    id: 'Preview',\n    defaultMessage: 'Preview',\n  },\n  placeholder: {\n    id: '<p>Add some HTML here</p>',\n    defaultMessage: '<p>Add some HTML here</p>',\n  },\n  prettier: {\n    id: 'Prettify your code',\n    defaultMessage: 'Prettify your code',\n  },\n  clear: {\n    id: 'Clear',\n    defaultMessage: 'Clear',\n  },\n  code: {\n    id: 'Code',\n    defaultMessage: 'Code',\n  },\n});\n\n/**\n * Edit html block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPreview: false,\n    };\n    this.onChangeCode = this.onChangeCode.bind(this);\n    this.onPreview = this.onPreview.bind(this);\n    this.onCodeEditor = this.onCodeEditor.bind(this);\n  }\n\n  codeEditorRef = React.createRef();\n  savedSelection = {};\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // The selection is saved in the snapshot.\n    this.savedSelection = snapshot;\n\n    this.restoreSelectionAndFocus(this.codeEditorRef.current);\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    // Always rerender when the DOM node is not created for the Editor (the\n    // first call to shouldComponentUpdate).\n    if (!this._input) {\n      return true;\n    }\n\n    // Rerender the entire component when the Editor in it changes its selection\n    // because this way we get a call to getSnapshotBeforeUpdate where we can\n    // save the selection.\n    return (\n      this.props.selected ||\n      !isEqual(this.props.data, nextProps.data) ||\n      this._input.selectionStart !== this.savedSelection.selectionStart ||\n      this._input.selectionEnd !== this.savedSelection.selectionEnd\n    );\n  }\n\n  /**\n   * Change html handler\n   * @method onChangeCode\n   * @param {string} code New value html\n   * @returns {undefined}\n   */\n  onChangeCode(code) {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      html: code,\n    });\n  }\n\n  getValue() {\n    return this.props.data.html || '';\n  }\n\n  /**\n   * Preview mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onPreview() {\n    try {\n      const code = this.props.prettierStandalone\n        .format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml],\n        })\n        .trim();\n      this.setState(\n        {\n          isPreview: !this.state.isPreview,\n        },\n        () => this.onChangeCode(code),\n      );\n    } catch (ex) {\n      // error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  }\n\n  /**\n   * Prettify handler\n   * @method onPrettify\n   * @returns {undefined}\n   */\n  onPrettify = () => {\n    try {\n      const code = this.props.prettierStandalone\n        .format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml],\n        })\n        .trim();\n      this.onChangeCode(code);\n    } catch (ex) {\n      // error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  };\n\n  /**\n   * Code Editor mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onCodeEditor() {\n    this.setState({ isPreview: !this.state.isPreview });\n  }\n\n  getSelection = (editor) => {\n    if (!editor._input) {\n      return {};\n    }\n\n    const o = {};\n    if (editor._input.selectionStart) {\n      o.selectionStart = editor._input.selectionStart;\n    }\n    if (editor._input.selectionEnd) {\n      o.selectionEnd = editor._input.selectionEnd;\n    }\n    return o;\n  };\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    return this.getSelection(this.codeEditorRef.current);\n  }\n\n  restoreSelectionAndFocus = (editor) => {\n    // Don't restore selection when the block is not selected.\n    if (\n      this.props.selected &&\n      editor._input &&\n      typeof this.savedSelection?.selectionStart === 'number' &&\n      typeof this.savedSelection?.selectionEnd === 'number'\n    ) {\n      editor._input.selectionStart = this.savedSelection?.selectionStart;\n      editor._input.selectionEnd = this.savedSelection?.selectionEnd;\n      editor._input.focus();\n    }\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.placeholder);\n    const value = this.getValue();\n    return (\n      <>\n        {this.props.selected && value && (\n          <div className=\"toolbar\">\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.source)}\n                  active={!this.state.isPreview}\n                  onClick={this.onCodeEditor}\n                >\n                  <Icon name={codeSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.code)}\n              size=\"mini\"\n            />\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.preview)}\n                  active={this.state.isPreview}\n                  onClick={this.onPreview}\n                >\n                  <Icon name={showSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.preview)}\n              size=\"mini\"\n            />\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.prettier)}\n                  onClick={this.onPrettify}\n                >\n                  <Icon name={indentSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.prettier)}\n              size=\"mini\"\n            />\n            <div className=\"separator\" />\n            <Popup\n              trigger={\n                <Button.Group>\n                  <Button icon basic onClick={() => this.onChangeCode('')}>\n                    <Icon name={clearSVG} size=\"24px\" color=\"#e40166\" />\n                  </Button>\n                </Button.Group>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.clear)}\n              size=\"mini\"\n            />\n          </div>\n        )}\n        {this.state.isPreview ? (\n          <div dangerouslySetInnerHTML={{ __html: value }} />\n        ) : (\n          <Editor\n            value={value}\n            placeholder={placeholder}\n            onValueChange={(code) => this.onChangeCode(code)}\n            highlight={\n              this.props.prismCore?.highlight &&\n              this.props.prismCore?.languages?.html\n                ? (code) =>\n                    this.props.prismCore.highlight(\n                      code,\n                      this.props.prismCore.languages.html,\n                      'html',\n                    )\n                : () => {}\n            }\n            padding={8}\n            className=\"html-editor\"\n            ref={(node) => {\n              if (node) {\n                this.codeEditorRef.current = node;\n              }\n            }}\n            ignoreTabKey={true}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nconst withPrismMarkup = (WrappedComponent) => (props) => {\n  const [loaded, setLoaded] = React.useState();\n  const promise = React.useRef(null);\n  const cancelled = React.useRef(false);\n\n  React.useEffect(() => {\n    promise.current = import('prismjs/components/prism-markup');\n    promise.current.then(() => {\n      if (!cancelled.current) {\n        setLoaded(true);\n      }\n    });\n    return () => {\n      cancelled.current = true;\n    };\n  }, []);\n\n  return loaded ? <WrappedComponent {...props} /> : null;\n};\n\nexport default compose(\n  injectLazyLibs(['prettierStandalone', 'prettierParserHtml', 'prismCore']),\n  withPrismMarkup,\n  injectIntl,\n)(Edit);\n","/**\n * View html block.\n * @module components/manage/Blocks/HTML/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * View html block class.\n * @class View\n * @extends Component\n */\nconst View = ({ data }) => (\n  <div className=\"block html\" dangerouslySetInnerHTML={{ __html: data.html }} />\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit Hero block.\n * @module components/manage/Blocks/Image/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Map } from 'immutable';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { Button, Dimmer, Loader, Message } from 'semantic-ui-react';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { Editor, DefaultDraftBlockRenderMap, EditorState } from 'draft-js';\nimport { isEqual } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\n\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport { createContent } from '@plone/volto/actions';\nimport { Icon } from '@plone/volto/components';\n\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  placeholder: {\n    id: 'Upload a new image',\n    defaultMessage: 'Upload a new image',\n  },\n});\n\nconst blockTitleRenderMap = Map({\n  unstyled: {\n    element: 'h1',\n  },\n});\n\nconst blockDescriptionRenderMap = Map({\n  unstyled: {\n    element: 'div',\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(\n  blockTitleRenderMap,\n);\n\nconst extendedDescripBlockRenderMap = DefaultDraftBlockRenderMap.merge(\n  blockDescriptionRenderMap,\n);\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    content: PropTypes.objectOf(PropTypes.any).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n    createContent: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    this.onUploadImage = this.onUploadImage.bind(this);\n    this.state = {\n      uploading: false,\n    };\n\n    if (!__SERVER__) {\n      let titleEditorState;\n      let descriptionEditorState;\n      if (props.data && props.data.title) {\n        titleEditorState = EditorState.createWithContent(\n          stateFromHTML(props.data.title),\n        );\n      } else {\n        titleEditorState = EditorState.createEmpty();\n      }\n      if (props.data && props.data.description) {\n        descriptionEditorState = EditorState.createWithContent(\n          stateFromHTML(props.data.description),\n        );\n      } else {\n        descriptionEditorState = EditorState.createEmpty();\n      }\n      this.state = {\n        uploading: false,\n        titleEditorState,\n        descriptionEditorState,\n        currentFocused: 'title',\n      };\n    }\n\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      this.titleEditor.focus();\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      this.props.request.loading &&\n      nextProps.request.loaded &&\n      this.state.uploading\n    ) {\n      this.setState({\n        uploading: false,\n      });\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        url: nextProps.content['@id'],\n      });\n    }\n\n    if (\n      nextProps.data.title &&\n      this.props.data.title !== nextProps.data.title &&\n      !this.props.selected\n    ) {\n      const contentState = stateFromHTML(nextProps.data.title);\n      this.setState({\n        titleEditorState: nextProps.data.title\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (\n      nextProps.data.description &&\n      this.props.data.description !== nextProps.data.description &&\n      !this.props.selected\n    ) {\n      const contentState = stateFromHTML(nextProps.data.description);\n      this.setState({\n        descriptionEditorState: nextProps.data.description\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (nextProps.selected !== this.props.selected) {\n      if (this.state.currentFocused === 'title') {\n        this.titleEditor.focus();\n      } else {\n        this.descriptionEditor.focus();\n      }\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || !isEqual(this.props.data, nextProps.data);\n  }\n\n  /**\n   * Change Title handler\n   * @method onChangeTitle\n   * @param {object} titleEditorState Editor state.\n   * @returns {undefined}\n   */\n  onChangeTitle(titleEditorState) {\n    this.setState({ titleEditorState }, () => {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        title: titleEditorState.getCurrentContent().getPlainText(),\n      });\n    });\n  }\n\n  /**\n   * Change Description handler\n   * @method onChangeDescription\n   * @param {object} descriptionEditorState Editor state.\n   * @returns {undefined}\n   */\n  onChangeDescription(descriptionEditorState) {\n    this.setState({ descriptionEditorState }, () => {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        description: descriptionEditorState.getCurrentContent().getPlainText(),\n      });\n    });\n  }\n\n  /**\n   * Upload image handler\n   * @method onUploadImage\n   * @returns {undefined}\n   */\n  onUploadImage({ target }) {\n    const file = target.files[0];\n    this.setState({\n      uploading: true,\n    });\n    readAsDataURL(file).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      this.props.createContent(getBaseUrl(this.props.pathname), {\n        '@type': 'Image',\n        image: {\n          data: fields[3],\n          encoding: fields[2],\n          'content-type': fields[1],\n          filename: file.name,\n        },\n      });\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.placeholder);\n    return (\n      <div\n        className={cx('block hero', {\n          selected: this.props.selected,\n        })}\n      >\n        {this.props.selected && !!this.props.data.url && (\n          <div className=\"toolbar\">\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={() =>\n                  this.props.onChangeBlock(this.props.block, {\n                    ...this.props.data,\n                    url: '',\n                  })\n                }\n              >\n                <Icon name={clearSVG} size=\"24px\" color=\"#e40166\" />\n              </Button>\n            </Button.Group>\n          </div>\n        )}\n        <div className=\"block-inner-wrapper\">\n          {this.props.data.url ? (\n            <img\n              className=\"hero-image\"\n              src={`${flattenToAppURL(this.props.data.url)}/@@images/image`}\n              alt=\"\"\n            />\n          ) : (\n            <div className=\"image-add\">\n              <Message className=\"image-message\">\n                {this.state.uploading && (\n                  <Dimmer active>\n                    <Loader indeterminate>Uploading image</Loader>\n                  </Dimmer>\n                )}\n                <center>\n                  <h4>Image</h4>\n                  <p>{placeholder}</p>\n                  <p>\n                    <label className=\"ui button file\">\n                      Browse\n                      <input\n                        type=\"file\"\n                        onChange={this.onUploadImage}\n                        style={{ display: 'none' }}\n                      />\n                    </label>\n                  </p>\n                </center>\n              </Message>\n            </div>\n          )}\n          <div className=\"hero-body\">\n            <Editor\n              ref={(node) => {\n                this.titleEditor = node;\n              }}\n              onChange={this.onChangeTitle}\n              editorState={this.state.titleEditorState}\n              blockRenderMap={extendedBlockRenderMap}\n              handleReturn={() => true}\n              placeholder={this.props.intl.formatMessage(messages.title)}\n              blockStyleFn={() => 'title-editor'}\n              onUpArrow={() => {\n                const selectionState = this.state.titleEditorState.getSelection();\n                const { titleEditorState } = this.state;\n                if (\n                  titleEditorState\n                    .getCurrentContent()\n                    .getBlockMap()\n                    .first()\n                    .getKey() === selectionState.getFocusKey()\n                ) {\n                  this.props.onFocusPreviousBlock(\n                    this.props.block,\n                    this.props.blockNode.current,\n                  );\n                }\n              }}\n              onDownArrow={() => {\n                const selectionState = this.state.titleEditorState.getSelection();\n                const { titleEditorState } = this.state;\n                if (\n                  titleEditorState\n                    .getCurrentContent()\n                    .getBlockMap()\n                    .last()\n                    .getKey() === selectionState.getFocusKey()\n                ) {\n                  this.setState(() => ({ currentFocused: 'description' }));\n                  this.descriptionEditor.focus();\n                }\n              }}\n            />\n            <Editor\n              ref={(node) => {\n                this.descriptionEditor = node;\n              }}\n              onChange={this.onChangeDescription}\n              editorState={this.state.descriptionEditorState}\n              blockRenderMap={extendedDescripBlockRenderMap}\n              handleReturn={() => true}\n              placeholder={this.props.intl.formatMessage(messages.description)}\n              blockStyleFn={() => 'description-editor'}\n              onUpArrow={() => {\n                const selectionState = this.state.descriptionEditorState.getSelection();\n                const currentCursorPosition = selectionState.getStartOffset();\n\n                if (currentCursorPosition === 0) {\n                  this.setState(() => ({ currentFocused: 'title' }));\n                  this.titleEditor.focus();\n                }\n              }}\n              onDownArrow={() => {\n                const selectionState = this.state.descriptionEditorState.getSelection();\n                const { descriptionEditorState } = this.state;\n                const currentCursorPosition = selectionState.getStartOffset();\n                const blockLength = descriptionEditorState\n                  .getCurrentContent()\n                  .getFirstBlock()\n                  .getLength();\n\n                if (currentCursorPosition === blockLength) {\n                  this.props.onFocusNextBlock(\n                    this.props.block,\n                    this.props.blockNode.current,\n                  );\n                }\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.content.create,\n      content: state.content.data,\n    }),\n    { createContent },\n  ),\n)(Edit);\n","/**\n * View image block.\n * @module components/manage/Blocks/Hero/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\nconst View = ({ data }) => (\n  <div className=\"block hero\">\n    <div className=\"block-inner-wrapper\">\n      {data.url && (\n        <img\n          src={`${flattenToAppURL(data.url)}/@@images/image`}\n          alt=\"\"\n          className=\"hero-image\"\n          loading=\"lazy\"\n        />\n      )}\n      <div className=\"hero-body\">\n        {data.title && <h1>{data.title}</h1>}\n        {data.description && <p>{data.description}</p>}\n      </div>\n    </div>\n  </div>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit image block.\n * @module components/manage/Blocks/Image/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { Button, Dimmer, Input, Loader, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\n\nimport { Icon, ImageSidebar, SidebarPortal } from '@plone/volto/components';\nimport { createContent } from '@plone/volto/actions';\nimport {\n  flattenToAppURL,\n  getBaseUrl,\n  isInternalURL,\n} from '@plone/volto/helpers';\n\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport uploadSVG from '@plone/volto/icons/upload.svg';\n\nconst Dropzone = loadable(() => import('react-dropzone'));\n\nconst messages = defineMessages({\n  ImageBlockInputPlaceholder: {\n    id: 'Browse the site, drop an image, or type an URL',\n    defaultMessage: 'Browse the site, drop an image, or type an URL',\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    content: PropTypes.objectOf(PropTypes.any).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n    createContent: PropTypes.func.isRequired,\n    openObjectBrowser: PropTypes.func.isRequired,\n  };\n\n  state = {\n    uploading: false,\n    url: '',\n    dragging: false,\n  };\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      this.props.request.loading &&\n      nextProps.request.loaded &&\n      this.state.uploading\n    ) {\n      this.setState({\n        uploading: false,\n      });\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        url: nextProps.content['@id'],\n        alt: nextProps.properties.title,\n      });\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return (\n      this.props.selected ||\n      nextProps.selected ||\n      !isEqual(this.props.data, nextProps.data)\n    );\n  }\n\n  /**\n   * Upload image handler (not used), but useful in case that we want a button\n   * not powered by react-dropzone\n   * @method onUploadImage\n   * @returns {undefined}\n   */\n  onUploadImage = (e) => {\n    e.stopPropagation();\n    const file = e.target.files[0];\n    this.setState({\n      uploading: true,\n    });\n    readAsDataURL(file).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      this.props.createContent(\n        getBaseUrl(this.props.pathname),\n        {\n          '@type': 'Image',\n          title: file.name,\n          image: {\n            data: fields[3],\n            encoding: fields[2],\n            'content-type': fields[1],\n            filename: file.name,\n          },\n        },\n        this.props.block,\n      );\n    });\n  };\n\n  /**\n   * Align block handler\n   * @method onAlignBlock\n   * @param {string} align Alignment option\n   * @returns {undefined}\n   */\n  onAlignBlock(align) {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      align,\n    });\n  }\n\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n  onChangeUrl = ({ target }) => {\n    this.setState({\n      url: target.value,\n    });\n  };\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {object} e Event\n   * @returns {undefined}\n   */\n  onSubmitUrl = () => {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      url: this.state.url,\n    });\n  };\n\n  resetSubmitUrl = () => {\n    this.setState({\n      url: '',\n    });\n  };\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  onDrop = (file) => {\n    this.setState({\n      uploading: true,\n    });\n\n    readAsDataURL(file[0]).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      this.props.createContent(\n        getBaseUrl(this.props.pathname),\n        {\n          '@type': 'Image',\n          title: file[0].name,\n          image: {\n            data: fields[3],\n            encoding: fields[2],\n            'content-type': fields[1],\n            filename: file[0].name,\n          },\n        },\n        this.props.block,\n      );\n    });\n  };\n\n  /**\n   * Keydown handler on Variant Menu Form\n   * This is required since the ENTER key is already mapped to a onKeyDown\n   * event and needs to be overriden with a child onKeyDown.\n   * @method onKeyDownVariantMenuForm\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n  onKeyDownVariantMenuForm = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmitUrl();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      // TODO: Do something on ESC key\n    }\n  };\n  onDragEnter = () => {\n    this.setState({ dragging: true });\n  };\n  onDragLeave = () => {\n    this.setState({ dragging: false });\n  };\n\n  node = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { data } = this.props;\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.ImageBlockInputPlaceholder);\n    return (\n      <div\n        className={cx(\n          'block image align',\n          {\n            center: !Boolean(data.align),\n          },\n          data.align,\n        )}\n      >\n        {data.url ? (\n          <img\n            className={cx({\n              'full-width': data.align === 'full',\n              large: data.size === 'l',\n              medium: data.size === 'm',\n              small: data.size === 's',\n            })}\n            src={\n              isInternalURL(data.url)\n                ? // Backwards compat in the case that the block is storing the full server URL\n                  (() => {\n                    if (data.size === 'l')\n                      return `${flattenToAppURL(data.url)}/@@images/image`;\n                    if (data.size === 'm')\n                      return `${flattenToAppURL(\n                        data.url,\n                      )}/@@images/image/preview`;\n                    if (data.size === 's')\n                      return `${flattenToAppURL(data.url)}/@@images/image/mini`;\n                    return `${flattenToAppURL(data.url)}/@@images/image`;\n                  })()\n                : data.url\n            }\n            alt={data.alt || ''}\n          />\n        ) : (\n          <div>\n            <Dropzone\n              noClick\n              onDrop={this.onDrop}\n              onDragEnter={this.onDragEnter}\n              onDragLeave={this.onDragLeave}\n              className=\"dropzone\"\n            >\n              {({ getRootProps, getInputProps }) => (\n                <div {...getRootProps()}>\n                  <Message>\n                    {this.state.dragging && <Dimmer active></Dimmer>}\n                    {this.state.uploading && (\n                      <Dimmer active>\n                        <Loader indeterminate>Uploading image</Loader>\n                      </Dimmer>\n                    )}\n                    <div className=\"no-image-wrapper\">\n                      <img src={imageBlockSVG} alt=\"\" />\n                      <div className=\"toolbar-inner\">\n                        <Button.Group>\n                          <Button\n                            basic\n                            icon\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              e.preventDefault();\n                              this.props.openObjectBrowser();\n                            }}\n                          >\n                            <Icon name={navTreeSVG} size=\"24px\" />\n                          </Button>\n                        </Button.Group>\n                        <Button.Group>\n                          <label className=\"ui button basic icon\">\n                            <Icon name={uploadSVG} size=\"24px\" />\n                            <input\n                              {...getInputProps({\n                                type: 'file',\n                                onChange: this.onUploadImage,\n                                style: { display: 'none' },\n                              })}\n                            />\n                          </label>\n                        </Button.Group>\n                        <Input\n                          onKeyDown={this.onKeyDownVariantMenuForm}\n                          onChange={this.onChangeUrl}\n                          placeholder={placeholder}\n                          value={this.state.url}\n                          // Prevents propagation to the Dropzone and the opening\n                          // of the upload browser dialog\n                          onClick={(e) => e.stopPropagation()}\n                        />\n                        {this.state.url && (\n                          <Button.Group>\n                            <Button\n                              basic\n                              className=\"cancel\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                this.setState({ url: '' });\n                              }}\n                            >\n                              <Icon name={clearSVG} size=\"30px\" />\n                            </Button>\n                          </Button.Group>\n                        )}\n                        <Button.Group>\n                          <Button\n                            basic\n                            primary\n                            disabled={!this.state.url}\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              this.onSubmitUrl();\n                            }}\n                          >\n                            <Icon name={aheadSVG} size=\"30px\" />\n                          </Button>\n                        </Button.Group>\n                      </div>\n                    </div>\n                  </Message>\n                </div>\n              )}\n            </Dropzone>\n          </div>\n        )}\n        <SidebarPortal selected={this.props.selected}>\n          <ImageSidebar {...this.props} resetSubmitUrl={this.resetSubmitUrl} />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, ownProps) => ({\n      request: state.content.subrequests[ownProps.block] || {},\n      content: state.content.subrequests[ownProps.block]?.data,\n    }),\n    { createContent },\n  ),\n)(Edit);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Accordion, Grid, Segment } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport {\n  CheckboxWidget,\n  Icon,\n  FormFieldWrapper,\n  TextWidget,\n} from '@plone/volto/components';\nimport { flattenToAppURL, isInternalURL } from '@plone/volto/helpers';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\n\nimport imageSVG from '@plone/volto/icons/image.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\nimport ImageSizeWidget from '@plone/volto/components/manage/Blocks/Image/ImageSizeWidget';\n\nconst messages = defineMessages({\n  Image: {\n    id: 'Image',\n    defaultMessage: 'Image',\n  },\n  Origin: {\n    id: 'Origin',\n    defaultMessage: 'Origin',\n  },\n  AltText: {\n    id: 'Alt text',\n    defaultMessage: 'Alt text',\n  },\n  Align: {\n    id: 'Alignment',\n    defaultMessage: 'Alignment',\n  },\n  LinkTo: {\n    id: 'Link to',\n    defaultMessage: 'Link to',\n  },\n  openLinkInNewTab: {\n    id: 'Open in a new tab',\n    defaultMessage: 'Open in a new tab',\n  },\n  NoImageSelected: {\n    id: 'No image selected',\n    defaultMessage: 'No image selected',\n  },\n  externalURL: {\n    id: 'External URL',\n    defaultMessage: 'External URL',\n  },\n  size: {\n    id: 'Size',\n    defaultMessage: 'Size',\n  },\n});\n\nconst ImageSidebar = ({\n  data,\n  block,\n  onChangeBlock,\n  openObjectBrowser,\n  required = false,\n  resetSubmitUrl,\n  intl,\n}) => {\n  const [activeAccIndex, setActiveAccIndex] = useState(0);\n\n  function handleAccClick(e, titleProps) {\n    const { index } = titleProps;\n    const newIndex = activeAccIndex === index ? -1 : index;\n\n    setActiveAccIndex(newIndex);\n  }\n\n  return (\n    <Segment.Group raised>\n      <header className=\"header pulled\">\n        <h2>\n          <FormattedMessage id=\"Image\" defaultMessage=\"Image\" />\n        </h2>\n      </header>\n\n      {!data.url && (\n        <>\n          <Segment className=\"sidebar-metadata-container\" secondary>\n            <FormattedMessage\n              id=\"No image selected\"\n              defaultMessage=\"No image selected\"\n            />\n            <Icon name={imageSVG} size=\"100px\" color=\"#b8c6c8\" />\n          </Segment>\n        </>\n      )}\n      {data.url && (\n        <>\n          <Segment className=\"sidebar-metadata-container\" secondary>\n            {data.url.split('/').slice(-1)[0]}\n            {isInternalURL(data.url) && (\n              <img\n                src={`${flattenToAppURL(data.url)}/@@images/image/mini`}\n                alt={data.alt}\n              />\n            )}\n            {!isInternalURL(data.url) && (\n              <img src={data.url} alt={data.alt} style={{ width: '50%' }} />\n            )}\n          </Segment>\n          <Segment className=\"form sidebar-image-data\">\n            {isInternalURL(data.url) && (\n              <TextWidget\n                id=\"Origin\"\n                title={intl.formatMessage(messages.Origin)}\n                required={false}\n                value={data.url.split('/').slice(-1)[0]}\n                icon={data.url ? clearSVG : navTreeSVG}\n                iconAction={\n                  data.url\n                    ? () => {\n                        resetSubmitUrl();\n                        onChangeBlock(block, {\n                          ...data,\n                          url: '',\n                        });\n                      }\n                    : () => openObjectBrowser()\n                }\n                onChange={() => {}}\n              />\n            )}\n            {!isInternalURL(data.url) && (\n              <TextWidget\n                id=\"external\"\n                title={intl.formatMessage(messages.externalURL)}\n                required={false}\n                value={data.url}\n                icon={clearSVG}\n                iconAction={() => {\n                  resetSubmitUrl();\n\n                  onChangeBlock(block, {\n                    ...data,\n                    url: '',\n                  });\n                }}\n                onChange={() => {}}\n              />\n            )}\n            <TextWidget\n              id=\"alt\"\n              title={intl.formatMessage(messages.AltText)}\n              required={false}\n              value={data.alt}\n              icon={data.alt ? clearSVG : null}\n              iconAction={() =>\n                onChangeBlock(block, {\n                  ...data,\n                  alt: '',\n                })\n              }\n              onChange={(name, value) => {\n                onChangeBlock(block, {\n                  ...data,\n                  alt: value,\n                });\n              }}\n            />\n            <Form.Field inline required={required}>\n              <Grid>\n                <Grid.Row>\n                  <Grid.Column width=\"4\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"field-align\">\n                        <FormattedMessage\n                          id=\"Alignment\"\n                          defaultMessage=\"Alignment\"\n                        />\n                      </label>\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width=\"8\" className=\"align-tools\">\n                    <AlignBlock\n                      align={data.align}\n                      onChangeBlock={(block, data) => {\n                        onChangeBlock(block, {\n                          ...data,\n                          size: data.size,\n                        });\n                      }}\n                      data={data}\n                      block={block}\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n            <FormFieldWrapper\n              id=\"image_size\"\n              title={intl.formatMessage(messages.size)}\n            >\n              <ImageSizeWidget\n                onChangeBlock={onChangeBlock}\n                data={data}\n                block={block}\n              />\n            </FormFieldWrapper>\n          </Segment>\n          <Accordion fluid styled className=\"form\">\n            <Accordion.Title\n              active={activeAccIndex === 0}\n              index={0}\n              onClick={handleAccClick}\n            >\n              Link Settings\n              {activeAccIndex === 0 ? (\n                <Icon name={upSVG} size=\"20px\" />\n              ) : (\n                <Icon name={downSVG} size=\"20px\" />\n              )}\n            </Accordion.Title>\n            <Accordion.Content active={activeAccIndex === 0}>\n              <TextWidget\n                id=\"link\"\n                title={intl.formatMessage(messages.LinkTo)}\n                required={false}\n                value={data.href}\n                icon={data.href ? clearSVG : navTreeSVG}\n                iconAction={\n                  data.href\n                    ? () => {\n                        onChangeBlock(block, {\n                          ...data,\n                          href: '',\n                        });\n                      }\n                    : () => openObjectBrowser({ mode: 'link' })\n                }\n                onChange={(name, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    href: value,\n                  });\n                }}\n              />\n              <CheckboxWidget\n                id=\"openLinkInNewTab\"\n                title={intl.formatMessage(messages.openLinkInNewTab)}\n                value={data.openLinkInNewTab ? data.openLinkInNewTab : false}\n                onChange={(name, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    openLinkInNewTab: value,\n                  });\n                }}\n              />\n            </Accordion.Content>\n          </Accordion>\n        </>\n      )}\n    </Segment.Group>\n  );\n};\n\nImageSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n  resetSubmitUrl: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(ImageSidebar);\n","import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Button } from 'semantic-ui-react';\n\nconst messages = defineMessages({\n  small: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  medium: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  large: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n});\n\nconst ImageSizeWidget = ({ onChangeBlock, data, block, disabled }) => {\n  /**\n   * Image size handler\n   * @method onImageSize\n   * @param {string} size Size option\n   * @returns {undefined}\n   */\n  function onImageSize(size) {\n    onChangeBlock(block, {\n      ...data,\n      size,\n    });\n  }\n\n  const intl = useIntl();\n\n  return (\n    <div className=\"field-image_size\">\n      <Button.Group>\n        <Button\n          icon\n          basic\n          aria-label={intl.formatMessage(messages.small)}\n          onClick={() => onImageSize('s')}\n          active={data.size === 's'}\n          disabled={disabled}\n        >\n          <div className=\"image-sizes-text\">S</div>\n        </Button>\n      </Button.Group>\n      <Button.Group>\n        <Button\n          icon\n          basic\n          aria-label={intl.formatMessage(messages.medium)}\n          onClick={() => onImageSize('m')}\n          active={data.size === 'm'}\n          disabled={disabled}\n        >\n          <div className=\"image-sizes-text\">M</div>\n        </Button>\n      </Button.Group>\n      <Button.Group>\n        <Button\n          icon\n          basic\n          aria-label={intl.formatMessage(messages.large)}\n          onClick={() => onImageSize('l')}\n          active={data.size === 'l' || data.size === undefined}\n          disabled={disabled}\n        >\n          <div className=\"image-sizes-text\">L</div>\n        </Button>\n      </Button.Group>\n    </div>\n  );\n};\n\nexport default ImageSizeWidget;\n","import BlockSettingsSchema from '@plone/volto/components/manage/Blocks/Block/Schema';\n\nconst Schema = {\n  ...BlockSettingsSchema,\n  fieldsets: [\n    {\n      ...BlockSettingsSchema.fieldsets[0],\n      // fields: [\n      //   ...BlockSettingsSchema.fieldsets[0].fields,\n      //   'minSize',\n      //   'maxSize',\n      // ],\n    },\n  ],\n  properties: {\n    ...BlockSettingsSchema.properties,\n    /* TODO Enable when we have validators inplace */\n    // minSize: {\n    //   title: 'Min size',\n    //   description: 'Minimum image size',\n    //   type: 'integer',\n    // },\n    // maxSize: {\n    //   title: 'Max size',\n    //   description: 'Maximum image size',\n    //   type: 'integer',\n    // },\n  },\n};\n\nexport default Schema;\n","/**\n * View image block.\n * @module components/manage/Blocks/Image/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\n\nimport { flattenToAppURL, isInternalURL } from '@plone/volto/helpers';\n\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\nconst View = ({ data, detached }) => (\n  <p\n    className={cx(\n      'block image align',\n      {\n        center: !Boolean(data.align),\n        detached,\n      },\n      data.align,\n    )}\n  >\n    {data.url && (\n      <>\n        {(() => {\n          const image = (\n            <img\n              className={cx({\n                'full-width': data.align === 'full',\n                large: data.size === 'l',\n                medium: data.size === 'm',\n                small: data.size === 's',\n              })}\n              src={\n                isInternalURL(data.url)\n                  ? // Backwards compat in the case that the block is storing the full server URL\n                    (() => {\n                      if (data.size === 'l')\n                        return `${flattenToAppURL(data.url)}/@@images/image`;\n                      if (data.size === 'm')\n                        return `${flattenToAppURL(\n                          data.url,\n                        )}/@@images/image/preview`;\n                      if (data.size === 's')\n                        return `${flattenToAppURL(\n                          data.url,\n                        )}/@@images/image/mini`;\n                      return `${flattenToAppURL(data.url)}/@@images/image`;\n                    })()\n                  : data.url\n              }\n              alt={data.alt || ''}\n              loading=\"lazy\"\n            />\n          );\n          if (data.href) {\n            if (!isInternalURL(data.href)) {\n              return (\n                <a\n                  target={data.openLinkInNewTab ? '_blank' : null}\n                  href={data.href}\n                >\n                  {image}\n                </a>\n              );\n            } else {\n              return (\n                <Link\n                  to={flattenToAppURL(data.href)}\n                  target={data.openLinkInNewTab ? '_blank' : null}\n                >\n                  {image}\n                </Link>\n              );\n            }\n          } else {\n            return image;\n          }\n        })()}\n      </>\n    )}\n  </p>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","module.exports = __webpack_public_path__ + \"static/media/block-image.8a4a14d5.svg\";","/**\n * Edit image block.\n * @module components/manage/Blocks/Image/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { Message } from 'semantic-ui-react';\nimport { isEqual } from 'lodash';\n\nimport { LeadImageSidebar, SidebarPortal } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\n\nconst messages = defineMessages({\n  ImageBlockInputPlaceholder: {\n    id: \"Upload a lead image in the 'Lead Image' content field.\",\n    defaultMessage: \"Upload a lead image in the 'Lead Image' content field.\",\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    properties: PropTypes.objectOf(PropTypes.any).isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    openObjectBrowser: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Align block handler\n   * @method onAlignBlock\n   * @param {string} align Alignment option\n   * @returns {undefined}\n   */\n  onAlignBlock(align) {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      align,\n    });\n  }\n\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || !isEqual(this.props.data, nextProps.data);\n  }\n\n  node = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { data, properties } = this.props;\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.ImageBlockInputPlaceholder);\n\n    return (\n      <div\n        className={cx(\n          'block image align',\n          {\n            center: !Boolean(data.align),\n          },\n          data.align,\n        )}\n      >\n        {!properties.image && (\n          <Message>\n            <center>\n              <img src={imageBlockSVG} alt=\"\" />\n              <div className=\"message-text\">{placeholder}</div>\n            </center>\n          </Message>\n        )}\n        {properties.image && (\n          <img\n            className={cx({ 'full-width': data.align === 'full' })}\n            src={\n              properties.image.data\n                ? `data:${properties.image['content-type']};base64,${properties.image.data}`\n                : flattenToAppURL(properties.image.download)\n            }\n            alt={data.image_caption || ''}\n          />\n        )}\n        <SidebarPortal selected={this.props.selected}>\n          <LeadImageSidebar {...this.props} />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default compose(injectIntl)(Edit);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Accordion, Grid, Segment } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { CheckboxWidget, Icon, TextWidget } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\n\nimport imageSVG from '@plone/volto/icons/image.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\n\nconst messages = defineMessages({\n  Image: {\n    id: 'Image',\n    defaultMessage: 'Image',\n  },\n  Origin: {\n    id: 'Origin',\n    defaultMessage: 'Origin',\n  },\n  AltText: {\n    id: 'Alt text',\n    defaultMessage: 'Alt text',\n  },\n  Align: {\n    id: 'Alignment',\n    defaultMessage: 'Alignment',\n  },\n  LinkTo: {\n    id: 'Link to',\n    defaultMessage: 'Link to',\n  },\n  openLinkInNewTab: {\n    id: 'Open in a new tab',\n    defaultMessage: 'Open in a new tab',\n  },\n  NoImageSelected: {\n    id: 'No image set in image content field',\n    defaultMessage: 'No image set in image content field',\n  },\n  externalURL: {\n    id: 'External URL',\n    defaultMessage: 'External URL',\n  },\n});\n\nconst LeadImageSidebar = ({\n  properties,\n  data,\n  block,\n  onChangeBlock,\n  openObjectBrowser,\n  required = false,\n  onChangeField,\n  intl,\n}) => {\n  const [activeAccIndex, setActiveAccIndex] = useState(0);\n\n  function handleAccClick(e, titleProps) {\n    const { index } = titleProps;\n    const newIndex = activeAccIndex === index ? -1 : index;\n\n    setActiveAccIndex(newIndex);\n  }\n\n  return (\n    <Segment.Group raised>\n      <header className=\"header pulled\">\n        <h2>\n          <FormattedMessage id=\"Lead Image\" defaultMessage=\"Lead Image\" />\n        </h2>\n      </header>\n\n      {!properties.image && (\n        <>\n          <Segment className=\"sidebar-metadata-container\" secondary>\n            <FormattedMessage\n              id=\"No image set in Lead Image content field\"\n              defaultMessage=\"No image set in Lead Image content field\"\n            />\n            <Icon name={imageSVG} size=\"100px\" color=\"#b8c6c8\" />\n          </Segment>\n        </>\n      )}\n      {properties.image && (\n        <>\n          <Segment className=\"sidebar-metadata-container\" secondary>\n            {properties.image.filename}\n            <img\n              src={\n                properties.image.data\n                  ? `data:${properties.image['content-type']};base64,${properties.image.data}`\n                  : flattenToAppURL(properties.image.scales.mini.download)\n              }\n              alt={properties.image_caption || ''}\n            />\n          </Segment>\n          <Segment className=\"form sidebar-image-data\">\n            <TextWidget\n              id=\"alt\"\n              title={intl.formatMessage(messages.AltText)}\n              required={false}\n              value={properties.image_caption}\n              icon={properties.image_caption ? clearSVG : null}\n              iconAction={() => onChangeField('image_caption', '')}\n              onChange={(name, value) => {\n                onChangeField('image_caption', value);\n              }}\n            />\n            <Form.Field inline required={required}>\n              <Grid>\n                <Grid.Row>\n                  <Grid.Column width=\"4\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"field-align\">\n                        <FormattedMessage\n                          id=\"Alignment\"\n                          defaultMessage=\"Alignment\"\n                        />\n                      </label>\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width=\"8\" className=\"align-tools\">\n                    <AlignBlock\n                      align={data.align}\n                      onChangeBlock={onChangeBlock}\n                      data={data}\n                      block={block}\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          </Segment>\n          <Accordion fluid styled className=\"form\">\n            <Accordion.Title\n              active={activeAccIndex === 0}\n              index={0}\n              onClick={handleAccClick}\n            >\n              Link Settings\n              {activeAccIndex === 0 ? (\n                <Icon name={upSVG} size=\"20px\" />\n              ) : (\n                <Icon name={downSVG} size=\"20px\" />\n              )}\n            </Accordion.Title>\n            <Accordion.Content active={activeAccIndex === 0}>\n              <TextWidget\n                id=\"link\"\n                title={intl.formatMessage(messages.LinkTo)}\n                required={false}\n                value={data.href}\n                icon={data.href ? clearSVG : navTreeSVG}\n                iconAction={\n                  data.href\n                    ? () => {\n                        onChangeBlock(block, {\n                          ...data,\n                          href: '',\n                        });\n                      }\n                    : () => openObjectBrowser({ mode: 'link' })\n                }\n                onChange={(name, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    href: value,\n                  });\n                }}\n              />\n              <CheckboxWidget\n                id=\"openLinkInNewTab\"\n                title={intl.formatMessage(messages.openLinkInNewTab)}\n                value={data.openLinkInNewTab ? data.openLinkInNewTab : false}\n                onChange={(name, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    openLinkInNewTab: value,\n                  });\n                }}\n              />\n            </Accordion.Content>\n          </Accordion>\n        </>\n      )}\n    </Segment.Group>\n  );\n};\n\nLeadImageSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n  onChangeField: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(LeadImageSidebar);\n","/**\n * View image block.\n * @module components/manage/Blocks/Image/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\n\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\nconst View = ({ data, properties }) => (\n  <p\n    className={cx(\n      'block image align',\n      {\n        center: !Boolean(data.align),\n      },\n      data.align,\n    )}\n  >\n    {properties.image && (\n      <>\n        {(() => {\n          const image = (\n            <img\n              className={cx({ 'full-width': data.align === 'full' })}\n              src={flattenToAppURL(properties.image.download)}\n              alt={properties.image_caption || ''}\n            />\n          );\n          if (data.href) {\n            if (\n              (data.href.startsWith('http') || data.href.startsWith('https')) &&\n              !data.href.includes(config.settings.apiPath)\n            ) {\n              return (\n                <a\n                  target={data.openLinkInNewTab ? '_blank' : null}\n                  href={data.href}\n                >\n                  {image}\n                </a>\n              );\n            } else {\n              return (\n                <Link\n                  to={flattenToAppURL(data.href)}\n                  target={data.openLinkInNewTab ? '_blank' : null}\n                >\n                  {image}\n                </Link>\n              );\n            }\n          } else {\n            return image;\n          }\n        })()}\n      </>\n    )}\n  </p>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ConditionalLink } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport { isInternalURL } from '@plone/volto/helpers/Url/Url';\n\nconst DefaultTemplate = ({ items, linkMore, isEditMode }) => {\n  let link = null;\n  let href = linkMore?.href || '';\n\n  if (isInternalURL(href)) {\n    link = (\n      <ConditionalLink to={flattenToAppURL(href)} condition={!isEditMode}>\n        {linkMore?.title || href}\n      </ConditionalLink>\n    );\n  } else if (href) {\n    link = <a href={href}>{linkMore?.title || href}</a>;\n  }\n\n  return (\n    <>\n      <div className=\"items\">\n        {items.map((item) => (\n          <div className=\"listing-item\" key={item['@id']}>\n            <ConditionalLink item={item} condition={!isEditMode}>\n              <div className=\"listing-body\">\n                <h4>{item.title ? item.title : item.id}</h4>\n                <p>{item.description}</p>\n              </div>\n            </ConditionalLink>\n          </div>\n        ))}\n      </div>\n\n      {link && <div className=\"footer\">{link}</div>}\n    </>\n  );\n};\nDefaultTemplate.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  linkMore: PropTypes.any,\n  isEditMode: PropTypes.bool,\n};\nexport default DefaultTemplate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { isEqual } from 'lodash';\n\nimport {\n  SidebarPortal,\n  ListingBlockBody as ListingBody,\n  ListingBlockSidebar as ListingSidebar,\n} from '@plone/volto/components';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nconst messages = defineMessages({\n  results: {\n    id: 'Results preview',\n    defaultMessage: 'Results preview',\n  },\n  items: {\n    id: 'Contained items',\n    defaultMessage: 'Contained items',\n  },\n});\n\nconst Edit = React.memo(\n  ({ data, onChangeBlock, block, selected, properties, pathname, intl }) => {\n    // componentDidMount\n    React.useEffect(() => {\n      if (!data.query) {\n        onChangeBlock(block, {\n          ...data,\n          query: [],\n          block,\n        });\n      }\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, []);\n\n    const placeholder =\n      data.placeholder ||\n      (data?.query?.length\n        ? intl.formatMessage(messages.results)\n        : intl.formatMessage(messages.items));\n\n    return (\n      <>\n        <p className=\"items-preview\">{placeholder}</p>\n        <ListingBody\n          data={data}\n          properties={properties}\n          block={block}\n          path={getBaseUrl(pathname)}\n          isEditMode\n        />\n        <SidebarPortal selected={selected}>\n          <ListingSidebar\n            data={data}\n            block={block}\n            onChangeBlock={onChangeBlock}\n          />\n        </SidebarPortal>\n      </>\n    );\n  },\n  (prevProps, nextProps) =>\n    !(nextProps.selected || !isEqual(prevProps.data, nextProps.data)),\n);\n\nEdit.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.any),\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(Edit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport loadable from '@loadable/component';\nimport 'react-image-gallery/styles/css/image-gallery.css';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { Button } from 'semantic-ui-react';\nimport { Icon } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\nimport galleryLeftSVG from '@plone/volto/icons/left-key.svg';\nimport galleryRightSVG from '@plone/volto/icons/right-key.svg';\nimport galleryPlaySVG from '@plone/volto/icons/play.svg';\nimport galleryPauseSVG from '@plone/volto/icons/pause.svg';\nimport galleryFullScreenSVG from '@plone/volto/icons/fullscreen.svg';\nimport galleryBackDownSVG from '@plone/volto/icons/back-down.svg';\n\nconst ImageGallery = loadable(() => import('react-image-gallery'));\n\nconst renderLeftNav = (onClick, disabled) => {\n  return (\n    <Button\n      className=\"image-gallery-icon image-gallery-left-nav primary basic\"\n      disabled={disabled}\n      onClick={onClick}\n    >\n      <Icon name={galleryLeftSVG} size=\"48px\" fill=\"black\" />\n    </Button>\n  );\n};\nconst renderRightNav = (onClick, disabled) => {\n  return (\n    <Button\n      className=\"image-gallery-icon image-gallery-right-nav primary basic\"\n      disabled={disabled}\n      onClick={onClick}\n    >\n      <Icon name={galleryRightSVG} size=\"48px\" />\n    </Button>\n  );\n};\n\nconst renderPlayPauseButton = (onClick, isPlaying) => (\n  <Button\n    type=\"button\"\n    className=\"image-gallery-icon image-gallery-play-button basic primary\"\n    onClick={onClick}\n    aria-label=\"Play or Pause Slideshow\"\n  >\n    {isPlaying ? (\n      <Icon name={galleryPauseSVG} size=\"48px\" />\n    ) : (\n      <Icon name={galleryPlaySVG} size=\"48px\" />\n    )}\n  </Button>\n);\n\nconst renderFullscreenButton = (onClick, isFullscreen) => {\n  return (\n    <Button\n      type=\"button\"\n      className=\"image-gallery-icon image-gallery-fullscreen-button primary basic\"\n      onClick={onClick}\n      aria-label=\"Open Fullscreen\"\n    >\n      {isFullscreen ? (\n        <Icon name={galleryBackDownSVG} size=\"48px\" />\n      ) : (\n        <Icon name={galleryFullScreenSVG} size=\"48px\" />\n      )}\n    </Button>\n  );\n};\n\nconst ImageGalleryTemplate = ({ items }) => {\n  const { settings } = config;\n  const renderItems = items.filter((content) =>\n    settings.imageObjects.includes(content['@type']),\n  );\n  const imagesInfo = renderItems.map((item) => {\n    return {\n      original: flattenToAppURL(\n        item[settings.listingPreviewImageField]?.scales.large.download || '',\n      ),\n      thumbnail: flattenToAppURL(\n        item[settings.listingPreviewImageField]?.scales.thumb.download || '',\n      ),\n    };\n  });\n\n  return (\n    renderItems.length > 0 && (\n      <ImageGallery\n        items={imagesInfo}\n        renderLeftNav={renderLeftNav}\n        renderRightNav={renderRightNav}\n        renderPlayPauseButton={renderPlayPauseButton}\n        renderFullscreenButton={renderFullscreenButton}\n        lazyLoad={true}\n      />\n    )\n  );\n};\n\nImageGalleryTemplate.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nexport default ImageGalleryTemplate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { getContent, getQueryStringResults } from '@plone/volto/actions';\nimport { Pagination } from 'semantic-ui-react';\nimport { Icon } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\nimport paginationLeftSVG from '@plone/volto/icons/left-key.svg';\nimport paginationRightSVG from '@plone/volto/icons/right-key.svg';\n\nconst ListingBody = ({ data, properties, intl, path, isEditMode }) => {\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const content = useSelector((state) => state.content.data);\n  const querystringResults = useSelector(\n    (state) => state.querystringsearch.subrequests,\n  );\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    if (data?.query?.length > 0) {\n      dispatch(\n        getQueryStringResults(path, { ...data, fullobjects: 1 }, data.block),\n      );\n    } else if (data.template === 'imageGallery' && data?.query?.length === 0) {\n      dispatch(\n        getQueryStringResults(\n          path,\n          {\n            ...data,\n            fullobjects: 1,\n            query: [\n              {\n                i: 'path',\n                o: 'plone.app.querystring.operation.string.relativePath',\n                v: '',\n              },\n            ],\n          },\n          data.block,\n        ),\n      );\n    }\n\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [data]);\n\n  const folderItems = content?.is_folderish ? content.items : [];\n\n  const loadingQuery =\n    data?.query?.length > 0 && querystringResults?.[data.block]?.loading;\n\n  const listingItems =\n    data?.query?.length > 0 && querystringResults?.[data.block]\n      ? (querystringResults &&\n          querystringResults[data.block] &&\n          querystringResults[data.block].items) ||\n        []\n      : folderItems;\n\n  const templateConfig = config.blocks.blocksConfig.listing.templates;\n\n  let templateName =\n    data.template && !!templateConfig[data.template]\n      ? data.template\n      : 'default';\n\n  const ListingBodyTemplate = templateConfig[templateName].template;\n\n  function handleContentPaginationChange(e, { activePage }) {\n    !isEditMode && window.scrollTo(0, 0);\n    setCurrentPage(activePage);\n    dispatch(getContent(path, null, null, activePage));\n  }\n\n  function handleQueryPaginationChange(e, { activePage }) {\n    !isEditMode && window.scrollTo(0, 0);\n    setCurrentPage(activePage);\n    dispatch(\n      getQueryStringResults(\n        path,\n        { ...data, fullobjects: 1 },\n        data.block,\n        activePage,\n      ),\n    );\n  }\n  const { settings } = config;\n\n  return (\n    <>\n      {listingItems?.length > 0 ? (\n        <>\n          <ListingBodyTemplate\n            items={listingItems}\n            isEditMode={isEditMode}\n            {...data}\n          />\n          {data?.query?.length === 0 &&\n            content?.items_total > settings.defaultPageSize && (\n              <div className=\"pagination-wrapper\">\n                <Pagination\n                  activePage={currentPage}\n                  totalPages={Math.ceil(\n                    content.items_total / settings.defaultPageSize,\n                  )}\n                  onPageChange={handleContentPaginationChange}\n                  firstItem={null}\n                  lastItem={null}\n                  prevItem={{\n                    content: <Icon name={paginationLeftSVG} size=\"18px\" />,\n                    icon: true,\n                    'aria-disabled': !content.batching.prev,\n                    className: !content.batching.prev ? 'disabled' : null,\n                  }}\n                  nextItem={{\n                    content: <Icon name={paginationRightSVG} size=\"18px\" />,\n                    icon: true,\n                    'aria-disabled': !content.batching.next,\n                    className: !content.batching.next ? 'disabled' : null,\n                  }}\n                />\n              </div>\n            )}\n          {data?.query?.length > 0 &&\n            querystringResults?.[data.block]?.total >\n              (data.b_size || settings.defaultPageSize) && (\n              <div className=\"pagination-wrapper\">\n                <Pagination\n                  activePage={currentPage}\n                  totalPages={Math.ceil(\n                    querystringResults[data.block].total /\n                      (data.b_size || settings.defaultPageSize),\n                  )}\n                  onPageChange={handleQueryPaginationChange}\n                  firstItem={null}\n                  lastItem={null}\n                  prevItem={{\n                    content: <Icon name={paginationLeftSVG} size=\"18px\" />,\n                    icon: true,\n                    'aria-disabled': !querystringResults[data.block].batching\n                      .prev,\n                    className: !querystringResults[data.block].batching.prev\n                      ? 'disabled'\n                      : null,\n                  }}\n                  nextItem={{\n                    content: <Icon name={paginationRightSVG} size=\"18px\" />,\n                    icon: true,\n                    'aria-disabled': !querystringResults[data.block].batching\n                      .next,\n                    className: !querystringResults[data.block].batching.next\n                      ? 'disabled'\n                      : null,\n                  }}\n                />\n              </div>\n            )}\n        </>\n      ) : isEditMode ? (\n        <div className=\"listing message\">\n          {data?.query?.length === 0 && (\n            <FormattedMessage\n              id=\"No items found in this container.\"\n              defaultMessage=\"No items found in this container.\"\n            />\n          )}\n          {!loadingQuery && data?.query?.length > 0 && (\n            <FormattedMessage\n              id=\"No results found.\"\n              defaultMessage=\"No results found.\"\n            />\n          )}\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nListingBody.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  path: PropTypes.string.isRequired,\n  isEditMode: PropTypes.bool,\n};\n\nexport default injectIntl(ListingBody);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Form, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toPairs, groupBy, map } from 'lodash';\nimport loadable from '@loadable/component';\nimport { CheckboxWidget, TextWidget } from '@plone/volto/components';\nimport { compose } from 'redux';\nimport { useSelector } from 'react-redux';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\n\nimport QuerystringWidget from '@plone/volto/components/manage/Blocks/Listing/QuerystringWidget';\n\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nconst Select = loadable(() => import('react-select'));\n\nconst messages = defineMessages({\n  Source: {\n    id: 'Source',\n    defaultMessage: 'Source',\n  },\n  depth: {\n    id: 'Depth',\n    defaultMessage: 'Depth',\n  },\n  SortOn: {\n    id: 'Sort on',\n    defaultMessage: 'Sort on',\n  },\n  reversedOrder: {\n    id: 'Reversed order',\n    defaultMessage: 'Reversed order',\n  },\n  limit: {\n    id: 'Results limit',\n    defaultMessage: 'Results limit',\n  },\n  itemBatchSize: {\n    id: 'Item batch size',\n    defaultMessage: 'Item batch size',\n  },\n  NoSelection: {\n    id: 'No selection',\n    defaultMessage: 'No selection',\n  },\n});\n\nconst ListingData = ({\n  data,\n  block,\n  onChangeBlock,\n  openObjectBrowser,\n  required = false,\n  intl,\n}) => {\n  const sortable_indexes = useSelector(\n    (state) => state.querystring.sortable_indexes,\n  );\n  const [depth, setDepth] = React.useState(data.depth || '');\n  const [limit, setLimit] = React.useState(data.limit || '');\n  const [itemBatchSize, setItemBatchSize] = React.useState(data.b_size || '');\n\n  return (\n    <>\n      <Segment className=\"form sidebar-listing-data\">\n        <QuerystringWidget\n          id=\"source\"\n          title={intl.formatMessage(messages.Source)}\n          required={false}\n          value={data.query || []}\n          onChange={(name, value) => {\n            onChangeBlock(block, {\n              ...data,\n              query: value,\n            });\n          }}\n        />\n\n        {data?.query?.filter((q) => q.i === 'path').length > 0 && (\n          <TextWidget\n            id=\"depth\"\n            title={intl.formatMessage(messages.depth)}\n            required={false}\n            value={depth}\n            onChange={(name, value) => {\n              onChangeBlock(block, {\n                ...data,\n                depth: value,\n              });\n              setDepth(value);\n            }}\n          />\n        )}\n\n        <Form.Field inline id=\"field-listingblock-sort-on\">\n          <Grid>\n            <Grid.Row stretched>\n              <Grid.Column width=\"4\">\n                <div className=\"wrapper\">\n                  <label htmlFor=\"select-listingblock-sort-on\">\n                    {intl.formatMessage(messages.SortOn)}\n                  </label>\n                </div>\n              </Grid.Column>\n              <Grid.Column width=\"8\">\n                <Select\n                  id=\"select-listingblock-sort-on\"\n                  name=\"select-listingblock-sort-on\"\n                  className=\"react-select-container\"\n                  classNamePrefix=\"react-select\"\n                  // placeholder=\"Select criteria\"\n                  options={[\n                    {\n                      label: intl.formatMessage(messages.NoSelection),\n                      value: '',\n                    },\n                    ...map(\n                      toPairs(\n                        groupBy(\n                          toPairs(sortable_indexes),\n                          (item) => item[1].group,\n                        ),\n                      ),\n                      (group) => ({\n                        label: group[0],\n                        options: map(group[1], (field) => ({\n                          label: field[1].title,\n                          value: field[0],\n                        })),\n                      }),\n                    ),\n                  ]}\n                  styles={customSelectStyles}\n                  theme={selectTheme}\n                  components={{ DropdownIndicator, Option }}\n                  value={{\n                    value: data.sort_on || '',\n                    label:\n                      data.sort_on && sortable_indexes\n                        ? sortable_indexes[data.sort_on]?.title\n                        : data.sort_on ||\n                          intl.formatMessage(messages.NoSelection),\n                  }}\n                  onChange={(field) => {\n                    onChangeBlock(block, {\n                      ...data,\n                      sort_on: field.value,\n                    });\n                  }}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Form.Field>\n\n        <CheckboxWidget\n          id=\"listingblock-sort-on-reverse\"\n          title={intl.formatMessage(messages.reversedOrder)}\n          value={data.sort_order ? data.sort_order : false}\n          onChange={(name, value) => {\n            onChangeBlock(block, {\n              ...data,\n              sort_order: value,\n            });\n          }}\n        />\n\n        <TextWidget\n          id=\"limit\"\n          title={intl.formatMessage(messages.limit)}\n          required={false}\n          value={limit}\n          onChange={(name, value) => {\n            onChangeBlock(block, {\n              ...data,\n              limit: value,\n            });\n            setLimit(value);\n          }}\n        />\n\n        <TextWidget\n          id=\"itembatchsize\"\n          title={intl.formatMessage(messages.itemBatchSize)}\n          required={false}\n          value={itemBatchSize}\n          onChange={(name, value) => {\n            onChangeBlock(block, {\n              ...data,\n              b_size: value,\n            });\n            setItemBatchSize(value);\n          }}\n        />\n      </Segment>\n    </>\n  );\n};\n\nListingData.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n};\n\nexport default compose(withObjectBrowser, injectIntl)(ListingData);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { TextWidget } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\n\nconst messages = defineMessages({\n  LinkTitle: {\n    id: 'Link title',\n    defaultMessage: 'Link Title',\n  },\n  LinkTo: {\n    id: 'Link to',\n    defaultMessage: 'Link to',\n  },\n});\n\nconst ListingMore = ({\n  data,\n  block,\n  onChangeBlock,\n  required = false,\n  intl,\n  openObjectBrowser,\n}) => {\n  return (\n    <>\n      <TextWidget\n        id=\"linkTitle\"\n        title={intl.formatMessage(messages.LinkTitle)}\n        required={false}\n        value={data.linkMore?.title}\n        onChange={(name, value) => {\n          onChangeBlock(block, {\n            ...data,\n            linkMore: {\n              ...data.linkMore,\n              title: value,\n            },\n          });\n        }}\n      />\n\n      <TextWidget\n        id=\"linkHref\"\n        title={intl.formatMessage(messages.LinkTo)}\n        required={false}\n        value={data.linkMore?.href}\n        icon={data.linkMore?.href ? clearSVG : navTreeSVG}\n        iconAction={\n          data.linkMore?.href\n            ? () => {\n                onChangeBlock(block, {\n                  ...data,\n                  linkMore: {\n                    ...data.linkMore,\n                    href: '',\n                  },\n                });\n              }\n            : () =>\n                openObjectBrowser({\n                  mode: 'link',\n                  onSelectItem: (url) => {\n                    onChangeBlock(block, {\n                      ...data,\n                      linkMore: {\n                        ...data.linkMore,\n                        href: url,\n                      },\n                    });\n                  },\n                })\n        }\n        onChange={(key, value) =>\n          onChangeBlock(block, {\n            ...data,\n            linkMore: {\n              ...data.linkMore,\n              href: value,\n            },\n          })\n        }\n      />\n    </>\n  );\n};\n\nListingMore.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n};\n\nexport default compose(withObjectBrowser, injectIntl)(ListingMore);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Segment, Accordion } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport {\n  ListingBlockData as ListingData,\n  ListingBlockStyle as ListingStyle,\n  ListingBlockMore as ListingMore,\n  Icon,\n} from '@plone/volto/components';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\n\nconst messages = defineMessages({\n  blockStyle: {\n    id: 'Block style',\n    defaultMessage: 'Block style',\n  },\n  content: {\n    id: 'Content',\n    defaultMessage: 'Content',\n  },\n  more: {\n    id: 'Link more',\n    defaultMessage: 'Link more',\n  },\n});\n\nconst ListingSidebar = (props) => {\n  const [activeAccIndex, setActiveAccIndex] = useState(1);\n\n  function handleAccClick(e, titleProps) {\n    const { index } = titleProps;\n    const newIndex = activeAccIndex === index ? -1 : index;\n\n    setActiveAccIndex(newIndex);\n  }\n\n  return (\n    <Segment.Group raised>\n      <header className=\"header pulled\">\n        <h2>\n          <FormattedMessage id=\"Listing\" defaultMessage=\"Listing\" />\n        </h2>\n      </header>\n\n      <Accordion fluid styled className=\"form\">\n        <ListingStyle {...props} />\n\n        <Accordion.Title\n          active={activeAccIndex === 1}\n          index={1}\n          onClick={handleAccClick}\n        >\n          {props.intl.formatMessage(messages.content)}\n          {activeAccIndex === 1 ? (\n            <Icon name={upSVG} size=\"20px\" />\n          ) : (\n            <Icon name={downSVG} size=\"20px\" />\n          )}\n        </Accordion.Title>\n        <Accordion.Content active={activeAccIndex === 1}>\n          <ListingData {...props} />\n        </Accordion.Content>\n\n        <Accordion.Title\n          active={activeAccIndex === 2}\n          index={2}\n          onClick={handleAccClick}\n        >\n          {props.intl.formatMessage(messages.more)}\n          {activeAccIndex === 2 ? (\n            <Icon name={upSVG} size=\"20px\" />\n          ) : (\n            <Icon name={downSVG} size=\"20px\" />\n          )}\n        </Accordion.Title>\n        <Accordion.Content active={activeAccIndex === 2}>\n          <ListingMore {...props} />\n        </Accordion.Content>\n      </Accordion>\n    </Segment.Group>\n  );\n};\n\nListingSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(ListingSidebar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TemplateWidget from '@plone/volto/components/manage/Blocks/Listing/TemplateWidget';\nimport config from '@plone/volto/registry';\n\nconst ListingStyle = ({ data, block, onChangeBlock, required = false }) => {\n  const templatesConfig = config.blocks.blocksConfig.listing.templates;\n\n  if (templatesConfig && Object.keys(templatesConfig).length > 1) {\n    return (\n      <div className=\"sidebar-listing-data listing-style\">\n        <TemplateWidget\n          data={data}\n          block={block}\n          onChangeBlock={onChangeBlock}\n          required={required}\n        />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nListingStyle.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n};\n\nexport default ListingStyle;\n","/**\n * QuerystringWidget component.\n * @module components/manage/Widgets/QuerystringWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Button, Form, Grid, Input, Label } from 'semantic-ui-react';\nimport { filter, remove, toPairs, groupBy, isEmpty, map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getQuerystring } from '@plone/volto/actions';\nimport { Icon } from '@plone/volto/components';\nimport { format, parse } from 'date-fns';\nimport loadable from '@loadable/component';\n\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst Select = loadable(() => import('react-select'));\n\nconst messages = defineMessages({\n  Criteria: {\n    id: 'Criteria',\n    defaultMessage: 'Criteria',\n  },\n  AddCriteria: {\n    id: 'Add criteria',\n    defaultMessage: 'Add criteria',\n  },\n  select: {\n    id: 'querystring-widget-select',\n    defaultMessage: 'Select…',\n  },\n});\n\n/**\n * QuerystringWidget component class.\n * @class QuerystringWidget\n * @extends Component\n */\nclass QuerystringWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    value: PropTypes.array,\n    focus: PropTypes.bool,\n    onChange: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    getQuerystring: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    error: [],\n    value: null,\n    onChange: null,\n    onEdit: null,\n    onDelete: null,\n    focus: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visual: false,\n    };\n    this.onChangeValue = this.onChangeValue.bind(this);\n    this.getWidget = this.getWidget.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.focus) {\n      this.node.focus();\n    }\n    this.props.getQuerystring();\n  }\n\n  /**\n   * Get correct widget\n   * @method getWidget\n   * @param {Object} row Row object.\n   * @param {number} index Row index.\n   * @returns {Object} Widget.\n   */\n  getWidget(row, index) {\n    const props = {\n      fluid: true,\n      value: row.v,\n      onChange: (data) => this.onChangeValue(index, data.target.value),\n    };\n    const values = this.props.indexes[row.i].values;\n\n    switch (this.props.indexes[row.i].operators[row.o].widget) {\n      case null:\n        return <span />;\n      case 'DateWidget':\n        return (\n          <Form.Field style={{ flex: '1 0 auto' }}>\n            <Input\n              type=\"date\"\n              {...props}\n              value={format(parse(row.v), 'YYYY-MM-DD')}\n            />\n          </Form.Field>\n        );\n      case 'DateRangeWidget': // 2 date inputs\n        return (\n          <React.Fragment>\n            <Form.Field style={{ flex: '1 0 auto' }}>\n              <Input\n                type=\"date\"\n                {...props}\n                value={format(parse(row.v[0]), 'YYYY-MM-DD')}\n                onChange={(data) =>\n                  this.onChangeValue(index, [data.target.value, row.v[1]])\n                }\n              />\n            </Form.Field>\n            <Form.Field style={{ flex: '1 0 auto' }}>\n              <Input\n                type=\"date\"\n                {...props}\n                value={format(parse(row.v[1]), 'YYYY-MM-DD')}\n                onChange={(data) =>\n                  this.onChangeValue(index, [row.v[0], data.target.value])\n                }\n              />\n            </Form.Field>\n          </React.Fragment>\n        );\n      case 'RelativeDateWidget':\n        return (\n          <Form.Field style={{ flex: '1 0 auto' }}>\n            <Input step={1} type=\"number\" {...props} />\n          </Form.Field>\n        );\n      case 'MultipleSelectionWidget':\n        return (\n          <Form.Field style={{ flex: '1 0 auto', maxWidth: '93%' }}>\n            <Select\n              {...props}\n              className=\"react-select-container\"\n              classNamePrefix=\"react-select\"\n              options={\n                values\n                  ? map(toPairs(values), (value) => ({\n                      label: value[1].title,\n                      value: value[0],\n                    }))\n                  : []\n              }\n              styles={customSelectStyles}\n              placeholder={this.props.intl.formatMessage(messages.select)}\n              theme={selectTheme}\n              components={{ DropdownIndicator, Option }}\n              onChange={(data) => {\n                this.onChangeValue(\n                  index,\n                  map(data, (item) => item.value),\n                );\n              }}\n              isMulti={true}\n              value={map(row.v, (value) => ({\n                label: values?.[value]?.title || value,\n                value,\n              }))}\n            />\n          </Form.Field>\n        );\n      case 'ReferenceWidget':\n      default:\n        // if (row.o === 'plone.app.querystring.operation.string.relativePath') {\n        //   props.onChange = data => this.onChangeValue(index, data.target.value);\n        // }\n        return (\n          <Form.Field style={{ flex: '1 0 auto' }}>\n            <Input {...props} />\n          </Form.Field>\n        );\n    }\n  }\n\n  /**\n   * Change value handler\n   * @method onChangeValue\n   * @param {Number} index Index of the row.\n   * @param {String|Array} value Value of the row.\n   * @returns {undefined}\n   */\n  onChangeValue(index, value) {\n    this.props.onChange(\n      this.props.id,\n      map(this.props.value, (row, i) =>\n        index === i\n          ? {\n              ...row,\n              v: value,\n            }\n          : row,\n      ),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      required,\n      description,\n      error,\n      value,\n      onChange,\n      onEdit,\n      indexes,\n      fieldSet,\n      intl,\n    } = this.props;\n\n    return (\n      <Form.Field\n        inline\n        required={required}\n        error={error.length > 0}\n        className={description ? 'help' : ''}\n        id={`${fieldSet || 'field'}-${id}`}\n      >\n        <Grid>\n          <Grid.Row stretched>\n            <Grid.Column width=\"12\">\n              <div className=\"simple-field-name\">\n                {intl.formatMessage(messages.Criteria)}\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row stretched>\n            <Grid.Column width=\"12\">\n              {indexes &&\n                !isEmpty(indexes) &&\n                map(value, (row, index) => (\n                  <Form.Group key={index}>\n                    <div className=\"main-fields-wrapper\">\n                      <Form.Field\n                        style={{ flex: '1 0 auto', marginRight: '10px' }}\n                      >\n                        <Select\n                          id={`field-${id}`}\n                          name={id}\n                          disabled={onEdit !== null}\n                          className=\"react-select-container\"\n                          classNamePrefix=\"react-select\"\n                          options={map(\n                            toPairs(\n                              groupBy(\n                                toPairs(indexes),\n                                (item) => item[1].group,\n                              ),\n                            ),\n                            (group) => ({\n                              label: group[0],\n                              options: map(group[1], (field) => ({\n                                label: field[1].title,\n                                value: field[0],\n                              })),\n                            }),\n                          )}\n                          styles={customSelectStyles}\n                          theme={selectTheme}\n                          placeholder={intl.formatMessage(messages.select)}\n                          components={{ DropdownIndicator, Option }}\n                          value={{\n                            value: row.i,\n                            label: indexes[row.i]?.title,\n                          }}\n                          onChange={(data) =>\n                            onChange(\n                              id,\n                              map(value, (curRow, curIndex) =>\n                                curIndex === index\n                                  ? {\n                                      i: data.value,\n                                      o: indexes[data.value].operations[0],\n                                      v: '',\n                                    }\n                                  : curRow,\n                              ),\n                            )\n                          }\n                        />\n                      </Form.Field>\n                      <Form.Field style={{ flex: '1 0 auto' }}>\n                        <Select\n                          id={`field-${id}`}\n                          name={id}\n                          disabled={onEdit !== null}\n                          className=\"react-select-container\"\n                          classNamePrefix=\"react-select\"\n                          options={map(\n                            indexes[row.i].operations,\n                            (operation) => ({\n                              value: operation,\n                              label: indexes[row.i].operators[operation].title,\n                            }),\n                          )}\n                          styles={customSelectStyles}\n                          theme={selectTheme}\n                          placeholder={intl.formatMessage(messages.select)}\n                          components={{ DropdownIndicator, Option }}\n                          value={{\n                            value: row.o,\n                            label: indexes[row.i].operators[row.o].title,\n                          }}\n                          onChange={(data) =>\n                            onChange(\n                              id,\n                              map(value, (curRow, curIndex) =>\n                                curIndex === index\n                                  ? {\n                                      i: row.i,\n                                      o: data.value,\n                                      v: '',\n                                    }\n                                  : curRow,\n                              ),\n                            )\n                          }\n                        />\n                      </Form.Field>\n                      {!this.props.indexes[row.i].operators[row.o].widget && (\n                        <Button\n                          onClick={(event) => {\n                            onChange(\n                              id,\n                              remove(value, (v, i) => i !== index),\n                            );\n                            event.preventDefault();\n                          }}\n                          style={{\n                            background: 'none',\n                            paddingRight: 0,\n                            paddingLeft: 0,\n                            margin: 0,\n                          }}\n                        >\n                          <Icon name={clearSVG} size=\"24px\" className=\"close\" />\n                        </Button>\n                      )}\n                    </div>\n                    {this.getWidget(row, index)}\n                    {this.props.indexes[row.i].operators[row.o].widget && (\n                      <Button\n                        onClick={(event) => {\n                          onChange(\n                            id,\n                            remove(value, (v, i) => i !== index),\n                          );\n                          event.preventDefault();\n                        }}\n                        style={{\n                          background: 'none',\n                          paddingRight: 0,\n                          paddingLeft: 0,\n                          margin: 0,\n                        }}\n                      >\n                        <Icon name={clearSVG} size=\"24px\" className=\"close\" />\n                      </Button>\n                    )}\n                  </Form.Group>\n                ))}\n              <Form.Group>\n                <Form.Field style={{ flex: '1 0 auto' }}>\n                  <Select\n                    id={`field-${id}`}\n                    name={id}\n                    disabled={onEdit !== null}\n                    className=\"react-select-container\"\n                    classNamePrefix=\"react-select\"\n                    placeholder={intl.formatMessage(messages.AddCriteria)}\n                    options={map(\n                      toPairs(\n                        groupBy(toPairs(indexes), (item) => item[1].group),\n                      ),\n                      (group) => ({\n                        label: group[0],\n                        options: map(\n                          filter(group[1], (item) => item[1].enabled),\n                          (field) => ({\n                            label: field[1].title,\n                            value: field[0],\n                          }),\n                        ),\n                      }),\n                    )}\n                    styles={customSelectStyles}\n                    theme={selectTheme}\n                    components={{ DropdownIndicator, Option }}\n                    value={null}\n                    onChange={(data) => {\n                      onChange(id, [\n                        ...(value || []),\n                        {\n                          i: data.value,\n                          o: indexes[data.value].operations[0],\n                          v: '',\n                        },\n                      ]);\n                    }}\n                  />\n                </Form.Field>\n              </Form.Group>\n              {map(error, (message) => (\n                <Label key={message} basic color=\"red\" pointing>\n                  {message}\n                </Label>\n              ))}\n            </Grid.Column>\n          </Grid.Row>\n          {description && (\n            <Grid.Row stretched>\n              <Grid.Column stretched width=\"12\">\n                <p className=\"help\">{description}</p>\n              </Grid.Column>\n            </Grid.Row>\n          )}\n        </Grid>\n      </Form.Field>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      indexes: state.querystring.indexes,\n    }),\n    { getQuerystring },\n  ),\n)(QuerystringWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ConditionalLink } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nimport DefaultImageSVG from '@plone/volto/components/manage/Blocks/Listing/default-image.svg';\nimport { isInternalURL } from '@plone/volto/helpers/Url/Url';\n\nconst SummaryTemplate = ({ items, linkMore, isEditMode }) => {\n  let link = null;\n  let href = linkMore?.href || '';\n\n  if (isInternalURL(href)) {\n    link = (\n      <ConditionalLink to={flattenToAppURL(href)} condition={!isEditMode}>\n        {linkMore?.title || href}\n      </ConditionalLink>\n    );\n  } else if (href) {\n    link = <a href={href}>{linkMore?.title || href}</a>;\n  }\n\n  const { settings } = config;\n\n  return (\n    <>\n      <div className=\"items\">\n        {items.map((item) => (\n          <div className=\"listing-item\" key={item['@id']}>\n            <ConditionalLink item={item} condition={!isEditMode}>\n              {!item[settings.listingPreviewImageField] && (\n                <img src={DefaultImageSVG} alt=\"\" />\n              )}\n              {item[settings.listingPreviewImageField] && (\n                <img\n                  src={flattenToAppURL(\n                    item[settings.listingPreviewImageField].scales.preview\n                      .download,\n                  )}\n                  alt={item.title}\n                />\n              )}\n              <div className=\"listing-body\">\n                <h3>{item.title ? item.title : item.id}</h3>\n                <p>{item.description}</p>\n              </div>\n            </ConditionalLink>\n          </div>\n        ))}\n      </div>\n\n      {link && <div className=\"footer\">{link}</div>}\n    </>\n  );\n};\n\nSummaryTemplate.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  linkMore: PropTypes.any,\n  isEditMode: PropTypes.bool,\n};\n\nexport default SummaryTemplate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Form } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport config from '@plone/volto/registry';\n\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nconst Select = loadable(() => import('react-select'));\n\nconst messages = defineMessages({\n  Template: {\n    id: 'Template',\n    defaultMessage: 'Template',\n  },\n});\n\nconst TemplateWidget = ({\n  data,\n  block,\n  onChangeBlock,\n  required = false,\n  intl,\n}) => {\n  const templatesConfig = config.blocks?.blocksConfig?.listing?.templates;\n  let value = data.template || 'default';\n\n  if (templatesConfig && Object.keys(templatesConfig).length > 1) {\n    return (\n      <Form.Field inline required={true} id=\"field-template\">\n        <Grid>\n          <Grid.Row stretched>\n            <Grid.Column width=\"4\">\n              <div className=\"wrapper\">\n                <label htmlFor=\"select-listingblock-template\">\n                  {intl.formatMessage(messages.Template)}\n                </label>\n              </div>\n            </Grid.Column>\n            <Grid.Column width=\"8\">\n              <Select\n                id=\"select-listingblock-template\"\n                name=\"select-listingblock-template\"\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n                options={Object.keys(templatesConfig).map((key) => {\n                  return {\n                    value: key,\n                    ...templatesConfig[key],\n                  };\n                })}\n                styles={customSelectStyles}\n                theme={selectTheme}\n                components={{ DropdownIndicator, Option }}\n                value={{\n                  value: value,\n                  label: templatesConfig[value].label,\n                }}\n                onChange={(field) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    template: field.value,\n                  });\n                }}\n              />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Form.Field>\n    );\n  }\n\n  return <></>;\n};\n\nTemplateWidget.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(TemplateWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport { ListingBlockBody as ListingBody } from '@plone/volto/components';\n\nconst View = ({ data, properties, block, path }) => {\n  return (\n    <div className={cx('block listing', data.template)}>\n      <ListingBody\n        data={data}\n        properties={properties}\n        block={block}\n        path={path}\n      />\n    </div>\n  );\n};\n\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string,\n};\n\nexport default View;\n","module.exports = __webpack_public_path__ + \"static/media/default-image.9451b251.svg\";","/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Input, Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\n\nimport { Icon, SidebarPortal, MapsSidebar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\n\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    id: 'Enter map Embed Code',\n    defaultMessage: 'Enter map Embed Code',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  full: {\n    id: 'Full',\n    defaultMessage: 'Full',\n  },\n  GoogleMapsEmbeddedBlock: {\n    id: 'Google Maps Embedded Block',\n    defaultMessage: 'Google Maps Embedded Block',\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.getSrc = this.getSrc.bind(this);\n    this.state = {\n      url: '',\n      error: null,\n    };\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n    this.onKeyDownVariantMenuForm = this.onKeyDownVariantMenuForm.bind(this);\n  }\n\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return (\n      this.props.selected ||\n      nextProps.selected ||\n      !isEqual(this.props.data, nextProps.data)\n    );\n  }\n\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n  onChangeUrl = ({ target }) => {\n    this.setState({\n      url: target.value,\n    });\n  };\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      url: this.getSrc(this.state.url),\n    });\n  }\n\n  /**\n   * Keydown handler on Variant Menu Form\n   * This is required since the ENTER key is already mapped to a onKeyDown\n   * event and needs to be overriden with a child onKeyDown.\n   * @method onKeyDownVariantMenuForm\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n  onKeyDownVariantMenuForm(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmitUrl();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      // TODO: Do something on ESC key\n    }\n  }\n\n  /**\n   * get getSrc handler\n   * @method getSrc\n   * @param {string} embed Embed HTML code from Google Maps share option\n   * @returns {string} Source URL\n   */\n  getSrc(embed) {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(embed, 'text/html');\n    const iframe = doc.getElementsByTagName('iframe');\n    if (iframe.length === 0) {\n      this.setState({ error: true });\n      return '';\n    }\n    this.setState({ error: false });\n    return iframe[0].src;\n  }\n\n  resetSubmitUrl = () => {\n    this.setState({\n      url: '',\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.MapsBlockInputPlaceholder);\n    return (\n      <div\n        className={cx(\n          'block maps align',\n          {\n            center: !Boolean(this.props.data.align),\n          },\n          this.props.data.align,\n        )}\n      >\n        {this.props.data.url ? (\n          <div\n            className={cx('maps-inner', {\n              'full-width': this.props.data.align === 'full',\n            })}\n          >\n            <iframe\n              title={this.props.intl.formatMessage(\n                messages.GoogleMapsEmbeddedBlock,\n              )}\n              src={this.props.data.url}\n              className=\"google-map\"\n              frameBorder=\"0\"\n              allowFullScreen\n            />\n          </div>\n        ) : (\n          <Message>\n            <center>\n              <img src={mapsBlockSVG} alt=\"\" />\n              <div className=\"toolbar-inner\">\n                <Input\n                  onKeyDown={this.onKeyDownVariantMenuForm}\n                  onChange={this.onChangeUrl}\n                  placeholder={placeholder}\n                  value={this.state.url}\n                  // Prevents propagation to the Dropzone and the opening\n                  // of the upload browser dialog\n                  onClick={(e) => e.stopPropagation()}\n                />\n                {this.state.url && (\n                  <Button.Group>\n                    <Button\n                      basic\n                      className=\"cancel\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        this.setState({ url: '' });\n                      }}\n                    >\n                      <Icon name={clearSVG} size=\"30px\" />\n                    </Button>\n                  </Button.Group>\n                )}\n                <Button.Group>\n                  <Button\n                    basic\n                    primary\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      this.onSubmitUrl();\n                    }}\n                  >\n                    <Icon name={aheadSVG} size=\"30px\" />\n                  </Button>\n                </Button.Group>\n              </div>\n              <div className=\"message-text\">\n                <FormattedMessage\n                  id=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n                  defaultMessage=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n                />\n                {this.state.error && (\n                  <div style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Embed code error, please follow the instructions and try again.\"\n                      defaultMessage=\"Embed code error, please follow the instructions and try again.\"\n                    />\n                  </div>\n                )}\n              </div>\n            </center>\n          </Message>\n        )}\n        <SidebarPortal selected={this.props.selected}>\n          <MapsSidebar {...this.props} resetSubmitUrl={this.resetSubmitUrl} />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Grid, Segment } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { Icon, TextWidget } from '@plone/volto/components';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\n\nimport globeSVG from '@plone/volto/icons/globe.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  LinkTo: {\n    id: 'Link to',\n    defaultMessage: 'Link to',\n  },\n  openLinkInNewTab: {\n    id: 'Open in a new tab',\n    defaultMessage: 'Open in a new tab',\n  },\n  MapsURL: {\n    id: 'Maps URL',\n    defaultMessage: 'Maps URL',\n  },\n});\n\nconst MapsSidebar = ({\n  data,\n  block,\n  onChangeBlock,\n  openObjectBrowser,\n  required = false,\n  resetSubmitUrl,\n  intl,\n}) => {\n  return (\n    <Segment.Group raised>\n      <header className=\"header pulled\">\n        <h2>\n          <FormattedMessage id=\"Map\" defaultMessage=\"Map\" />\n        </h2>\n      </header>\n\n      {!data.url && (\n        <>\n          <Segment className=\"sidebar-metadata-container\" secondary>\n            <FormattedMessage\n              id=\"No map selected\"\n              defaultMessage=\"No map selected\"\n            />\n            <Icon name={globeSVG} size=\"100px\" color=\"#b8c6c8\" />\n          </Segment>\n        </>\n      )}\n      {data.url && (\n        <>\n          <Segment className=\"form sidebar-image-data\">\n            {data.url && (\n              <TextWidget\n                id=\"external\"\n                title={intl.formatMessage(messages.MapsURL)}\n                required={false}\n                value={data.url}\n                icon={clearSVG}\n                iconAction={() => {\n                  resetSubmitUrl();\n                  onChangeBlock(block, {\n                    ...data,\n                    url: '',\n                  });\n                }}\n                onChange={() => {}}\n              />\n            )}\n            <Form.Field inline required={required}>\n              <Grid>\n                <Grid.Row>\n                  <Grid.Column width=\"4\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"field-align\">\n                        <FormattedMessage\n                          id=\"Alignment\"\n                          defaultMessage=\"Alignment\"\n                        />\n                      </label>\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width=\"8\" className=\"align-tools\">\n                    <AlignBlock\n                      align={data.align}\n                      onChangeBlock={onChangeBlock}\n                      data={data}\n                      block={block}\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          </Segment>\n        </>\n      )}\n    </Segment.Group>\n  );\n};\n\nMapsSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n  resetSubmitUrl: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(MapsSidebar);\n","/**\n * View map block.\n * @module components/manage/Blocks/Maps/View\n */\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nconst messages = defineMessages({\n  EmbededGoogleMaps: {\n    id: 'Embeded Google Maps',\n    defaultMessage: 'Embeded Google Maps',\n  },\n});\n\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\n\nconst View = ({ data, intl }) => (\n  <div\n    className={cx(\n      'block maps align',\n      {\n        center: !Boolean(data.align),\n      },\n      data.align,\n    )}\n  >\n    <div\n      className={cx('maps-inner', {\n        'full-width': data.align === 'full',\n      })}\n    >\n      <iframe\n        title={intl.formatMessage(messages.EmbededGoogleMaps)}\n        src={data.url}\n        className=\"google-map\"\n        frameBorder=\"0\"\n        allowFullScreen\n      />\n    </div>\n  </div>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default injectIntl(View);\n","module.exports = __webpack_public_path__ + \"static/media/block-maps.731e84f6.svg\";","/**\n * Edit text cell block.\n * @module components/manage/Blocks/Title/Cell\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Editor from 'draft-js-plugins-editor';\nimport { convertFromRaw, EditorState, RichUtils } from 'draft-js';\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\nimport isSoftNewlineEvent from 'draft-js/lib/isSoftNewlineEvent';\nimport { includes } from 'lodash';\nimport config from '@plone/volto/registry';\n\n/**\n * Edit text cell class.\n * @class Cell\n * @extends Component\n */\nclass Cell extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    onSelectCell: PropTypes.func.isRequired,\n    row: PropTypes.number,\n    cell: PropTypes.number,\n    value: PropTypes.object,\n    selected: PropTypes.bool,\n    onChange: PropTypes.func.isRequired,\n    isTableBlockSelected: PropTypes.bool,\n    disableNewBlocks: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Cell\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      editorState = EditorState.createWithContent(convertFromRaw(props.value));\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: config.settings.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = {\n        editorState,\n        inlineToolbarPlugin,\n      };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.node) {\n      const onFocus = this.node.editor._onFocus;\n      this.node.editor._onFocus = (event) => {\n        onFocus(event);\n        this.props.onSelectCell(this.props.row, this.props.cell);\n      };\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.isTableBlockSelected !== this.props.isTableBlockSelected &&\n      this.props.cell === 0 &&\n      this.props.row === 0\n    ) {\n      this.node.focus();\n    }\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    this.setState({ editorState }, () => {\n      this.props.onChange(this.props.row, this.props.cell, editorState);\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n    const { settings } = config;\n\n    return (\n      <div>\n        <Editor\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          plugins={[\n            this.state.inlineToolbarPlugin,\n            ...settings.richTextEditorPlugins,\n          ]}\n          blockRenderMap={settings.extendedBlockRenderMap}\n          blockStyleFn={settings.blockStyleFn}\n          customStyleMap={settings.customStyleMap}\n          handleReturn={(e) => {\n            if (isSoftNewlineEvent(e)) {\n              this.onChange(\n                RichUtils.insertSoftNewline(this.state.editorState),\n              );\n              return 'handled';\n            }\n            if (!this.props.detached && !this.props.disableNewBlocks) {\n              const selectionState = this.state.editorState.getSelection();\n              const anchorKey = selectionState.getAnchorKey();\n              const currentContent = this.state.editorState.getCurrentContent();\n              const currentContentBlock = currentContent.getBlockForKey(\n                anchorKey,\n              );\n              const blockType = currentContentBlock.getType();\n              if (!includes(settings.listBlockTypes, blockType)) {\n                this.props.onSelectBlock(\n                  this.props.onAddBlock(\n                    settings.defaultBlockType,\n                    this.props.index + 1,\n                  ),\n                );\n                return 'handled';\n              }\n              return 'un-handled';\n            }\n            return {};\n          }}\n          ref={(node) => {\n            this.node = node;\n          }}\n        />\n        <InlineToolbar />\n      </div>\n    );\n  }\n}\n\nexport default Cell;\n","/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { map, remove } from 'lodash';\nimport { Button, Segment, Table, Form } from 'semantic-ui-react';\nimport { convertToRaw } from 'draft-js';\nimport { Portal } from 'react-portal';\nimport cx from 'classnames';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport Cell from '@plone/volto/components/manage/Blocks/Table/Cell';\nimport { Field, Icon } from '@plone/volto/components';\n\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n\nconst getId = () => Math.floor(Math.random() * Math.pow(2, 24)).toString(32);\n\nconst valueToDraft = (value) => ({\n  blocks: [\n    {\n      data: {},\n      depth: 0,\n      entityRanges: [],\n      inlineStyleRanges: [],\n      key: getId(),\n      text: value,\n      type: 'unstyled',\n    },\n  ],\n  entityMap: {},\n});\n\nconst emptyCell = (type) => ({\n  key: getId(),\n  type: type || 'data',\n  value: valueToDraft(''),\n});\n\nconst emptyRow = (cells) => ({\n  key: getId(),\n  cells: map(cells, () => emptyCell()),\n});\n\nconst initialTable = () => ({\n  fixed: true,\n  compact: false,\n  basic: false,\n  celled: true,\n  inverted: false,\n  striped: false,\n  rows: [\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'header',\n          value: valueToDraft(''),\n        },\n        {\n          key: getId(),\n          type: 'header',\n          value: valueToDraft(''),\n        },\n      ],\n    },\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'data',\n          value: valueToDraft(''),\n        },\n        {\n          key: getId(),\n          type: 'data',\n          value: valueToDraft(''),\n        },\n      ],\n    },\n  ],\n});\n\nconst messages = defineMessages({\n  insertRowBefore: {\n    id: 'Insert row before',\n    defaultMessage: 'Insert row before',\n  },\n  insertRowAfter: {\n    id: 'Insert row after',\n    defaultMessage: 'Insert row after',\n  },\n  deleteRow: {\n    id: 'Delete row',\n    defaultMessage: 'Delete row',\n  },\n  insertColBefore: {\n    id: 'Insert col before',\n    defaultMessage: 'Insert col before',\n  },\n  insertColAfter: {\n    id: 'Insert col after',\n    defaultMessage: 'Insert col after',\n  },\n  deleteCol: {\n    id: 'Delete col',\n    defaultMessage: 'Delete col',\n  },\n  fixed: {\n    id: 'Fixed width table cells',\n    defaultMessage: 'Fixed width table cells',\n  },\n  compact: {\n    id: 'Make the table compact',\n    defaultMessage: 'Make the table compact',\n  },\n  basic: {\n    id: 'Reduce complexity',\n    defaultMessage: 'Reduce complexity',\n  },\n  celled: {\n    id: 'Divide each row into separate cells',\n    defaultMessage: 'Divide each row into separate cells',\n  },\n  inverted: {\n    id: 'Table color inverted',\n    defaultMessage: 'Table color inverted',\n  },\n  striped: {\n    id: 'Stripe alternate rows with color',\n    defaultMessage: 'Stripe alternate rows with color',\n  },\n  headerCell: {\n    id: 'Header cell',\n    defaultMessage: 'Header cell',\n  },\n});\n\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onInsertBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: {\n        row: 0,\n        cell: 0,\n      },\n      isClient: false,\n    };\n    this.onSelectCell = this.onSelectCell.bind(this);\n    this.onInsertRowBefore = this.onInsertRowBefore.bind(this);\n    this.onInsertRowAfter = this.onInsertRowAfter.bind(this);\n    this.onInsertColBefore = this.onInsertColBefore.bind(this);\n    this.onInsertColAfter = this.onInsertColAfter.bind(this);\n    this.onDeleteRow = this.onDeleteRow.bind(this);\n    this.onDeleteCol = this.onDeleteCol.bind(this);\n    this.onChangeCell = this.onChangeCell.bind(this);\n    this.toggleCellType = this.toggleCellType.bind(this);\n    this.toggleBool = this.toggleBool.bind(this);\n    this.toggleFixed = this.toggleFixed.bind(this);\n    this.toggleCompact = this.toggleCompact.bind(this);\n    this.toggleBasic = this.toggleBasic.bind(this);\n    this.toggleCelled = this.toggleCelled.bind(this);\n    this.toggleInverted = this.toggleInverted.bind(this);\n    this.toggleStriped = this.toggleStriped.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.data.table) {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        table: initialTable(),\n      });\n    }\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!nextProps.data.table) {\n      this.props.onChangeBlock(nextProps.block, {\n        ...nextProps.data,\n        table: initialTable(),\n      });\n    }\n  }\n\n  /**\n   * Select cell handler\n   * @method onSelectCell\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @returns {undefined}\n   */\n  onSelectCell(row, cell) {\n    this.setState({ selected: { row, cell } });\n  }\n\n  /**\n   * Change cell handler\n   * @method onChangeCell\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @param {Object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChangeCell(row, cell, editorState) {\n    const table = { ...this.props.data.table };\n    table.rows[row].cells[cell].value = convertToRaw(\n      editorState.getCurrentContent(),\n    );\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table,\n    });\n  }\n\n  /**\n   * Toggle cell type\n   * @method toggleCellType\n   * @returns {undefined}\n   */\n  toggleCellType() {\n    const table = { ...this.props.data.table };\n    let type =\n      table.rows[this.state.selected.row].cells[this.state.selected.cell].type;\n    table.rows[this.state.selected.row].cells[this.state.selected.cell].type =\n      type === 'header' ? 'data' : 'header';\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table,\n    });\n  }\n\n  /**\n   * Insert row before handler\n   * @method onInsertRowBefore\n   * @returns {undefined}\n   */\n  onInsertRowBefore(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row),\n        ],\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row + 1,\n        cell: this.state.selected.cell,\n      },\n    });\n  }\n\n  /**\n   * Insert row after handler\n   * @method onInsertRowAfter\n   * @returns {undefined}\n   */\n  onInsertRowAfter(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row + 1),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row + 1),\n        ],\n      },\n    });\n  }\n\n  /**\n   * Insert col before handler\n   * @method onInsertColBefore\n   * @returns {undefined}\n   */\n  onInsertColBefore(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell),\n          ],\n        })),\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row,\n        cell: this.state.selected.cell + 1,\n      },\n    });\n  }\n\n  /**\n   * Insert col after handler\n   * @method onInsertColAfter\n   * @returns {undefined}\n   */\n  onInsertColAfter(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell + 1),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell + 1),\n          ],\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete col handler\n   * @method onDeleteCol\n   * @returns {undefined}\n   */\n  onDeleteCol(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const table = this.props.data.table;\n\n    if (this.state.selected.cell === table.rows[0].cells.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row,\n          cell: this.state.selected.cell - 1,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row) => ({\n          ...row,\n          cells: remove(\n            row.cells,\n            (cell, index) => index !== this.state.selected.cell,\n          ),\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete row handler\n   * @method onDeleteRow\n   * @returns {undefined}\n   */\n  onDeleteRow(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    const table = this.props.data.table;\n\n    if (this.state.selected.row === table.rows.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row - 1,\n          cell: this.state.selected.cell,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: remove(\n          table.rows,\n          (row, index) => index !== this.state.selected.row,\n        ),\n      },\n    });\n  }\n\n  /**\n   * Toggle bool\n   * @method toggleBool\n   * @param {string} value Value to toggle.\n   * @returns {undefined}\n   */\n  toggleBool(value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        [value]: !table[value],\n      },\n    });\n  }\n\n  /**\n   * Toggle fixed\n   * @method toggleFixed\n   * @returns {undefined}\n   */\n  toggleFixed() {\n    this.toggleBool('fixed');\n  }\n\n  /**\n   * Toggle compact\n   * @method toggleCompact\n   * @returns {undefined}\n   */\n  toggleCompact() {\n    this.toggleBool('compact');\n  }\n\n  /**\n   * Toggle basic\n   * @method toggleBasic\n   * @returns {undefined}\n   */\n  toggleBasic() {\n    this.toggleBool('basic');\n  }\n\n  /**\n   * Toggle celled\n   * @method toggleCelled\n   * @returns {undefined}\n   */\n  toggleCelled() {\n    this.toggleBool('celled');\n  }\n\n  /**\n   * Toggle inverted\n   * @method toggleInverted\n   * @returns {undefined}\n   */\n  toggleInverted() {\n    this.toggleBool('inverted');\n  }\n\n  /**\n   * Toggle striped\n   * @method toggleStriped\n   * @returns {undefined}\n   */\n  toggleStriped() {\n    this.toggleBool('striped');\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (!this.state.isClient) {\n      return <div />;\n    }\n\n    return (\n      <div className={cx('block table', { selected: this.props.selected })}>\n        {this.props.selected && (\n          <div className=\"toolbar\">\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowBefore}\n                title={this.props.intl.formatMessage(messages.insertRowBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowBefore,\n                )}\n              >\n                <Icon name={rowBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowAfter}\n                title={this.props.intl.formatMessage(messages.insertRowAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowAfter,\n                )}\n              >\n                <Icon name={rowAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteRow}\n                disabled={\n                  this.props.data.table &&\n                  this.props.data.table.rows.length === 1\n                }\n                title={this.props.intl.formatMessage(messages.deleteRow)}\n                aria-label={this.props.intl.formatMessage(messages.deleteRow)}\n              >\n                <Icon name={rowDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColBefore}\n                title={this.props.intl.formatMessage(messages.insertColBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColBefore,\n                )}\n              >\n                <Icon name={colBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColAfter}\n                title={this.props.intl.formatMessage(messages.insertColAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColAfter,\n                )}\n              >\n                <Icon name={colAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteCol}\n                disabled={\n                  this.props.data.table &&\n                  this.props.data.table.rows[0].cells.length === 1\n                }\n                title={this.props.intl.formatMessage(messages.deleteCol)}\n                aria-label={this.props.intl.formatMessage(messages.deleteCol)}\n              >\n                <Icon name={colDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n          </div>\n        )}\n        {this.props.data.table && (\n          <Table\n            fixed={this.props.data.table.fixed}\n            compact={this.props.data.table.compact}\n            basic={this.props.data.table.basic ? 'very' : false}\n            celled={this.props.data.table.celled}\n            inverted={this.props.data.table.inverted}\n            striped={this.props.data.table.striped}\n          >\n            <Table.Body>\n              {map(this.props.data.table.rows, (row, rowIndex) => (\n                <Table.Row key={row.key}>\n                  {map(row.cells, (cell, cellIndex) => (\n                    <Table.Cell\n                      key={cell.key}\n                      as={cell.type === 'header' ? 'th' : 'td'}\n                      className={\n                        rowIndex === this.state.selected.row &&\n                        cellIndex === this.state.selected.cell &&\n                        this.props.selected\n                          ? 'selected'\n                          : ''\n                      }\n                    >\n                      <Cell\n                        value={cell.value}\n                        row={rowIndex}\n                        cell={cellIndex}\n                        onSelectCell={this.onSelectCell}\n                        selected={\n                          rowIndex === this.state.selected.row &&\n                          cellIndex === this.state.selected.cell\n                        }\n                        isTableBlockSelected={this.props.selected}\n                        onAddBlock={this.props.onAddBlock}\n                        onSelectBlock={this.props.onSelectBlock}\n                        onChange={this.onChangeCell}\n                        index={this.props.index}\n                        disableNewBlocks={this.props.data?.disableNewBlocks}\n                      />\n                    </Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        {this.props.selected && this.state.isClient && (\n          <Portal node={document.getElementById('sidebar-properties')}>\n            <Form\n              method=\"post\"\n              onSubmit={(event) => {\n                event.preventDefault();\n                event.stopPropagation();\n              }}\n            >\n              <Segment secondary attached>\n                <FormattedMessage id=\"Table\" defaultMessage=\"Table\" />\n              </Segment>\n              <Segment attached>\n                <Field\n                  id=\"fixed\"\n                  title={this.props.intl.formatMessage(messages.fixed)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.fixed}\n                  onChange={() => this.toggleFixed()}\n                />\n                <Field\n                  id=\"celled\"\n                  title={this.props.intl.formatMessage(messages.celled)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.celled}\n                  onChange={this.toggleCelled}\n                />\n                <Field\n                  id=\"striped\"\n                  title={this.props.intl.formatMessage(messages.striped)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.striped}\n                  onChange={this.toggleStriped}\n                />\n                <Field\n                  id=\"compact\"\n                  title={this.props.intl.formatMessage(messages.compact)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.compact}\n                  onChange={() => this.toggleCompact()}\n                />\n                <Field\n                  id=\"basic\"\n                  title={this.props.intl.formatMessage(messages.basic)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.basic}\n                  onChange={this.toggleBasic}\n                />\n                <Field\n                  id=\"inverted\"\n                  title={this.props.intl.formatMessage(messages.inverted)}\n                  type=\"boolean\"\n                  value={\n                    this.props.data.table && this.props.data.table.inverted\n                  }\n                  onChange={this.toggleInverted}\n                />\n              </Segment>\n              <Segment secondary attached>\n                <FormattedMessage id=\"Cell\" defaultMessage=\"Cell\" />\n              </Segment>\n              <Segment attached>\n                <Field\n                  id=\"celltype\"\n                  title={this.props.intl.formatMessage(messages.headerCell)}\n                  type=\"boolean\"\n                  value={\n                    this.props.data.table &&\n                    this.props.data.table.rows[this.state.selected.row].cells[\n                      this.state.selected.cell\n                    ].type === 'header'\n                  }\n                  onChange={this.toggleCellType}\n                />\n              </Segment>\n            </Form>\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n","/**\n * View table block.\n * @module components/manage/Blocks/Table/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport redraft from 'redraft';\nimport config from '@plone/volto/registry';\n\n/**\n * View table block class.\n * @class View\n * @extends Component\n */\nconst View = ({ data }) =>\n  data &&\n  data.table && (\n    <Table\n      fixed={data.table.fixed}\n      compact={data.table.compact}\n      basic={data.table.basic ? 'very' : false}\n      celled={data.table.celled}\n      inverted={data.table.inverted}\n      striped={data.table.striped}\n    >\n      <Table.Body>\n        {map(data.table.rows, (row) => (\n          <Table.Row key={row.key}>\n            {map(row.cells, (cell) => (\n              <Table.Cell\n                key={cell.key}\n                as={cell.type === 'header' ? 'th' : 'td'}\n              >\n                {cell.value && cell.value.blocks && cell.value.blocks[0].text\n                  ? redraft(\n                      cell.value,\n                      config.settings.ToHTMLRenderers,\n                      config.settings.ToHTMLOptions,\n                    )\n                  : '\\u00A0'}\n              </Table.Cell>\n            ))}\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport Editor from 'draft-js-plugins-editor';\nimport { convertFromRaw, convertToRaw, EditorState, RichUtils } from 'draft-js';\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\n\nimport isSoftNewlineEvent from 'draft-js/lib/isSoftNewlineEvent';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { includes, isEqual } from 'lodash';\nimport { filterEditorState } from 'draftjs-filters';\nimport config from '@plone/volto/registry';\n\nimport { Icon, BlockChooser } from '@plone/volto/components';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onInsertBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n    showRestricted: PropTypes.bool,\n    formTitle: PropTypes.string,\n    formDescription: PropTypes.string,\n    blocksConfig: PropTypes.objectOf(PropTypes.any),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.data && props.data.text) {\n        editorState = EditorState.createWithContent(\n          convertFromRaw(props.data.text),\n        );\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: config.settings.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = {\n        editorState,\n        inlineToolbarPlugin,\n        addNewBlockOpened: false,\n      };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n      setTimeout(this.node.focus, 0);\n    }\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!this.props.selected && nextProps.selected) {\n      // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n      setTimeout(this.node.focus, 0);\n      this.setState({\n        editorState: EditorState.moveFocusToEnd(this.state.editorState),\n      });\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.props.selected ||\n      !isEqual(this.props.data, nextProps.data) ||\n      !isEqual(this.state.editorState, nextState.editorState)\n    );\n  }\n\n  /**\n   * Component will unmount\n   * @method componentWillUnmount\n   * @returns {undefined}\n   */\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    const shouldFilterPaste =\n      editorState.getLastChangeType() === 'insert-fragment';\n\n    if (\n      !isEqual(\n        convertToRaw(editorState.getCurrentContent()),\n        convertToRaw(this.state.editorState.getCurrentContent()),\n      )\n    ) {\n      if (shouldFilterPaste) {\n        let filteredState = editorState;\n        filteredState = filterEditorState(\n          {\n            blocks: ['unordered-list-item', 'ordered-list-item'],\n            styles: ['BOLD', 'ITALIC'],\n            entities: [\n              {\n                type: 'LINK',\n                attributes: ['url'],\n              },\n            ],\n            whitespacedCharacters: [],\n          },\n          filteredState,\n        );\n        editorState = filteredState;\n      }\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        text: convertToRaw(editorState.getCurrentContent()),\n      });\n    }\n    this.setState({ editorState });\n  }\n\n  toggleAddNewBlock = (e) => {\n    e.preventDefault();\n    this.setState((state) => ({ addNewBlockOpened: !state.addNewBlockOpened }));\n  };\n\n  handleClickOutside = (e) => {\n    if (\n      this.props.blockNode.current &&\n      doesNodeContainClick(this.props.blockNode.current, e)\n    )\n      return;\n    this.setState(() => ({\n      addNewBlockOpened: false,\n    }));\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.formTitle ||\n      this.props.intl.formatMessage(messages.text);\n\n    const disableNewBlocks =\n      this.props.data?.disableNewBlocks || this.props.detached;\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n    const { settings } = config;\n\n    return (\n      <>\n        <Editor\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          plugins={[\n            this.state.inlineToolbarPlugin,\n            ...settings.richTextEditorPlugins,\n          ]}\n          blockRenderMap={settings.extendedBlockRenderMap}\n          blockStyleFn={settings.blockStyleFn}\n          customStyleMap={settings.customStyleMap}\n          placeholder={placeholder}\n          handleReturn={(e) => {\n            if (isSoftNewlineEvent(e)) {\n              this.onChange(\n                RichUtils.insertSoftNewline(this.state.editorState),\n              );\n              return 'handled';\n            }\n            if (!disableNewBlocks) {\n              const selectionState = this.state.editorState.getSelection();\n              const anchorKey = selectionState.getAnchorKey();\n              const currentContent = this.state.editorState.getCurrentContent();\n              const currentContentBlock = currentContent.getBlockForKey(\n                anchorKey,\n              );\n              const blockType = currentContentBlock.getType();\n              if (!includes(settings.listBlockTypes, blockType)) {\n                this.props.onSelectBlock(\n                  this.props.onAddBlock('text', this.props.index + 1),\n                );\n                return 'handled';\n              }\n              return 'un-handled';\n            }\n            return {};\n          }}\n          handleKeyCommand={(command, editorState) => {\n            if (this.props.data.required) {\n              return;\n            }\n            if (\n              command === 'backspace' &&\n              editorState.getCurrentContent().getPlainText().length === 0\n            ) {\n              this.props.onDeleteBlock(this.props.block, true);\n            }\n          }}\n          onUpArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const currentCursorPosition = selectionState.getStartOffset();\n\n            if (currentCursorPosition === 0) {\n              this.props.onFocusPreviousBlock(this.props.block, this.node);\n            }\n          }}\n          onDownArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const { editorState } = this.state;\n            const currentCursorPosition = selectionState.getStartOffset();\n            const blockLength = editorState\n              .getCurrentContent()\n              .getFirstBlock()\n              .getLength();\n\n            if (currentCursorPosition === blockLength) {\n              this.props.onFocusNextBlock(this.props.block, this.node);\n            }\n          }}\n          ref={(node) => {\n            this.node = node;\n          }}\n        />\n        <InlineToolbar />\n        {this.props.selected &&\n          !disableNewBlocks &&\n          !config.blocks.blocksConfig[\n            this.props.data?.['@type'] || 'text'\n          ].blockHasValue(this.props.data) && (\n            <Button\n              basic\n              icon\n              onClick={this.toggleAddNewBlock}\n              className=\"block-add-button\"\n            >\n              <Icon name={addSVG} className=\"block-add-button\" size=\"24px\" />\n            </Button>\n          )}\n        {this.state.addNewBlockOpened && (\n          <BlockChooser\n            onInsertBlock={(id, value) => {\n              this.setState((state) => ({\n                addNewBlockOpened: !state.addNewBlockOpened,\n              }));\n              this.props.onSelectBlock(this.props.onInsertBlock(id, value));\n            }}\n            currentBlock={this.props.block}\n            allowedBlocks={this.props.allowedBlocks}\n            showRestricted={this.props.showRestricted}\n            blocksConfig={this.props.blocksConfig}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n","import BlockSettingsSchema from '@plone/volto/components/manage/Blocks/Block/Schema';\n\nconst Schema = {\n  ...BlockSettingsSchema,\n  fieldsets: [\n    {\n      ...BlockSettingsSchema.fieldsets[0],\n      // fields: [\n      //   ...BlockSettingsSchema.fieldsets[0].fields,\n      //   'minLength',\n      //   'maxLength',\n      // ],\n    },\n  ],\n  properties: {\n    ...BlockSettingsSchema.properties,\n    /* TODO Enable when we have block validation inplace */\n    // minLength: {\n    //   title: 'Min length',\n    //   description: 'Minimum number of characters',\n    //   type: 'integer',\n    // },\n    // maxLength: {\n    //   title: 'Max length',\n    //   description: 'Maximum number of characters',\n    //   type: 'integer',\n    // },\n  },\n};\n\nexport default Schema;\n","/**\n * View text block.\n * @module components/manage/Blocks/Text/View\n */\n\nimport PropTypes from 'prop-types';\nimport redraft from 'redraft';\nimport React from 'react';\nimport config from '@plone/volto/registry';\n\n/**\n * View text block class.\n * @class View\n * @extends Component\n */\nconst View = ({ data }) =>\n  data.text ? (\n    redraft(\n      data.text,\n      config.settings.ToHTMLRenderers,\n      config.settings.ToHTMLOptions,\n    )\n  ) : (\n    <br />\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit title block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport { Map } from 'immutable';\nimport PropTypes from 'prop-types';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { isEqual } from 'lodash';\nimport { Editor, DefaultDraftBlockRenderMap, EditorState } from 'draft-js';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Type the title…',\n    defaultMessage: 'Type the title…',\n  },\n});\n\nconst blockRenderMap = Map({\n  unstyled: {\n    element: 'h1',\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\n/**\n * Edit title block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    properties: PropTypes.objectOf(PropTypes.any).isRequired,\n    selected: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired,\n    onChangeField: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    block: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.properties && props.properties.title) {\n        const contentState = stateFromHTML(props.properties.title);\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n      this.state = { editorState, focus: true };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.node) {\n      this.node.focus();\n      this.node._onBlur = () => this.setState({ focus: false });\n      this.node._onFocus = () => this.setState({ focus: true });\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || !isEqual(this.props.data, nextProps.data);\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.properties.title &&\n      this.props.properties.title !== nextProps.properties.title &&\n      !this.state.focus\n    ) {\n      const contentState = stateFromHTML(nextProps.properties.title);\n      this.setState({\n        editorState: nextProps.properties.title\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (!this.props.selected && nextProps.selected) {\n      this.node.focus();\n      this.setState({ focus: true });\n    }\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    this.setState({ editorState }, () => {\n      this.props.onChangeField(\n        'title',\n        editorState.getCurrentContent().getPlainText(),\n      );\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.title);\n\n    return (\n      <Editor\n        onChange={this.onChange}\n        editorState={this.state.editorState}\n        blockRenderMap={extendedBlockRenderMap}\n        handleReturn={() => {\n          if (this.props.data.disableNewBlocks) {\n            return 'handled';\n          }\n          this.props.onSelectBlock(\n            this.props.onAddBlock(\n              config.settings.defaultBlockType,\n              this.props.index + 1,\n            ),\n          );\n          return 'handled';\n        }}\n        placeholder={placeholder}\n        blockStyleFn={() => 'documentFirstHeading'}\n        onUpArrow={() => {\n          const selectionState = this.state.editorState.getSelection();\n          const { editorState } = this.state;\n          if (\n            editorState.getCurrentContent().getBlockMap().first().getKey() ===\n            selectionState.getFocusKey()\n          ) {\n            this.props.onFocusPreviousBlock(this.props.block, this.node);\n          }\n        }}\n        onDownArrow={() => {\n          const selectionState = this.state.editorState.getSelection();\n          const { editorState } = this.state;\n          if (\n            editorState.getCurrentContent().getBlockMap().last().getKey() ===\n            selectionState.getFocusKey()\n          ) {\n            this.props.onFocusNextBlock(this.props.block, this.node);\n          }\n        }}\n        ref={(node) => {\n          this.node = node;\n        }}\n      />\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n","/**\n * View title block.\n * @module components/manage/Blocks/Title/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * View title block class.\n * @class View\n * @extends Component\n */\nconst View = ({ properties }) => (\n  <h1 className=\"documentFirstHeading\">{properties.title}</h1>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","/**\n * Edit toc block.\n * @module components/manage/Blocks/ToC/Edit\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport View from '@plone/volto/components/manage/Blocks/ToC/View';\n\n/**\n * Edit toc block class.\n * @class Edit\n * @extends Component\n */\nconst Edit = ({ properties, data }) => (\n  <View properties={properties} data={data} />\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEdit.propTypes = {\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n  data: PropTypes.objectOf(PropTypes.any),\n};\n\nexport default Edit;\n","import BlockSettingsSchema from '@plone/volto/components/manage/Blocks/Block/Schema';\n\nconst Schema = {\n  ...BlockSettingsSchema,\n  properties: {\n    ...BlockSettingsSchema.properties,\n    placeholder: {\n      ...BlockSettingsSchema.properties.placeholder,\n      title: 'Title',\n      description: 'Table of contents heading text',\n    },\n  },\n};\n\nexport default Schema;\n","/**\n * View toc block.\n * @module components/manage/Blocks/ToC/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { map, filter } from 'lodash';\nimport { List } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\n\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\n\nconst messages = defineMessages({\n  text: {\n    id: 'Table of Contents',\n    defaultMessage: 'Table of Contents',\n  },\n});\n\n/**\n * View toc block class.\n * @class View\n * @extends Component\n */\nconst View = ({ properties, data, intl }) => {\n  const blocksFieldname = getBlocksFieldname(properties);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n  const placeholder = data?.placeholder || intl.formatMessage(messages.text);\n  return (\n    <div className=\"block table-of-contents\">\n      <h2>{placeholder}</h2>\n      <List bulleted>\n        {map(\n          filter(\n            map(\n              properties[blocksLayoutFieldname].items,\n              (id) => properties[blocksFieldname][id],\n            ),\n            (block) =>\n              block['@type'] === 'text' &&\n              block.text?.blocks[0].type.indexOf('header-') === 0,\n          ),\n          (block) => (\n            <List.Item\n              key={block.text.blocks[0].key}\n              className={block.text.blocks[0].type}\n            >\n              <AnchorLink href={`#${block.text.blocks[0].key}`}>\n                {block.text.blocks[0].text}\n              </AnchorLink>\n            </List.Item>\n          ),\n        )}\n      </List>\n    </div>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default React.memo(injectIntl(View));\n","/**\n * Edit video block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Input, Embed, Message } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\n\nimport { Icon, SidebarPortal, VideoSidebar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport videoBlockSVG from '@plone/volto/components/manage/Blocks/Video/block-video.svg';\nimport {\n  isInternalURL,\n  getParentUrl,\n  flattenToAppURL,\n} from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  VideoFormDescription: {\n    id: 'Specify a youtube video or playlist url',\n    defaultMessage: 'Specify a youtube video or playlist url',\n  },\n  VideoBlockInputPlaceholder: {\n    id: 'Type a Video (YouTube, Vimeo or mp4) URL',\n    defaultMessage: 'Type a Video (YouTube, Vimeo or mp4) URL',\n  },\n});\n\n/**\n * Edit video block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    this.onChangeUrl = this.onChangeUrl.bind(this);\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n    this.onKeyDownVariantMenuForm = this.onKeyDownVariantMenuForm.bind(this);\n    this.state = {\n      url: '',\n    };\n  }\n\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n  onChangeUrl({ target }) {\n    this.setState({\n      url: target.value,\n    });\n  }\n\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return (\n      this.props.selected ||\n      nextProps.selected ||\n      !isEqual(this.props.data, nextProps.data)\n    );\n  }\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      url: this.state.url,\n    });\n  }\n\n  resetSubmitUrl = () => {\n    this.setState({\n      url: '',\n    });\n  };\n\n  /**\n   * Keydown handler on Variant Menu Form\n   * This is required since the ENTER key is already mapped to a onKeyDown\n   * event and needs to be overriden with a child onKeyDown.\n   * @method onKeyDownVariantMenuForm\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n  onKeyDownVariantMenuForm(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmitUrl();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      // TODO: Do something on ESC key\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { data } = this.props;\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.VideoBlockInputPlaceholder);\n    return (\n      <div\n        className={cx(\n          'block video align',\n          {\n            selected: this.props.selected,\n            center: !Boolean(this.props.data.align),\n          },\n          this.props.data.align,\n        )}\n      >\n        {data.url ? (\n          <div\n            className={cx('video-inner', {\n              'full-width': this.props.data.align === 'full',\n            })}\n          >\n            {data.url.match('youtu') ? (\n              <>\n                {data.url.match('list') ? (\n                  data.preview_image ? (\n                    <Embed\n                      url={`https://www.youtube.com/embed/videoseries?list=${\n                        data.url.match(/^.*\\?list=(.*)$/)[1]\n                      }`}\n                      placeholder={\n                        isInternalURL(data.preview_image)\n                          ? `${flattenToAppURL(\n                              data.preview_image,\n                            )}/@@images/image`\n                          : data.preview_image\n                      }\n                      defaultActive\n                      autoplay={false}\n                    />\n                  ) : (\n                    <Embed\n                      url={`https://www.youtube.com/embed/videoseries?list=${\n                        data.url.match(/^.*\\?list=(.*)$/)[1]\n                      }`}\n                      icon=\"play\"\n                      defaultActive\n                      autoplay={false}\n                    />\n                  )\n                ) : data.preview_image ? (\n                  <Embed\n                    id={\n                      data.url.match(/.be\\//)\n                        ? data.url.match(/^.*\\.be\\/(.*)/)[1]\n                        : data.url.match(/^.*\\?v=(.*)$/)[1]\n                    }\n                    source=\"youtube\"\n                    placeholder={\n                      isInternalURL(data.preview_image)\n                        ? `${flattenToAppURL(\n                            data.preview_image,\n                          )}/@@images/image`\n                        : data.preview_image\n                    }\n                    icon=\"play\"\n                    autoplay={false}\n                  />\n                ) : (\n                  <Embed\n                    id={\n                      data.url.match(/.be\\//)\n                        ? data.url.match(/^.*\\.be\\/(.*)/)[1]\n                        : data.url.match(/^.*\\?v=(.*)$/)[1]\n                    }\n                    source=\"youtube\"\n                    icon=\"play\"\n                    defaultActive\n                    autoplay={false}\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <div className=\"ui blocker\" />\n                {data.url.match('vimeo') ? (\n                  data.preview_image ? (\n                    <Embed\n                      id={data.url.match(/^.*\\.com\\/(.*)/)[1]}\n                      source=\"vimeo\"\n                      placeholder={\n                        isInternalURL(data.preview_image)\n                          ? `${flattenToAppURL(\n                              data.preview_image,\n                            )}/@@images/image`\n                          : data.preview_image\n                      }\n                      icon=\"play\"\n                      autoplay={false}\n                    />\n                  ) : (\n                    <Embed\n                      id={data.url.match(/^.*\\.com\\/(.*)/)[1]}\n                      source=\"vimeo\"\n                      icon=\"play\"\n                      defaultActive\n                      autoplay={false}\n                    />\n                  )\n                ) : (\n                  <>\n                    <div className=\"ui blocker\" />\n                    {data.url.match('.mp4') ? (\n                      // eslint-disable-next-line jsx-a11y/media-has-caption\n                      <video\n                        src={\n                          isInternalURL(\n                            data.url.replace(\n                              getParentUrl(config.settings.apiPath),\n                              '',\n                            ),\n                          )\n                            ? `${data.url}/@@download/file`\n                            : data.url\n                        }\n                        controls\n                        poster={\n                          data.preview_image\n                            ? isInternalURL(data.preview_image)\n                              ? `${flattenToAppURL(\n                                  data.preview_image,\n                                )}/@@images/image`\n                              : data.preview_image\n                            : ''\n                        }\n                        type=\"video/mp4\"\n                      />\n                    ) : (\n                      <div>\n                        <Message>\n                          <center>\n                            <FormattedMessage\n                              id=\"Please enter a valid URL by deleting the block and adding a new video block.\"\n                              defaultMessage=\"Please enter a valid URL by deleting the block and adding a new video block.\"\n                            />\n                          </center>\n                        </Message>\n                      </div>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </div>\n        ) : (\n          <Message>\n            <center>\n              <img src={videoBlockSVG} alt=\"\" />\n              <div className=\"toolbar-inner\">\n                <Input\n                  onKeyDown={this.onKeyDownVariantMenuForm}\n                  onChange={this.onChangeUrl}\n                  placeholder={placeholder}\n                  value={this.state.url}\n                  // Prevents propagation to the Dropzone and the opening\n                  // of the upload browser dialog\n                  onClick={(e) => e.stopPropagation()}\n                />\n                {this.state.url && (\n                  <Button.Group>\n                    <Button\n                      basic\n                      className=\"cancel\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        this.setState({ url: '' });\n                      }}\n                    >\n                      <Icon name={clearSVG} size=\"30px\" />\n                    </Button>\n                  </Button.Group>\n                )}\n                <Button.Group>\n                  <Button\n                    basic\n                    primary\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      this.onSubmitUrl();\n                    }}\n                  >\n                    <Icon name={aheadSVG} size=\"30px\" />\n                  </Button>\n                </Button.Group>\n              </div>\n            </center>\n          </Message>\n        )}\n        <SidebarPortal selected={this.props.selected}>\n          <VideoSidebar {...this.props} resetSubmitUrl={this.resetSubmitUrl} />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Accordion, Grid, Segment } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { CheckboxWidget, Icon, TextWidget } from '@plone/volto/components';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\n\nimport videoSVG from '@plone/volto/icons/videocamera.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\n\nconst messages = defineMessages({\n  LinkTo: {\n    id: 'Link to',\n    defaultMessage: 'Link to',\n  },\n  openLinkInNewTab: {\n    id: 'Open in a new tab',\n    defaultMessage: 'Open in a new tab',\n  },\n  videoURL: {\n    id: 'Video URL',\n    defaultMessage: 'Video URL',\n  },\n  Preview_image: {\n    id: 'Preview Image URL',\n    defaultMessage: 'Preview Image URL',\n  },\n});\n\nconst VideoSidebar = ({\n  data,\n  block,\n  onChangeBlock,\n  openObjectBrowser,\n  required = false,\n  resetSubmitUrl,\n  intl,\n}) => {\n  const [activeAccIndex, setActiveAccIndex] = useState(0);\n\n  function handleAccClick(e, titleProps) {\n    const { index } = titleProps;\n    const newIndex = activeAccIndex === index ? -1 : index;\n\n    setActiveAccIndex(newIndex);\n  }\n\n  return (\n    <Segment.Group raised>\n      <header className=\"header pulled\">\n        <h2>\n          <FormattedMessage id=\"Video\" defaultMessage=\"Video\" />\n        </h2>\n      </header>\n\n      {!data.url && (\n        <>\n          <Segment className=\"sidebar-metadata-container\" secondary>\n            <FormattedMessage\n              id=\"No video selected\"\n              defaultMessage=\"No video selected\"\n            />\n            <Icon name={videoSVG} size=\"100px\" color=\"#b8c6c8\" />\n          </Segment>\n        </>\n      )}\n      {data.url && (\n        <>\n          <Segment className=\"form sidebar-image-data\">\n            {data.url && (\n              <>\n                <TextWidget\n                  id=\"external\"\n                  title={intl.formatMessage(messages.videoURL)}\n                  required={false}\n                  value={data.url}\n                  icon={clearSVG}\n                  iconAction={() => {\n                    resetSubmitUrl();\n                    onChangeBlock(block, {\n                      ...data,\n                      url: '',\n                    });\n                  }}\n                  onChange={() => {}}\n                />\n                <TextWidget\n                  id=\"video-preview-image\"\n                  title={intl.formatMessage(messages.Preview_image)}\n                  required={false}\n                  value={data.preview_image?.split('/').slice(-1)[0]}\n                  icon={data.preview_image ? clearSVG : navTreeSVG}\n                  iconAction={\n                    data.preview_image\n                      ? () => {\n                          onChangeBlock(block, {\n                            ...data,\n                            preview_image: '',\n                          });\n                        }\n                      : () =>\n                          openObjectBrowser({\n                            mode: 'image',\n                            dataName: 'preview_image',\n                          })\n                  }\n                  onChange={(id, value) => {\n                    onChangeBlock(block, {\n                      ...data,\n                      preview_image: value,\n                    });\n                  }}\n                />\n              </>\n            )}\n            <Form.Field inline required={required}>\n              <Grid>\n                <Grid.Row>\n                  <Grid.Column width=\"4\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"field-align\">\n                        <FormattedMessage\n                          id=\"Alignment\"\n                          defaultMessage=\"Alignment\"\n                        />\n                      </label>\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width=\"8\" className=\"align-tools\">\n                    <AlignBlock\n                      align={data.align}\n                      onChangeBlock={onChangeBlock}\n                      data={data}\n                      block={block}\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          </Segment>\n          {data.url.match('.mp4') && (\n            <Accordion fluid styled className=\"form\">\n              <Accordion.Title\n                active={activeAccIndex === 0}\n                index={0}\n                onClick={handleAccClick}\n              >\n                Link Settings\n                {activeAccIndex === 0 ? (\n                  <Icon name={upSVG} size=\"20px\" />\n                ) : (\n                  <Icon name={downSVG} size=\"20px\" />\n                )}\n              </Accordion.Title>\n              <Accordion.Content active={activeAccIndex === 0}>\n                <TextWidget\n                  id=\"link\"\n                  title={intl.formatMessage(messages.LinkTo)}\n                  required={false}\n                  value={data.href}\n                  icon={data.href ? clearSVG : navTreeSVG}\n                  iconAction={\n                    data.href\n                      ? () => {\n                          onChangeBlock(block, {\n                            ...data,\n                            href: '',\n                          });\n                        }\n                      : () => openObjectBrowser({ mode: 'link' })\n                  }\n                  onChange={(name, value) => {\n                    onChangeBlock(block, {\n                      ...data,\n                      href: value,\n                    });\n                  }}\n                />\n                <CheckboxWidget\n                  id=\"openLinkInNewTab\"\n                  title={intl.formatMessage(messages.openLinkInNewTab)}\n                  value={data.openLinkInNewTab ? data.openLinkInNewTab : false}\n                  onChange={(name, value) => {\n                    onChangeBlock(block, {\n                      ...data,\n                      openLinkInNewTab: value,\n                    });\n                  }}\n                />\n              </Accordion.Content>\n            </Accordion>\n          )}\n        </>\n      )}\n    </Segment.Group>\n  );\n};\n\nVideoSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n  resetSubmitUrl: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(VideoSidebar);\n","/**\n * View video block.\n * @module components/manage/Blocks/Video/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Embed } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport {\n  isInternalURL,\n  getParentUrl,\n  flattenToAppURL,\n} from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\n/**\n * View video block class.\n * @class View\n * @extends Component\n */\nconst View = ({ data }) => (\n  <div\n    className={cx(\n      'block video align',\n      {\n        center: !Boolean(data.align),\n      },\n      data.align,\n    )}\n  >\n    {data.url && (\n      <div\n        className={cx('video-inner', {\n          'full-width': data.align === 'full',\n        })}\n      >\n        {data.url.match('youtu') ? (\n          <>\n            {data.url.match('list') ? (\n              data.preview_image ? (\n                <Embed\n                  url={`https://www.youtube.com/embed/videoseries?list=${\n                    data.url.match(/^.*\\?list=(.*)$/)[1]\n                  }`}\n                  placeholder={\n                    isInternalURL(data.preview_image)\n                      ? `${flattenToAppURL(data.preview_image)}/@@images/image`\n                      : data.preview_image\n                  }\n                  defaultActive\n                  autoplay={false}\n                />\n              ) : (\n                <Embed\n                  url={`https://www.youtube.com/embed/videoseries?list=${\n                    data.url.match(/^.*\\?list=(.*)$/)[1]\n                  }`}\n                  icon=\"play\"\n                  defaultActive\n                  autoplay={false}\n                />\n              )\n            ) : data.preview_image ? (\n              <Embed\n                id={\n                  data.url.match(/.be\\//)\n                    ? data.url.match(/^.*\\.be\\/(.*)/)[1]\n                    : data.url.match(/^.*\\?v=(.*)$/)[1]\n                }\n                source=\"youtube\"\n                placeholder={\n                  isInternalURL(data.preview_image)\n                    ? `${flattenToAppURL(data.preview_image)}/@@images/image`\n                    : data.preview_image\n                }\n                icon=\"play\"\n                autoplay={false}\n              />\n            ) : (\n              <Embed\n                id={\n                  data.url.match(/.be\\//)\n                    ? data.url.match(/^.*\\.be\\/(.*)/)[1]\n                    : data.url.match(/^.*\\?v=(.*)$/)[1]\n                }\n                source=\"youtube\"\n                icon=\"play\"\n                defaultActive\n                autoplay={false}\n              />\n            )}\n          </>\n        ) : (\n          <>\n            {data.url.match('vimeo') ? (\n              data.preview_image ? (\n                <Embed\n                  id={data.url.match(/^.*\\.com\\/(.*)/)[1]}\n                  source=\"vimeo\"\n                  placeholder={\n                    isInternalURL(data.preview_image)\n                      ? `${flattenToAppURL(data.preview_image)}/@@images/image`\n                      : data.preview_image\n                  }\n                  icon=\"play\"\n                  autoplay={false}\n                />\n              ) : (\n                <Embed\n                  id={data.url.match(/^.*\\.com\\/(.*)/)[1]}\n                  source=\"vimeo\"\n                  icon=\"play\"\n                  defaultActive\n                  autoplay={false}\n                />\n              )\n            ) : (\n              <>\n                {data.url.match('.mp4') ? (\n                  // eslint-disable-next-line jsx-a11y/media-has-caption\n                  <video\n                    src={\n                      isInternalURL(\n                        data.url.replace(\n                          getParentUrl(config.settings.apiPath),\n                          '',\n                        ),\n                      )\n                        ? `${data.url}/@@download/file`\n                        : data.url\n                    }\n                    controls\n                    poster={\n                      data.preview_image\n                        ? isInternalURL(data.preview_image)\n                          ? `${flattenToAppURL(\n                              data.preview_image,\n                            )}/@@images/image`\n                          : data.preview_image\n                        : ''\n                    }\n                    type=\"video/mp4\"\n                  />\n                ) : (\n                  <div className=\"invalidVideoFormat\" />\n                )}\n              </>\n            )}\n          </>\n        )}\n      </div>\n    )}\n  </div>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n","module.exports = __webpack_public_path__ + \"static/media/block-video.832fa3ff.svg\";","import React from 'react';\nimport { UniversalLink } from '@plone/volto/components';\nimport PropTypes from 'prop-types';\n\nconst ConditionalLink = ({ condition, to, item, ...props }) => {\n  if (condition) {\n    return (\n      <UniversalLink href={to} item={item} {...props}>\n        {props.children}\n      </UniversalLink>\n    );\n  } else {\n    return props.children;\n  }\n};\n\nConditionalLink.propTypes = {\n  condition: PropTypes.bool,\n  to: PropTypes.string,\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    remoteUrl: PropTypes.string, //of plone @type 'Link'\n  }),\n  children: PropTypes.node,\n};\n\nexport default ConditionalLink;\n","/**\n * Contents component.\n * @module components/manage/Contents/Contents\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Portal } from 'react-portal';\nimport { Link } from 'react-router-dom';\nimport {\n  Button,\n  Confirm,\n  Container,\n  Dropdown,\n  Menu,\n  Input,\n  Segment,\n  Table,\n  Popup,\n  Loader,\n  Dimmer,\n} from 'semantic-ui-react';\nimport {\n  concat,\n  filter,\n  find,\n  indexOf,\n  keys,\n  map,\n  mapValues,\n  pull,\n} from 'lodash';\nimport move from 'lodash-move';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { asyncConnect } from '@plone/volto/helpers';\n\nimport {\n  searchContent,\n  cut,\n  copy,\n  copyContent,\n  deleteContent,\n  listActions,\n  moveContent,\n  orderContent,\n  sortContent,\n  updateColumnsContent,\n} from '@plone/volto/actions';\nimport Indexes, { defaultIndexes } from '@plone/volto/constants/Indexes';\nimport {\n  ContentsIndexHeader,\n  ContentsItem,\n  ContentsRenameModal,\n  ContentsUploadModal,\n  ContentsWorkflowModal,\n  ContentsTagsModal,\n  ContentsPropertiesModal,\n  Pagination,\n  Toolbar,\n  Toast,\n  Icon,\n  Unauthorized,\n} from '@plone/volto/components';\n\nimport ContentsBreadcrumbs from './ContentsBreadcrumbs';\nimport { Helmet, getBaseUrl } from '@plone/volto/helpers';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nimport backSVG from '@plone/volto/icons/back.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport tagSVG from '@plone/volto/icons/tag.svg';\nimport renameSVG from '@plone/volto/icons/rename.svg';\nimport semaphoreSVG from '@plone/volto/icons/semaphore.svg';\nimport uploadSVG from '@plone/volto/icons/upload.svg';\nimport propertiesSVG from '@plone/volto/icons/properties.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport zoomSVG from '@plone/volto/icons/zoom.svg';\nimport checkboxUncheckedSVG from '@plone/volto/icons/checkbox-unchecked.svg';\nimport checkboxCheckedSVG from '@plone/volto/icons/checkbox-checked.svg';\nimport checkboxIndeterminateSVG from '@plone/volto/icons/checkbox-indeterminate.svg';\nimport configurationSVG from '@plone/volto/icons/configuration-app.svg';\nimport sortDownSVG from '@plone/volto/icons/sort-down.svg';\nimport sortUpSVG from '@plone/volto/icons/sort-up.svg';\nimport downKeySVG from '@plone/volto/icons/down-key.svg';\nimport moreSVG from '@plone/volto/icons/more.svg';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  contents: {\n    id: 'Contents',\n    defaultMessage: 'Contents',\n  },\n  copy: {\n    id: 'Copy',\n    defaultMessage: 'Copy',\n  },\n  cut: {\n    id: 'Cut',\n    defaultMessage: 'Cut',\n  },\n  error: {\n    id: \"You can't paste this content here\",\n    defaultMessage: \"You can't paste this content here\",\n  },\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n  deleteConfirm: {\n    id: 'Do you really want to delete the following items?',\n    defaultMessage: 'Do you really want to delete the following items?',\n  },\n  loading: {\n    id: 'loading',\n    defaultMessage: 'Loading',\n  },\n  home: {\n    id: 'Home',\n    defaultMessage: 'Home',\n  },\n  filter: {\n    id: 'Filter…',\n    defaultMessage: 'Filter…',\n  },\n  messageCopied: {\n    id: 'Item(s) copied.',\n    defaultMessage: 'Item(s) copied.',\n  },\n  messageCut: {\n    id: 'Item(s) cut.',\n    defaultMessage: 'Item(s) cut.',\n  },\n  messageUpdate: {\n    id: 'Item(s) has been updated.',\n    defaultMessage: 'Item(s) has been updated.',\n  },\n  messageReorder: {\n    id: 'Item succesfully moved.',\n    defaultMessage: 'Item succesfully moved.',\n  },\n  messagePasted: {\n    id: 'Item(s) pasted.',\n    defaultMessage: 'Item(s) pasted.',\n  },\n  messageWorkflowUpdate: {\n    id: 'Item(s) state has been updated.',\n    defaultMessage: 'Item(s) state has been updated.',\n  },\n  paste: {\n    id: 'Paste',\n    defaultMessage: 'Paste',\n  },\n  properties: {\n    id: 'Properties',\n    defaultMessage: 'Properties',\n  },\n  rearrangeBy: {\n    id: 'Rearrange items by…',\n    defaultMessage: 'Rearrange items by…',\n  },\n  rename: {\n    id: 'Rename',\n    defaultMessage: 'Rename',\n  },\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  selected: {\n    id: '{count} selected',\n    defaultMessage: '{count} selected',\n  },\n  selectColumns: {\n    id: 'Select columns to show',\n    defaultMessage: 'Select columns to show',\n  },\n  sort: {\n    id: 'sort',\n    defaultMessage: 'sort',\n  },\n  state: {\n    id: 'State',\n    defaultMessage: 'State',\n  },\n  tags: {\n    id: 'Tags',\n    defaultMessage: 'Tags',\n  },\n  upload: {\n    id: 'Upload',\n    defaultMessage: 'Upload',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  publicationDate: {\n    id: 'Publication date',\n    defaultMessage: 'Publication date',\n  },\n  createdOn: {\n    id: 'Created on',\n    defaultMessage: 'Created on',\n  },\n  expirationDate: {\n    id: 'Expiration date',\n    defaultMessage: 'Expiration date',\n  },\n  id: {\n    id: 'ID',\n    defaultMessage: 'ID',\n  },\n  uid: {\n    id: 'UID',\n    defaultMessage: 'UID',\n  },\n  reviewState: {\n    id: 'Review state',\n    defaultMessage: 'Review state',\n  },\n  folder: {\n    id: 'Folder',\n    defaultMessage: 'Folder',\n  },\n  excludedFromNavigation: {\n    id: 'Excluded from navigation',\n    defaultMessage: 'Excluded from navigation',\n  },\n  objectSize: {\n    id: 'Object Size',\n    defaultMessage: 'Object Size',\n  },\n  lastCommentedDate: {\n    id: 'Last comment date',\n    defaultMessage: 'Last comment date',\n  },\n  totalComments: {\n    id: 'Total comments',\n    defaultMessage: 'Total comments',\n  },\n  creator: {\n    id: 'Creator',\n    defaultMessage: 'Creator',\n  },\n  endDate: {\n    id: 'End Date',\n    defaultMessage: 'End Date',\n  },\n  startDate: {\n    id: 'Start Date',\n    defaultMessage: 'Start Date',\n  },\n});\n\n/**\n * Contents class.\n * @class Contents\n * @extends Component\n */\nclass Contents extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    action: PropTypes.string,\n    source: PropTypes.arrayOf(PropTypes.string),\n    searchContent: PropTypes.func.isRequired,\n    cut: PropTypes.func.isRequired,\n    copy: PropTypes.func.isRequired,\n    copyContent: PropTypes.func.isRequired,\n    deleteContent: PropTypes.func.isRequired,\n    moveContent: PropTypes.func.isRequired,\n    orderContent: PropTypes.func.isRequired,\n    sortContent: PropTypes.func.isRequired,\n    updateColumnsContent: PropTypes.func.isRequired,\n    clipboardRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    deleteRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    searchRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        title: PropTypes.string,\n        description: PropTypes.string,\n      }),\n    ),\n    breadcrumbs: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    total: PropTypes.number.isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    items: [],\n    action: null,\n    source: null,\n    index: {\n      order: keys(Indexes),\n      values: mapValues(Indexes, (value, key) => ({\n        ...value,\n        selected: indexOf(defaultIndexes, key) !== -1,\n      })),\n      selectedCount: defaultIndexes.length + 1,\n    },\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsComponent\n   */\n  constructor(props) {\n    super(props);\n    this.onDeselect = this.onDeselect.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onSelectAll = this.onSelectAll.bind(this);\n    this.onSelectIndex = this.onSelectIndex.bind(this);\n    this.onSelectNone = this.onSelectNone.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onUploadOk = this.onUploadOk.bind(this);\n    this.onUploadCancel = this.onUploadCancel.bind(this);\n    this.onRenameOk = this.onRenameOk.bind(this);\n    this.onRenameCancel = this.onRenameCancel.bind(this);\n    this.onTagsOk = this.onTagsOk.bind(this);\n    this.onTagsCancel = this.onTagsCancel.bind(this);\n    this.onPropertiesOk = this.onPropertiesOk.bind(this);\n    this.onPropertiesCancel = this.onPropertiesCancel.bind(this);\n    this.onWorkflowOk = this.onWorkflowOk.bind(this);\n    this.onWorkflowCancel = this.onWorkflowCancel.bind(this);\n    this.onChangeFilter = this.onChangeFilter.bind(this);\n    this.onChangePage = this.onChangePage.bind(this);\n    this.onChangePageSize = this.onChangePageSize.bind(this);\n    this.onOrderIndex = this.onOrderIndex.bind(this);\n    this.onOrderItem = this.onOrderItem.bind(this);\n    this.onSortItems = this.onSortItems.bind(this);\n    this.onMoveToTop = this.onMoveToTop.bind(this);\n    this.onMoveToBottom = this.onMoveToBottom.bind(this);\n    this.cut = this.cut.bind(this);\n    this.copy = this.copy.bind(this);\n    this.delete = this.delete.bind(this);\n    this.upload = this.upload.bind(this);\n    this.rename = this.rename.bind(this);\n    this.tags = this.tags.bind(this);\n    this.properties = this.properties.bind(this);\n    this.workflow = this.workflow.bind(this);\n    this.paste = this.paste.bind(this);\n    this.fetchContents = this.fetchContents.bind(this);\n    this.orderTimeout = null;\n    this.state = {\n      selected: [],\n      showDelete: false,\n      showUpload: false,\n      showRename: false,\n      showTags: false,\n      showProperties: false,\n      showWorkflow: false,\n      itemsToDelete: [],\n      items: this.props.items,\n      filter: '',\n      currentPage: 0,\n      pageSize: 15,\n      index: this.props.index || {\n        order: keys(Indexes),\n        values: mapValues(Indexes, (value, key) => ({\n          ...value,\n          selected: indexOf(defaultIndexes, key) !== -1,\n        })),\n        selectedCount: defaultIndexes.length + 1,\n      },\n      sort_on: this.props.sort?.on || 'getObjPositionInParent',\n      sort_order: this.props.sort?.order || 'ascending',\n      isClient: false,\n    };\n    this.filterTimeout = null;\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.fetchContents();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      (this.props.clipboardRequest.loading &&\n        nextProps.clipboardRequest.loaded) ||\n      (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded) ||\n      (this.props.updateRequest.loading && nextProps.updateRequest.loaded)\n    ) {\n      this.fetchContents(nextProps.pathname);\n    }\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      this.props.toastify.toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.messageUpdate)}\n        />,\n      );\n    }\n    if (this.props.pathname !== nextProps.pathname) {\n      this.setState(\n        {\n          currentPage: 0,\n        },\n        () => this.fetchContents(nextProps.pathname),\n      );\n    }\n    if (this.props.searchRequest.loading && nextProps.searchRequest.loaded) {\n      this.setState({\n        items: nextProps.items,\n      });\n    }\n    if (\n      this.props.clipboardRequest.loading &&\n      nextProps.clipboardRequest.error\n    ) {\n      this.props.toastify.toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={this.props.intl.formatMessage(messages.error)}\n        />,\n      );\n    }\n\n    if (\n      this.props.clipboardRequest.loading &&\n      nextProps.clipboardRequest.loaded\n    ) {\n      this.props.toastify.toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.messagePasted)}\n        />,\n      );\n    }\n    if (this.props.orderRequest.loading && nextProps.orderRequest.loaded) {\n      this.props.toastify.toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.messageReorder)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * On deselect handler\n   * @method onDeselect\n   * @param {object} event Event object\n   * @param {string} value Value\n   * @returns {undefined}\n   */\n  onDeselect(event, { value }) {\n    this.setState({\n      selected: pull(this.state.selected, value),\n    });\n  }\n\n  /**\n   * On select handler\n   * @method onSelect\n   * @param {object} event Event object\n   * @returns {undefined}\n   */\n  onSelect(event, id) {\n    if (indexOf(this.state.selected, id) === -1) {\n      this.setState({\n        selected: concat(this.state.selected, id),\n      });\n    } else {\n      this.setState({\n        selected: pull(this.state.selected, id),\n      });\n    }\n  }\n\n  /**\n   * On select all handler\n   * @method onSelectAll\n   * @returns {undefined}\n   */\n  onSelectAll() {\n    this.setState({\n      selected: map(this.state.items, (item) => item['@id']),\n    });\n  }\n\n  /**\n   * On select none handler\n   * @method onSelectNone\n   * @returns {undefined}\n   */\n  onSelectNone() {\n    this.setState({\n      selected: [],\n    });\n  }\n\n  /**\n   * On select index\n   * @method onSelectIndex\n   * @param {object} event Event object.\n   * @param {string} value Index value.\n   * @returns {undefined}\n   */\n  onSelectIndex(event, { value }) {\n    let newIndex = {\n      ...this.state.index,\n      selectedCount:\n        this.state.index.selectedCount +\n        (this.state.index.values[value].selected ? -1 : 1),\n      values: mapValues(this.state.index.values, (indexValue, indexKey) => ({\n        ...indexValue,\n        selected:\n          indexKey === value ? !indexValue.selected : indexValue.selected,\n      })),\n    };\n    this.setState({\n      index: newIndex,\n    });\n    this.props.updateColumnsContent(getBaseUrl(this.props.pathname), newIndex);\n  }\n\n  /**\n   * On change filter\n   * @method onChangeFilter\n   * @param {object} event Event object.\n   * @param {string} value Filter value.\n   * @returns {undefined}\n   */\n  onChangeFilter(event, { value }) {\n    const self = this;\n    clearTimeout(self.filterTimeout);\n    this.setState(\n      {\n        filter: value,\n      },\n      () => {\n        self.filterTimeout = setTimeout(() => {\n          self.fetchContents();\n        }, 200);\n      },\n    );\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n  onChangePage(event, { value }) {\n    this.setState(\n      {\n        currentPage: value,\n      },\n      () => this.fetchContents(),\n    );\n  }\n\n  /**\n   * On change page size\n   * @method onChangePageSize\n   * @param {object} event Event object.\n   * @param {string} value Page size value.\n   * @returns {undefined}\n   */\n  onChangePageSize(event, { value }) {\n    this.setState(\n      {\n        pageSize: value,\n        currentPage: 0,\n      },\n      () => this.fetchContents(),\n    );\n  }\n\n  /**\n   * On order index\n   * @method onOrderIndex\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderIndex(index, delta) {\n    this.setState({\n      index: {\n        ...this.state.index,\n        order: move(this.state.index.order, index, index + delta),\n      },\n    });\n    this.props.updateColumnsContent(\n      getBaseUrl(this.props.pathname),\n      this.state.index,\n    );\n  }\n\n  /**\n   * On order item\n   * @method onOrderItem\n   * @param {string} id Item id\n   * @param {number} itemIndex Item index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderItem(id, itemIndex, delta, backend) {\n    if (backend) {\n      this.props.orderContent(\n        getBaseUrl(this.props.pathname),\n        id.replace(/^.*\\//, ''),\n        delta,\n      );\n    } else {\n      this.setState({\n        items: move(this.state.items, itemIndex, itemIndex + delta),\n      });\n    }\n  }\n\n  /**\n   * On sort items\n   * @method onSortItems\n   * @param {object} event Event object\n   * @param {string} value Item index\n   * @returns {undefined}\n   */\n  onSortItems(event, { value }) {\n    const values = value.split('|');\n    this.setState({\n      sort_on: values[0],\n      sort_order: values[1],\n    });\n    this.props.sortContent(\n      getBaseUrl(this.props.pathname),\n      values[0],\n      values[1],\n    );\n  }\n\n  /**\n   * On move to top\n   * @method onMoveToTop\n   * @param {object} event Event object\n   * @param {string} value Item index\n   * @returns {undefined}\n   */\n  onMoveToTop(event, { value }) {\n    this.onOrderItem(this.state.items[value]['@id'], value, -value, false);\n    this.onOrderItem(this.state.items[value]['@id'], value, -value, true);\n  }\n\n  /**\n   * On move to bottom\n   * @method onMoveToBottom\n   * @param {object} event Event object\n   * @param {string} value Item index\n   * @returns {undefined}\n   */\n  onMoveToBottom(event, { value }) {\n    this.onOrderItem(\n      this.state.items[value]['@id'],\n      value,\n      this.state.items.length - 1 - value,\n      false,\n    );\n    this.onOrderItem(\n      this.state.items[value]['@id'],\n      value,\n      this.state.items.length - 1 - value,\n      true,\n    );\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    this.props.deleteContent(this.state.itemsToDelete);\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n      selected: [],\n    });\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n    });\n  }\n\n  /**\n   * On upload ok\n   * @method onUploadOk\n   * @returns {undefined}\n   */\n  onUploadOk() {\n    this.fetchContents();\n    this.setState({\n      showUpload: false,\n    });\n  }\n\n  /**\n   * On upload cancel\n   * @method onUploadCancel\n   * @returns {undefined}\n   */\n  onUploadCancel() {\n    this.setState({\n      showUpload: false,\n    });\n  }\n\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n  onRenameOk() {\n    this.setState({\n      showRename: false,\n      selected: [],\n    });\n  }\n\n  /**\n   * On rename cancel\n   * @method onRenameCancel\n   * @returns {undefined}\n   */\n  onRenameCancel() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * On tags ok\n   * @method onTagsOk\n   * @returns {undefined}\n   */\n  onTagsOk() {\n    this.setState({\n      showTags: false,\n      selected: [],\n    });\n  }\n\n  /**\n   * On tags cancel\n   * @method onTagsCancel\n   * @returns {undefined}\n   */\n  onTagsCancel() {\n    this.setState({\n      showTags: false,\n    });\n  }\n\n  /**\n   * On properties ok\n   * @method onPropertiesOk\n   * @returns {undefined}\n   */\n  onPropertiesOk() {\n    this.setState({\n      showProperties: false,\n      selected: [],\n    });\n  }\n\n  /**\n   * On properties cancel\n   * @method onPropertiesCancel\n   * @returns {undefined}\n   */\n  onPropertiesCancel() {\n    this.setState({\n      showProperties: false,\n    });\n  }\n\n  /**\n   * On workflow ok\n   * @method onWorkflowOk\n   * @returns {undefined}\n   */\n  onWorkflowOk() {\n    this.fetchContents();\n    this.setState({\n      showWorkflow: false,\n      selected: [],\n    });\n    this.props.toastify.toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageWorkflowUpdate)}\n      />,\n    );\n  }\n\n  /**\n   * On workflow cancel\n   * @method onWorkflowCancel\n   * @returns {undefined}\n   */\n  onWorkflowCancel() {\n    this.setState({\n      showWorkflow: false,\n    });\n  }\n\n  /**\n   * Get field by id\n   * @method getFieldById\n   * @param {string} id Id of object\n   * @param {string} field Field of object\n   * @returns {string} Field of object\n   */\n  getFieldById(id, field) {\n    const item = find(this.state.items, { '@id': id });\n    return item ? item[field] : '';\n  }\n\n  /**\n   * Fetch contents handler\n   * @method fetchContents\n   * @param {string} pathname Pathname to fetch contents.\n   * @returns {undefined}\n   */\n  fetchContents(pathname) {\n    if (this.state.pageSize === 'All') {\n      this.props.searchContent(getBaseUrl(pathname || this.props.pathname), {\n        'path.depth': 1,\n        sort_on: this.state.sort_on,\n        sort_order: this.state.sort_order,\n        metadata_fields: '_all',\n        b_size: 100000000,\n        ...(this.state.filter && { SearchableText: `${this.state.filter}*` }),\n      });\n    } else {\n      this.props.searchContent(getBaseUrl(pathname || this.props.pathname), {\n        'path.depth': 1,\n        sort_on: this.state.sort_on,\n        sort_order: this.state.sort_order,\n        metadata_fields: '_all',\n        ...(this.state.filter && { SearchableText: `${this.state.filter}*` }),\n        b_size: this.state.pageSize,\n        b_start: this.state.currentPage * this.state.pageSize,\n      });\n    }\n  }\n\n  /**\n   * Cut handler\n   * @method cut\n   * @param {Object} event Event object.\n   * @param {string} value Value of the event.\n   * @returns {undefined}\n   */\n  cut(event, { value }) {\n    this.props.cut(value ? [value] : this.state.selected);\n    this.onSelectNone();\n    this.props.toastify.toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCut)}\n      />,\n    );\n  }\n\n  /**\n   * Copy handler\n   * @method copy\n   * @param {Object} event Event object.\n   * @param {string} value Value of the event.\n   * @returns {undefined}\n   */\n  copy(event, { value }) {\n    this.props.copy(value ? [value] : this.state.selected);\n    this.onSelectNone();\n    this.props.toastify.toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCopied)}\n      />,\n    );\n  }\n\n  /**\n   * Delete handler\n   * @method delete\n   * @param {Object} event Event object.\n   * @param {string} value Value of the event.\n   * @returns {undefined}\n   */\n  delete(event, { value }) {\n    this.setState({\n      showDelete: true,\n      itemsToDelete: value ? [value] : this.state.selected,\n    });\n  }\n\n  /**\n   * Upload handler\n   * @method upload\n   * @returns {undefined}\n   */\n  upload() {\n    this.setState({\n      showUpload: true,\n    });\n  }\n\n  /**\n   * Rename handler\n   * @method rename\n   * @returns {undefined}\n   */\n  rename() {\n    this.setState({\n      showRename: true,\n    });\n  }\n\n  /**\n   * Tags handler\n   * @method tags\n   * @returns {undefined}\n   */\n  tags() {\n    this.setState({\n      showTags: true,\n    });\n  }\n\n  /**\n   * Properties handler\n   * @method properties\n   * @returns {undefined}\n   */\n  properties() {\n    this.setState({\n      showProperties: true,\n    });\n  }\n\n  /**\n   * Workflow handler\n   * @method workflow\n   * @returns {undefined}\n   */\n  workflow() {\n    this.setState({\n      showWorkflow: true,\n    });\n  }\n\n  /**\n   * Paste handler\n   * @method paste\n   * @returns {undefined}\n   */\n  paste() {\n    if (this.props.action === 'copy') {\n      this.props.copyContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    if (this.props.action === 'cut') {\n      this.props.moveContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const selected = this.state.selected.length > 0;\n    const path = getBaseUrl(this.props.pathname);\n    const folderContentsAction = find(this.props.objectActions, {\n      id: 'folderContents',\n    });\n\n    const loading =\n      (this.props.clipboardRequest?.loading &&\n        !this.props.clipboardRequest?.error) ||\n      (this.props.deleteRequest?.loading && !this.props.deleteRequest?.error) ||\n      (this.props.updateRequest?.loading && !this.props.updateRequest?.error) ||\n      (this.props.orderRequest?.loading && !this.props.orderRequest?.error) ||\n      (this.props.searchRequest?.loading && !this.props.searchRequest?.error);\n\n    return this.props.token && this.props.objectActions.length > 0 ? (\n      <>\n        {folderContentsAction ? (\n          <Container id=\"page-contents\" className=\"folder-contents\">\n            <Dimmer.Dimmable as=\"div\" blurring dimmed={loading}>\n              <Dimmer active={loading} inverted>\n                <Loader indeterminate size=\"massive\">\n                  {this.props.intl.formatMessage(messages.loading)}\n                </Loader>\n              </Dimmer>\n\n              <Helmet\n                title={this.props.intl.formatMessage(messages.contents)}\n              />\n              <div className=\"container\">\n                <article id=\"content\">\n                  <Confirm\n                    open={this.state.showDelete}\n                    header={this.props.intl.formatMessage(\n                      messages.deleteConfirm,\n                    )}\n                    content={\n                      <div className=\"content\">\n                        <ul className=\"content\">\n                          {map(this.state.itemsToDelete, (item) => (\n                            <li key={item}>\n                              {this.getFieldById(item, 'title')}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    }\n                    onCancel={this.onDeleteCancel}\n                    onConfirm={this.onDeleteOk}\n                    size=\"mini\"\n                  />\n                  <ContentsUploadModal\n                    open={this.state.showUpload}\n                    onCancel={this.onUploadCancel}\n                    onOk={this.onUploadOk}\n                    pathname={getBaseUrl(this.props.pathname)}\n                  />\n                  <ContentsRenameModal\n                    open={this.state.showRename}\n                    onCancel={this.onRenameCancel}\n                    onOk={this.onRenameOk}\n                    items={map(this.state.selected, (item) => ({\n                      url: item,\n                      title: this.getFieldById(item, 'title'),\n                      id: this.getFieldById(item, 'id'),\n                    }))}\n                  />\n                  <ContentsTagsModal\n                    open={this.state.showTags}\n                    onCancel={this.onTagsCancel}\n                    onOk={this.onTagsOk}\n                    items={map(this.state.selected, (item) => ({\n                      url: item,\n                      subjects: this.getFieldById(item, 'Subject'),\n                    }))}\n                  />\n                  <ContentsPropertiesModal\n                    open={this.state.showProperties}\n                    onCancel={this.onPropertiesCancel}\n                    onOk={this.onPropertiesOk}\n                    items={this.state.selected}\n                  />\n                  {this.state.showWorkflow && (\n                    <ContentsWorkflowModal\n                      open={this.state.showWorkflow}\n                      onCancel={this.onWorkflowCancel}\n                      onOk={this.onWorkflowOk}\n                      items={this.state.selected}\n                    />\n                  )}\n                  <section id=\"content-core\">\n                    <Segment.Group raised>\n                      <Menu secondary attached className=\"top-menu\">\n                        <Menu.Menu className=\"top-menu-menu\">\n                          <Popup\n                            trigger={\n                              <Menu.Item\n                                icon\n                                as={Button}\n                                onClick={this.upload}\n                                className=\"upload\"\n                              >\n                                <Icon\n                                  name={uploadSVG}\n                                  color=\"#007eb1\"\n                                  size=\"24px\"\n                                  className=\"upload\"\n                                />\n                              </Menu.Item>\n                            }\n                            position=\"top center\"\n                            content={this.props.intl.formatMessage(\n                              messages.upload,\n                            )}\n                            size=\"mini\"\n                          />\n                        </Menu.Menu>\n                        <Menu.Menu className=\"top-menu-menu\">\n                          <Popup\n                            trigger={\n                              <Menu.Item\n                                icon\n                                as={Button}\n                                onClick={this.rename}\n                                disabled={!selected}\n                              >\n                                <Icon\n                                  name={renameSVG}\n                                  color={selected ? '#826a6a' : 'grey'}\n                                  size=\"24px\"\n                                  className=\"rename\"\n                                />\n                              </Menu.Item>\n                            }\n                            position=\"top center\"\n                            content={this.props.intl.formatMessage(\n                              messages.rename,\n                            )}\n                            size=\"mini\"\n                          />\n                          <Popup\n                            trigger={\n                              <Menu.Item\n                                icon\n                                as={Button}\n                                onClick={this.workflow}\n                                disabled={!selected}\n                              >\n                                <Icon\n                                  name={semaphoreSVG}\n                                  color={selected ? '#826a6a' : 'grey'}\n                                  size=\"24px\"\n                                  className=\"semaphore\"\n                                />\n                              </Menu.Item>\n                            }\n                            position=\"top center\"\n                            content={this.props.intl.formatMessage(\n                              messages.state,\n                            )}\n                            size=\"mini\"\n                          />\n                          <Popup\n                            trigger={\n                              <Menu.Item\n                                icon\n                                as={Button}\n                                onClick={this.tags}\n                                disabled={!selected}\n                              >\n                                <Icon\n                                  name={tagSVG}\n                                  color={selected ? '#826a6a' : 'grey'}\n                                  size=\"24px\"\n                                  className=\"tag\"\n                                />\n                              </Menu.Item>\n                            }\n                            position=\"top center\"\n                            content={this.props.intl.formatMessage(\n                              messages.tags,\n                            )}\n                            size=\"mini\"\n                          />\n\n                          <Popup\n                            trigger={\n                              <Menu.Item\n                                icon\n                                as={Button}\n                                onClick={this.properties}\n                                disabled={!selected}\n                              >\n                                <Icon\n                                  name={propertiesSVG}\n                                  color={selected ? '#826a6a' : 'grey'}\n                                  size=\"24px\"\n                                  className=\"properties\"\n                                />\n                              </Menu.Item>\n                            }\n                            position=\"top center\"\n                            content={this.props.intl.formatMessage(\n                              messages.properties,\n                            )}\n                            size=\"mini\"\n                          />\n                        </Menu.Menu>\n                        <Menu.Menu className=\"top-menu-menu\">\n                          <Popup\n                            trigger={\n                              <Menu.Item\n                                icon\n                                as={Button}\n                                onClick={this.cut}\n                                disabled={!selected}\n                              >\n                                <Icon\n                                  name={cutSVG}\n                                  color={selected ? '#826a6a' : 'grey'}\n                                  size=\"24px\"\n                                  className=\"cut\"\n                                />\n                              </Menu.Item>\n                            }\n                            position=\"top center\"\n                            content={this.props.intl.formatMessage(\n                              messages.cut,\n                            )}\n                            size=\"mini\"\n                          />\n                          <Popup\n                            trigger={\n                              <Menu.Item\n                                icon\n                                as={Button}\n                                onClick={this.copy}\n                                disabled={!selected}\n                              >\n                                <Icon\n                                  name={copySVG}\n                                  color={selected ? '#826a6a' : 'grey'}\n                                  size=\"24px\"\n                                  className=\"copy\"\n                                />\n                              </Menu.Item>\n                            }\n                            position=\"top center\"\n                            content={this.props.intl.formatMessage(\n                              messages.copy,\n                            )}\n                            size=\"mini\"\n                          />\n\n                          <Popup\n                            trigger={\n                              <Menu.Item\n                                icon\n                                as={Button}\n                                onClick={this.paste}\n                                disabled={!this.props.action}\n                              >\n                                <Icon\n                                  name={pasteSVG}\n                                  color={selected ? '#826a6a' : 'grey'}\n                                  size=\"24px\"\n                                  className=\"paste\"\n                                />\n                              </Menu.Item>\n                            }\n                            position=\"top center\"\n                            content={this.props.intl.formatMessage(\n                              messages.paste,\n                            )}\n                            size=\"mini\"\n                          />\n\n                          <Popup\n                            trigger={\n                              <Menu.Item\n                                icon\n                                as={Button}\n                                onClick={this.delete}\n                                disabled={!selected}\n                              >\n                                <Icon\n                                  name={deleteSVG}\n                                  color={selected ? '#e40166' : 'grey'}\n                                  size=\"24px\"\n                                  className=\"delete\"\n                                />\n                              </Menu.Item>\n                            }\n                            position=\"top center\"\n                            content={this.props.intl.formatMessage(\n                              messages.delete,\n                            )}\n                            size=\"mini\"\n                          />\n                        </Menu.Menu>\n                        <Menu.Menu\n                          position=\"right\"\n                          className=\"top-menu-searchbox\"\n                        >\n                          <div className=\"ui right aligned category search item\">\n                            <Input\n                              type=\"text\"\n                              transparent\n                              placeholder={this.props.intl.formatMessage(\n                                messages.filter,\n                              )}\n                              size=\"small\"\n                              value={this.state.filter}\n                              onChange={this.onChangeFilter}\n                            />\n                            <Icon\n                              name={zoomSVG}\n                              size=\"30px\"\n                              color=\"#007eb1\"\n                              className=\"zoom\"\n                            />\n                            <div className=\"results\" />\n                          </div>\n                        </Menu.Menu>\n                      </Menu>\n                      <Segment\n                        secondary\n                        attached\n                        className=\"contents-breadcrumbs\"\n                      >\n                        <ContentsBreadcrumbs items={this.props.breadcrumbs} />\n                        <Dropdown\n                          item\n                          icon={\n                            <Icon name={moreSVG} size=\"24px\" color=\"#826a6a\" />\n                          }\n                          className=\"right floating selectIndex\"\n                        >\n                          <Dropdown.Menu className=\"left\">\n                            <Dropdown.Header\n                              content={this.props.intl.formatMessage(\n                                messages.selectColumns,\n                              )}\n                            />\n                            <Dropdown.Menu scrolling>\n                              {map(\n                                filter(\n                                  this.state.index.order,\n                                  (index) => index !== 'sortable_title',\n                                ),\n                                (index) => (\n                                  <Dropdown.Item\n                                    key={index}\n                                    value={index}\n                                    onClick={this.onSelectIndex}\n                                    className=\"iconAlign\"\n                                  >\n                                    {this.state.index.values[index].selected ? (\n                                      <Icon\n                                        name={checkboxCheckedSVG}\n                                        size=\"24px\"\n                                        color=\"#007eb1\"\n                                        className={\n                                          this.state.index.values[index].label\n                                        }\n                                      />\n                                    ) : (\n                                      <Icon\n                                        name={checkboxUncheckedSVG}\n                                        className={\n                                          this.state.index.values[index].label\n                                        }\n                                        size=\"24px\"\n                                      />\n                                    )}\n                                    <span>\n                                      {' '}\n                                      {this.props.intl.formatMessage({\n                                        id: this.state.index.values[index]\n                                          .label,\n                                        defaultMessage: this.state.index.values[\n                                          index\n                                        ].label,\n                                      })}\n                                    </span>\n                                  </Dropdown.Item>\n                                ),\n                              )}\n                            </Dropdown.Menu>\n                          </Dropdown.Menu>\n                        </Dropdown>\n                      </Segment>\n                      <Table selectable compact singleLine attached>\n                        <Table.Header>\n                          <Table.Row>\n                            <Table.HeaderCell>\n                              <Dropdown\n                                trigger={\n                                  <Icon\n                                    name={configurationSVG}\n                                    size=\"24px\"\n                                    color=\"#826a6a\"\n                                    className=\"configuration-svg\"\n                                  />\n                                }\n                                className=\"sort-icon\"\n                                aria-label={this.props.intl.formatMessage(\n                                  messages.sort,\n                                )}\n                                icon={null}\n                                simple\n                              >\n                                <Dropdown.Menu>\n                                  <Dropdown.Header\n                                    content={this.props.intl.formatMessage(\n                                      messages.rearrangeBy,\n                                    )}\n                                  />\n                                  {map(\n                                    [\n                                      'id',\n                                      'sortable_title',\n                                      'EffectiveDate',\n                                      'CreationDate',\n                                      'ModificationDate',\n                                      'portal_type',\n                                    ],\n                                    (index) => (\n                                      <Dropdown.Item\n                                        key={index}\n                                        className={`sort_${index} icon-align`}\n                                      >\n                                        <Icon name={downKeySVG} size=\"24px\" />\n                                        <FormattedMessage\n                                          id={Indexes[index].label}\n                                        />\n                                        <Dropdown.Menu>\n                                          <Dropdown.Item\n                                            onClick={this.onSortItems}\n                                            value={`${Indexes[index].sort_on}|ascending`}\n                                            className={`sort_${Indexes[index].sort_on}_ascending icon-align`}\n                                          >\n                                            <Icon\n                                              name={sortDownSVG}\n                                              size=\"24px\"\n                                            />{' '}\n                                            <FormattedMessage\n                                              id=\"Ascending\"\n                                              defaultMessage=\"Ascending\"\n                                            />\n                                          </Dropdown.Item>\n                                          <Dropdown.Item\n                                            onClick={this.onSortItems}\n                                            value={`${Indexes[index].sort_on}|descending`}\n                                            className={`sort_${Indexes[index].sort_on}_descending icon-align`}\n                                          >\n                                            <Icon\n                                              name={sortUpSVG}\n                                              size=\"24px\"\n                                            />{' '}\n                                            <FormattedMessage\n                                              id=\"Descending\"\n                                              defaultMessage=\"Descending\"\n                                            />\n                                          </Dropdown.Item>\n                                        </Dropdown.Menu>\n                                      </Dropdown.Item>\n                                    ),\n                                  )}\n                                </Dropdown.Menu>\n                              </Dropdown>\n                            </Table.HeaderCell>\n                            <Table.HeaderCell>\n                              <Dropdown\n                                trigger={\n                                  <Icon\n                                    name={\n                                      this.state.selected.length === 0\n                                        ? checkboxUncheckedSVG\n                                        : this.state.selected.length ===\n                                          this.state.items.length\n                                        ? checkboxCheckedSVG\n                                        : checkboxIndeterminateSVG\n                                    }\n                                    color={\n                                      this.state.selected.length > 0\n                                        ? '#007eb1'\n                                        : '#826a6a'\n                                    }\n                                    size=\"24px\"\n                                  />\n                                }\n                                icon={null}\n                              >\n                                <Dropdown.Menu>\n                                  <Dropdown.Header\n                                    content={this.props.intl.formatMessage(\n                                      messages.select,\n                                    )}\n                                  />\n                                  <Dropdown.Item onClick={this.onSelectAll}>\n                                    <Icon\n                                      name={checkboxCheckedSVG}\n                                      color=\"#007eb1\"\n                                      size=\"24px\"\n                                    />{' '}\n                                    <FormattedMessage\n                                      id=\"All\"\n                                      defaultMessage=\"All\"\n                                    />\n                                  </Dropdown.Item>\n                                  <Dropdown.Item onClick={this.onSelectNone}>\n                                    <Icon\n                                      name={checkboxUncheckedSVG}\n                                      size=\"24px\"\n                                    />{' '}\n                                    <FormattedMessage\n                                      id=\"None\"\n                                      defaultMessage=\"None\"\n                                    />\n                                  </Dropdown.Item>\n                                  <Dropdown.Divider />\n                                  <Dropdown.Header\n                                    content={this.props.intl.formatMessage(\n                                      messages.selected,\n                                      { count: this.state.selected.length },\n                                    )}\n                                  />\n                                  <Input\n                                    icon={<Icon name={zoomSVG} size=\"24px\" />}\n                                    iconPosition=\"left\"\n                                    className=\"search\"\n                                    placeholder={this.props.intl.formatMessage(\n                                      messages.filter,\n                                    )}\n                                  />\n                                  <Dropdown.Menu scrolling>\n                                    {map(this.state.selected, (item) => (\n                                      <Dropdown.Item\n                                        key={item}\n                                        value={item}\n                                        onClick={this.onDeselect}\n                                      >\n                                        <Icon\n                                          name={deleteSVG}\n                                          color=\"#e40166\"\n                                          size=\"24px\"\n                                        />{' '}\n                                        {this.getFieldById(item, 'title')}\n                                      </Dropdown.Item>\n                                    ))}\n                                  </Dropdown.Menu>\n                                </Dropdown.Menu>\n                              </Dropdown>\n                            </Table.HeaderCell>\n                            <Table.HeaderCell\n                              width={Math.ceil(\n                                16 / this.state.index.selectedCount,\n                              )}\n                            >\n                              <FormattedMessage\n                                id=\"Title\"\n                                defaultMessage=\"Title\"\n                              />\n                            </Table.HeaderCell>\n                            {map(\n                              this.state.index.order,\n                              (index, order) =>\n                                this.state.index.values[index].selected && (\n                                  <ContentsIndexHeader\n                                    key={index}\n                                    width={Math.ceil(\n                                      16 / this.state.index.selectedCount,\n                                    )}\n                                    label={this.state.index.values[index].label}\n                                    order={order}\n                                    onOrderIndex={this.onOrderIndex}\n                                  />\n                                ),\n                            )}\n                            <Table.HeaderCell textAlign=\"right\">\n                              <FormattedMessage\n                                id=\"Actions\"\n                                defaultMessage=\"Actions\"\n                              />\n                            </Table.HeaderCell>\n                          </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                          {this.state.items.map((item, order) => (\n                            <ContentsItem\n                              key={item['@id']}\n                              item={item}\n                              order={order}\n                              selected={\n                                indexOf(this.state.selected, item['@id']) !== -1\n                              }\n                              onClick={this.onSelect}\n                              indexes={filter(\n                                map(this.state.index.order, (index) => ({\n                                  id: index,\n                                  type: this.state.index.values[index].type,\n                                })),\n                                (index) =>\n                                  this.state.index.values[index.id].selected,\n                              )}\n                              onCut={this.cut}\n                              onCopy={this.copy}\n                              onDelete={this.delete}\n                              onOrderItem={this.onOrderItem}\n                              onMoveToTop={this.onMoveToTop}\n                              onMoveToBottom={this.onMoveToBottom}\n                            />\n                          ))}\n                        </Table.Body>\n                      </Table>\n\n                      <div className=\"contents-pagination\">\n                        <Pagination\n                          current={this.state.currentPage}\n                          total={Math.ceil(\n                            this.props.total / this.state.pageSize,\n                          )}\n                          pageSize={this.state.pageSize}\n                          pageSizes={[15, 30, 50, 'All']}\n                          onChangePage={this.onChangePage}\n                          onChangePageSize={this.onChangePageSize}\n                        />\n                      </div>\n                    </Segment.Group>\n                  </section>\n                </article>\n              </div>\n              {this.state.isClient && (\n                <Portal node={document.getElementById('toolbar')}>\n                  <Toolbar\n                    pathname={this.props.pathname}\n                    inner={\n                      <Link\n                        to={`${path}`}\n                        aria-label={this.props.intl.formatMessage(\n                          messages.back,\n                        )}\n                      >\n                        <Icon\n                          name={backSVG}\n                          className=\"contents circled\"\n                          size=\"30px\"\n                          title={this.props.intl.formatMessage(messages.back)}\n                        />\n                      </Link>\n                    }\n                  />\n                </Portal>\n              )}\n            </Dimmer.Dimmable>\n          </Container>\n        ) : (\n          <Unauthorized staticContext={this.props.staticContext} />\n        )}\n      </>\n    ) : (\n      <Unauthorized staticContext={this.props.staticContext} />\n    );\n  }\n}\n\nexport const __test__ = compose(\n  injectIntl,\n  injectLazyLibs(['toastify']),\n  connect(\n    (store, props) => {\n      return {\n        token: store.userSession.token,\n        items: store.search.items,\n        sort: store.content.update.sort,\n        index: store.content.updatecolumns.idx,\n        breadcrumbs: store.breadcrumbs.items,\n        total: store.search.total,\n        searchRequest: {\n          loading: store.search.loading,\n          loaded: store.search.loaded,\n        },\n        pathname: props.location.pathname,\n        action: store.clipboard.action,\n        source: store.clipboard.source,\n        clipboardRequest: store.clipboard.request,\n        deleteRequest: store.content.delete,\n        updateRequest: store.content.update,\n        objectActions: store.actions.actions.object,\n        orderRequest: store.content.order,\n      };\n    },\n    {\n      searchContent,\n      cut,\n      copy,\n      copyContent,\n      deleteContent,\n      listActions,\n      moveContent,\n      orderContent,\n      sortContent,\n      updateColumnsContent,\n    },\n  ),\n)(Contents);\n\nexport default compose(\n  DragDropContext(HTML5Backend),\n  injectIntl,\n  connect(\n    (store, props) => {\n      return {\n        token: store.userSession.token,\n        items: store.search.items,\n        sort: store.content.update.sort,\n        index: store.content.updatecolumns.idx,\n        breadcrumbs: store.breadcrumbs.items,\n        total: store.search.total,\n        searchRequest: {\n          loading: store.search.loading,\n          loaded: store.search.loaded,\n        },\n        pathname: props.location.pathname,\n        action: store.clipboard.action,\n        source: store.clipboard.source,\n        clipboardRequest: store.clipboard.request,\n        deleteRequest: store.content.delete,\n        updateRequest: store.content.update,\n        objectActions: store.actions.actions.object,\n        orderRequest: store.content.order,\n      };\n    },\n    {\n      searchContent,\n      cut,\n      copy,\n      copyContent,\n      deleteContent,\n      listActions,\n      moveContent,\n      orderContent,\n      sortContent,\n      updateColumnsContent,\n    },\n  ),\n  asyncConnect([\n    {\n      key: 'actions',\n      // Dispatch async/await to make the operation syncronous, otherwise it returns\n      // before the promise is resolved\n      promise: async ({ location, store: { dispatch } }) =>\n        await dispatch(listActions(getBaseUrl(location.pathname))),\n    },\n  ]),\n  injectLazyLibs(['toastify']),\n)(Contents);\n","import React from 'react';\nimport { Breadcrumb } from 'semantic-ui-react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  home: {\n    id: 'Home',\n    defaultMessage: 'Home',\n  },\n  root: {\n    id: 'Root',\n    defaultMessage: 'Root',\n  },\n});\n\nconst ContentsBreadcrumbs = (props) => {\n  const { settings } = config;\n  const { items } = props;\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const lang = pathname.split('/')[1];\n\n  return (\n    <Breadcrumb>\n      {settings.isMultilingual && (\n        <>\n          <Link\n            to=\"/contents\"\n            className=\"section\"\n            title={intl.formatMessage(messages.root)}\n          >\n            {intl.formatMessage(messages.root)}\n          </Link>\n          <Breadcrumb.Divider />\n        </>\n      )}\n      {settings.isMultilingual && pathname?.split('/')?.length > 2 && (\n        <Link\n          to={`/${lang}/contents`}\n          className=\"section\"\n          title={intl.formatMessage(messages.home)}\n        >\n          {lang}\n        </Link>\n      )}\n      {!settings.isMultilingual && (\n        <Link\n          to=\"/contents\"\n          className=\"section\"\n          title={intl.formatMessage(messages.home)}\n        >\n          {intl.formatMessage(messages.home)}\n        </Link>\n      )}\n      {items.map((breadcrumb, index, breadcrumbs) => [\n        <Breadcrumb.Divider key={`divider-${breadcrumb.url}`} />,\n        index < breadcrumbs.length - 1 ? (\n          <Link\n            key={breadcrumb.url}\n            to={`${breadcrumb.url}/contents`}\n            className=\"section\"\n          >\n            {breadcrumb.nav_title || breadcrumb.title}\n          </Link>\n        ) : (\n          <Breadcrumb.Section key={breadcrumb.url} active>\n            {breadcrumb.nav_title || breadcrumb.title}\n          </Breadcrumb.Section>\n        ),\n      ])}\n    </Breadcrumb>\n  );\n};\n\nexport default ContentsBreadcrumbs;\n","/**\n * Contents index header component.\n * @module components/manage/Contents/ContentsIndexHeader\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { injectIntl } from 'react-intl';\n\nconst widthValues = [\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen',\n  'fourteen',\n  'fiveteen',\n  'sixteen',\n];\n\n/**\n * Contents index header component class.\n * @function ContentsIndexHeaderComponent\n * @returns {string} Markup of the component.\n */\nexport const ContentsIndexHeaderComponent = ({\n  intl,\n  width,\n  label,\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n}) =>\n  connectDropTarget(\n    connectDragSource(\n      <th\n        className={`${widthValues[width - 1]} wide`}\n        style={{ opacity: isDragging ? 0.5 : 1, cursor: 'move' }}\n      >\n        {intl.formatMessage({\n          id: label,\n          defaultMessage: label,\n        })}\n      </th>,\n    ),\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nContentsIndexHeaderComponent.propTypes = {\n  width: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n  connectDropTarget: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  order: PropTypes.number.isRequired,\n  onOrderIndex: PropTypes.func.isRequired,\n};\n\nexport default DropTarget(\n  'index',\n  {\n    hover(props, monitor) {\n      const dragOrder = monitor.getItem().order;\n      const hoverOrder = props.order;\n\n      if (dragOrder === hoverOrder) {\n        return;\n      }\n\n      props.onOrderIndex(dragOrder, hoverOrder - dragOrder);\n\n      monitor.getItem().order = hoverOrder;\n    },\n  },\n  (connect) => ({\n    connectDropTarget: connect.dropTarget(),\n  }),\n)(\n  DragSource(\n    'index',\n    {\n      beginDrag(props) {\n        return {\n          id: props.label,\n          order: props.order,\n        };\n      },\n    },\n    (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging(),\n    }),\n  )(injectIntl(ContentsIndexHeaderComponent)),\n);\n","/**\n * Contents item component.\n * @module components/manage/Contents/ContentsItem\n */\n\nimport React from 'react';\nimport { Button, Dropdown, Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { map } from 'lodash';\nimport moment from 'moment';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\nimport { Icon, Circle } from '@plone/volto/components';\nimport { getContentIcon } from '@plone/volto/helpers';\nimport moreSVG from '@plone/volto/icons/more.svg';\nimport checkboxUncheckedSVG from '@plone/volto/icons/checkbox-unchecked.svg';\nimport checkboxCheckedSVG from '@plone/volto/icons/checkbox-checked.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport moveUpSVG from '@plone/volto/icons/move-up.svg';\nimport moveDownSVG from '@plone/volto/icons/move-down.svg';\nimport editingSVG from '@plone/volto/icons/editing.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport cx from 'classnames';\n\nconst messages = defineMessages({\n  private: {\n    id: 'private',\n    defaultMessage: 'Private',\n  },\n  published: {\n    id: 'published',\n    defaultMessage: 'Published',\n  },\n  intranet: {\n    id: 'intranet',\n    defaultMessage: 'Intranet',\n  },\n  draft: {\n    id: 'draft',\n    defaultMessage: 'Draft',\n  },\n  no_workflow_state: {\n    id: 'no workflow state',\n    defaultMessage: 'No workflow state',\n  },\n});\n\nfunction getColor(string) {\n  switch (string) {\n    case 'private':\n      return '#ed4033';\n    case 'published':\n      return '#007bc1';\n    case 'intranet':\n      return '#51aa55';\n    case 'draft':\n      return '#f6a808';\n    default:\n      return 'grey';\n  }\n}\n\n/**\n * Contents item component class.\n * @function ContentsItemComponent\n * @returns {string} Markup of the component.\n */\nexport const ContentsItemComponent = ({\n  item,\n  selected,\n  onClick,\n  indexes,\n  onCut,\n  onCopy,\n  onDelete,\n  onMoveToTop,\n  onMoveToBottom,\n  connectDragPreview,\n  connectDragSource,\n  connectDropTarget,\n  isDragging,\n  order,\n}) => {\n  const intl = useIntl();\n\n  return connectDropTarget(\n    connectDragPreview(\n      <tr key={item['@id']} className={cx('', { 'dragging-row': isDragging })}>\n        <Table.Cell className={cx('', { 'dragging-cell': isDragging })}>\n          {connectDragSource(\n            <div style={{ display: 'inline-block' }}>\n              <Button icon basic>\n                <Icon\n                  name={dragSVG}\n                  size=\"20px\"\n                  color=\"#878f93\"\n                  className=\"content drag handle\"\n                />\n              </Button>\n            </div>,\n          )}\n        </Table.Cell>\n        <Table.Cell className={cx('', { 'dragging-cell': isDragging })}>\n          {selected ? (\n            <Button\n              icon\n              basic\n              aria-label=\"Unchecked\"\n              onClick={(e) => onClick(e, item['@id'])}\n            >\n              <Icon\n                name={checkboxCheckedSVG}\n                color=\"#007eb1\"\n                size=\"24px\"\n                className=\"checked\"\n              />\n            </Button>\n          ) : (\n            <Button\n              icon\n              basic\n              aria-label=\"Checked\"\n              onClick={(e) => onClick(e, item['@id'])}\n            >\n              <Icon\n                name={checkboxUncheckedSVG}\n                color=\"#826a6a\"\n                size=\"24px\"\n                className=\"unchecked\"\n              />\n            </Button>\n          )}\n        </Table.Cell>\n        <Table.Cell className={cx('', { 'dragging-cell': isDragging })}>\n          <Link\n            className=\"icon-align-name\"\n            to={`${item['@id']}${item.is_folderish ? '/contents' : ''}`}\n            title={item['@type']}\n          >\n            <div className=\"expire-align\">\n              <Icon\n                name={getContentIcon(item['@type'], item.is_folderish)}\n                size=\"20px\"\n                className=\"icon-margin\"\n                color=\"#878f93\"\n              />{' '}\n              <span> {item.title}</span>\n            </div>\n            {item.ExpirationDate !== 'None' &&\n              new Date(item.ExpirationDate).getTime() <\n                new Date().getTime() && (\n                <Button className=\"button-margin\" size=\"mini\">\n                  <FormattedMessage id=\"Expired\" defaultMessage=\"Expired\" />\n                </Button>\n              )}\n          </Link>\n        </Table.Cell>\n        {map(indexes, (index) => (\n          <Table.Cell\n            className={cx('', { 'dragging-cell': isDragging })}\n            key={index.id}\n          >\n            {index.type === 'boolean' &&\n              (item[index.id] ? (\n                <FormattedMessage id=\"Yes\" defaultMessage=\"Yes\" />\n              ) : (\n                <FormattedMessage id=\"No\" defaultMessage=\"No\" />\n              ))}\n            {index.type === 'string' &&\n              index.id !== 'review_state' &&\n              item[index.id]}\n            {index.id === 'review_state' && (\n              <div>\n                <span>\n                  <Circle color={getColor(item[index.id])} size=\"15px\" />\n                </span>\n                {messages[item[index.id]]\n                  ? intl.formatMessage(messages[item[index.id]])\n                  : intl.formatMessage(messages.no_workflow_state)}\n              </div>\n            )}\n            {index.type === 'date' && (\n              <span\n                title={\n                  item[index.id] !== 'None' ? (\n                    moment(item[index.id]).format('LLLL')\n                  ) : (\n                    <FormattedMessage id=\"None\" defaultMessage=\"None\" />\n                  )\n                }\n              >\n                {item[index.id] !== 'None' ? (\n                  moment(item[index.id]).format('L')\n                ) : (\n                  <FormattedMessage id=\"None\" defaultMessage=\"None\" />\n                )}\n              </span>\n            )}\n          </Table.Cell>\n        ))}\n        <Table.Cell\n          className={cx('', { 'dragging-cell': isDragging })}\n          textAlign=\"right\"\n        >\n          <Dropdown\n            className=\"row-actions\"\n            icon={<Icon name={moreSVG} size=\"24px\" color=\"#007eb1\" />}\n          >\n            <Dropdown.Menu className=\"left\">\n              <Link className=\"item icon-align\" to={`${item['@id']}/edit`}>\n                <Icon name={editingSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"Edit\" defaultMessage=\"Edit\" />\n              </Link>\n              <Link className=\"item right-dropdown icon-align\" to={item['@id']}>\n                <Icon name={showSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"View\" defaultMessage=\"View\" />\n              </Link>\n              <Dropdown.Divider />\n              <Dropdown.Item\n                onClick={onCut}\n                value={item['@id']}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={cutSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"Cut\" defaultMessage=\"Cut\" />\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={onCopy}\n                value={item['@id']}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={copySVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"Copy\" defaultMessage=\"Copy\" />\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={onDelete}\n                value={item['@id']}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={deleteSVG} color=\"#e40166\" size=\"24px\" />{' '}\n                <FormattedMessage id=\"Delete\" defaultMessage=\"Delete\" />\n              </Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item\n                onClick={onMoveToTop}\n                value={order}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={moveUpSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage\n                  id=\"Move to top of folder\"\n                  defaultMessage=\"Move to top of folder\"\n                />\n              </Dropdown.Item>\n              <Dropdown.Item\n                onClick={onMoveToBottom}\n                value={order}\n                className=\"right-dropdown icon-align\"\n              >\n                <Icon name={moveDownSVG} color=\"#007eb1\" size=\"24px\" />{' '}\n                <FormattedMessage\n                  id=\"Move to bottom of folder\"\n                  defaultMessage=\"Move to bottom of folder\"\n                />\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Table.Cell>\n      </tr>,\n    ),\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nContentsItemComponent.propTypes = {\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    title: PropTypes.string,\n    is_folderish: PropTypes.bool,\n    '@type': PropTypes.string,\n  }).isRequired,\n  selected: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  indexes: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      type: PropTypes.string,\n    }),\n  ).isRequired,\n  onCut: PropTypes.func.isRequired,\n  onCopy: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onMoveToTop: PropTypes.func.isRequired,\n  onMoveToBottom: PropTypes.func.isRequired,\n  connectDragPreview: PropTypes.func.isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n  connectDropTarget: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  order: PropTypes.number.isRequired,\n  onOrderItem: PropTypes.func.isRequired,\n};\n\nexport default DropTarget(\n  'item',\n  {\n    hover(props, monitor) {\n      const id = monitor.getItem().id;\n      const dragOrder = monitor.getItem().order;\n      const hoverOrder = props.order;\n\n      if (dragOrder === hoverOrder) {\n        return;\n      }\n\n      props.onOrderItem(id, dragOrder, hoverOrder - dragOrder, false);\n\n      monitor.getItem().order = hoverOrder;\n    },\n    drop(props, monitor) {\n      const id = monitor.getItem().id;\n      const dragOrder = monitor.getItem().startOrder;\n      const dropOrder = props.order;\n\n      if (dragOrder === dropOrder) {\n        return;\n      }\n\n      props.onOrderItem(id, dragOrder, dropOrder - dragOrder, true);\n\n      monitor.getItem().order = dropOrder;\n    },\n  },\n  (connect) => ({\n    connectDropTarget: connect.dropTarget(),\n  }),\n)(\n  DragSource(\n    'item',\n    {\n      beginDrag(props) {\n        return {\n          id: props.item['@id'],\n          order: props.order,\n          startOrder: props.order,\n        };\n      },\n    },\n    (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      connectDragPreview: connect.dragPreview(),\n      isDragging: monitor.isDragging(),\n    }),\n  )(ContentsItemComponent),\n);\n","/**\n * Contents properties modal.\n * @module components/manage/Contents/ContentsPropertiesModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { isEmpty, map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { updateContent } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  properties: {\n    id: 'Properties',\n    defaultMessage: 'Properties',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  effectiveTitle: {\n    id: 'Publishing Date',\n    defaultMessage: 'Publishing Date',\n  },\n  effectiveDescription: {\n    id:\n      'If this date is in the future, the content will not show up in listings and searches until this date.',\n    defaultMessage:\n      'If this date is in the future, the content will not show up in listings and searches until this date.',\n  },\n  expiresTitle: {\n    id: 'Expiration Date',\n    defaultMessage: 'Expiration Date',\n  },\n  expiresDescription: {\n    id:\n      'When this date is reached, the content will nolonger be visible in listings and searches.',\n    defaultMessage:\n      'When this date is reached, the content will nolonger be visible in listings and searches.',\n  },\n  rightsTitle: {\n    id: 'Rights',\n    defaultMessage: 'Rights',\n  },\n  rightsDescription: {\n    id: 'Copyright statement or other rights information on this item.',\n    defaultMessage:\n      'Copyright statement or other rights information on this item.',\n  },\n  creatorsTitle: {\n    id: 'Creators',\n    defaultMessage: 'Creators',\n  },\n  creatorsDescription: {\n    id:\n      'Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.',\n    defaultMessage:\n      'Persons responsible for creating the content of this item. Please enter a list of user names, one per line. The principal creator should come first.',\n  },\n  excludeFromNavTitle: {\n    id: 'Exclude from navigation',\n    defaultMessage: 'Exclude from navigation',\n  },\n  excludeFromNavDescription: {\n    id: 'If selected, this item will not appear in the navigation tree',\n    defaultMessage:\n      'If selected, this item will not appear in the navigation tree',\n  },\n});\n\n/**\n * ContentsPropertiesModal class.\n * @class ContentsPropertiesModal\n * @extends Component\n */\nclass ContentsPropertiesModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(PropTypes.string).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (isEmpty(data)) {\n      this.props.onOk();\n    } else {\n      this.props.updateContent(\n        this.props.items,\n        map(this.props.items, () => data),\n      );\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.properties)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: [\n                  'effective',\n                  'expires',\n                  'rights',\n                  'creators',\n                  'exclude_from_nav',\n                ],\n              },\n            ],\n            properties: {\n              effective: {\n                description: this.props.intl.formatMessage(\n                  messages.effectiveDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.effectiveTitle),\n                type: 'string',\n                widget: 'datetime',\n              },\n              expires: {\n                description: this.props.intl.formatMessage(\n                  messages.expiresDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.expiresTitle),\n                type: 'string',\n                widget: 'datetime',\n              },\n              rights: {\n                description: this.props.intl.formatMessage(\n                  messages.rightsDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.rightsTitle),\n                type: 'string',\n                widget: 'textarea',\n              },\n              creators: {\n                description: this.props.intl.formatMessage(\n                  messages.creatorsDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.creatorsTitle),\n                type: 'array',\n              },\n              exclude_from_nav: {\n                description: this.props.intl.formatMessage(\n                  messages.excludeFromNavDescription,\n                ),\n                title: this.props.intl.formatMessage(\n                  messages.excludeFromNavTitle,\n                ),\n                type: 'array',\n                choices: [\n                  [true, 'Yes'],\n                  [false, 'No'],\n                ],\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.content.update,\n    }),\n    { updateContent },\n  ),\n)(ContentsPropertiesModal);\n","/**\n * Contents rename modal.\n * @module components/manage/Contents/ContentsRenameModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { concat, merge, map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { updateContent } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  renameItems: {\n    id: 'Rename items',\n    defaultMessage: 'Rename items',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  shortName: {\n    id: 'Short name',\n    defaultMessage: 'Short name',\n  },\n  shortNameDescription: {\n    id: 'This name will be displayed in the URL.',\n    defaultMessage: 'This name will be displayed in the URL.',\n  },\n  loadingMessage: {\n    id: 'Rename Items Loading Message',\n    defaultMessage: 'Renaming items...',\n  },\n});\n\n/**\n * ContentsRenameModal class.\n * @class ContentsRenameModal\n * @extends Component\n */\nclass ContentsRenameModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateContent(\n      map(this.props.items, (item) => item.url),\n      map(this.props.items, (item, index) => ({\n        id: data[`${index}_id`],\n        title: data[`${index}_title`],\n      })),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          loading={this.props.request.loading}\n          loadingMessage={this.props.intl.formatMessage(\n            messages.loadingMessage,\n          )}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          formData={merge(\n            ...map(this.props.items, (item, index) => ({\n              [`${index}_title`]: item.title,\n              [`${index}_id`]: item.id,\n            })),\n          )}\n          title={this.props.intl.formatMessage(messages.renameItems)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: concat(\n                  ...map(this.props.items, (item, index) => [\n                    `${index}_title`,\n                    `${index}_id`,\n                  ]),\n                ),\n              },\n            ],\n            properties: merge(\n              ...map(this.props.items, (item, index) => ({\n                [`${index}_title`]: {\n                  title: this.props.intl.formatMessage(messages.title),\n                  type: 'string',\n                  description: '',\n                },\n                [`${index}_id`]: {\n                  title: this.props.intl.formatMessage(messages.shortName),\n                  type: 'string',\n                  description: this.props.intl.formatMessage(\n                    messages.shortNameDescription,\n                  ),\n                },\n              })),\n            ),\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.content.update,\n    }),\n    { updateContent },\n  ),\n)(ContentsRenameModal);\n","/**\n * Contents tags modal.\n * @module components/manage/Contents/ContentsTagsModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { without, union, map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { updateContent } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  tags: {\n    id: 'Tags',\n    defaultMessage: 'Tags',\n  },\n  tagsToRemove: {\n    id: 'Tags to remove',\n    defaultMessage: 'Tags to remove',\n  },\n  tagsToAdd: {\n    id: 'Tags to add',\n    defaultMessage: 'Tags to add',\n  },\n});\n\n/**\n * ContentsTagsModal class.\n * @class ContentsTagsModal\n * @extends Component\n */\nclass ContentsTagsModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        subjects: PropTypes.arrayOf(PropTypes.string),\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateContent(\n      map(this.props.items, (item) => item.url),\n      map(this.props.items, (item) => ({\n        subjects: union(\n          without(item.subjects, ...data.tags_to_remove),\n          data.tags_to_add,\n        ),\n      })),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.tags)}\n          formData={{\n            tags_to_remove: [],\n            tags_to_add: [],\n          }}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['tags_to_remove', 'tags_to_add'],\n              },\n            ],\n            properties: {\n              tags_to_remove: {\n                type: 'array',\n                title: this.props.intl.formatMessage(messages.tagsToRemove),\n              },\n              tags_to_add: {\n                type: 'array',\n                title: this.props.intl.formatMessage(messages.tagsToAdd),\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.content.update,\n    }),\n    { updateContent },\n  ),\n)(ContentsTagsModal);\n","/**\n * Contents upload modal.\n * @module components/manage/Contents/ContentsUploadModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport {\n  Button,\n  Dimmer,\n  Header,\n  Icon,\n  Image,\n  Loader,\n  Modal,\n  Table,\n  Segment,\n} from 'semantic-ui-react';\nimport loadable from '@loadable/component';\nimport { concat, filter, map } from 'lodash';\nimport moment from 'moment';\nimport filesize from 'filesize';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { createContent } from '@plone/volto/actions';\n\nconst Dropzone = loadable(() => import('react-dropzone'));\n\nconst messages = defineMessages({\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  upload: {\n    id:\n      '{count, plural, one {Upload {count} file} other {Upload {count} files}}',\n    defaultMessage:\n      '{count, plural, one {Upload {count} file} other {Upload {count} files}}',\n  },\n});\n\nconst SUBREQUEST = 'batch-upload';\n\n/**\n * ContentsUploadModal class.\n * @class ContentsUploadModal\n * @extends Component\n */\nclass ContentsUploadModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createContent: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onRemoveFile = this.onRemoveFile.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      files: [],\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n      this.setState({\n        files: [],\n      });\n    }\n  }\n\n  /**\n   * Remove file handler\n   * @method onRemoveFile\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onRemoveFile(event) {\n    this.setState({\n      files: filter(\n        this.state.files,\n        (file, index) =>\n          index !== parseInt(event.target.getAttribute('value'), 10),\n      ),\n    });\n  }\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  onDrop = async (files) => {\n    for (let i = 0; i < files.length; i++) {\n      await readAsDataURL(files[i]).then((data) => {\n        const fields = data.match(/^data:(.*);(.*),(.*)$/);\n        files[i].preview = fields[0];\n      });\n    }\n    this.setState({\n      files: concat(this.state.files, files),\n    });\n  };\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.onCancel();\n    this.setState({\n      files: [],\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @returns {undefined}\n   */\n  onSubmit() {\n    Promise.all(map(this.state.files, (file) => readAsDataURL(file))).then(\n      (files) => {\n        this.props.createContent(\n          this.props.pathname,\n          map(this.state.files, (file, index) => {\n            const fields = files[index].match(/^data:(.*);(.*),(.*)$/);\n            const image = fields[1].split('/')[0] === 'image';\n            return {\n              '@type': image ? 'Image' : 'File',\n              title: file.name,\n              [image ? 'image' : 'file']: {\n                data: fields[3],\n                encoding: fields[2],\n                'content-type': fields[1],\n                filename: file.name,\n              },\n            };\n          }),\n          SUBREQUEST,\n        );\n      },\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    moment.locale(this.props.intl.locale);\n\n    return (\n      this.props.open && (\n        <Modal open={this.props.open}>\n          <Header>\n            <FormattedMessage id=\"Upload files\" defaultMessage=\"Upload files\" />\n          </Header>\n          <Dimmer active={this.props.request.loading}>\n            <Loader>\n              <FormattedMessage\n                id=\"Uploading files\"\n                defaultMessage=\"Uploading files\"\n              />\n            </Loader>\n          </Dimmer>\n          <Modal.Content>\n            <Dropzone\n              onDrop={this.onDrop}\n              className=\"dropzone\"\n              noDragEventsBubbling={true}\n              multiple={true}\n            >\n              {({ getRootProps, getInputProps }) => (\n                <div {...getRootProps({ className: 'dashed' })}>\n                  <Segment>\n                    <Table basic=\"very\">\n                      <Table.Body>\n                        <Table.Row>\n                          <Table.Cell>\n                            <FormattedMessage\n                              id=\"Drag and drop files from your computer onto this area or click the “Browse” button.\"\n                              defaultMessage=\"Drag and drop files from your computer onto this area or click the “Browse” button.\"\n                            />\n                          </Table.Cell>\n                          <Table.Cell>\n                            <Button className=\"ui button primary\">\n                              <FormattedMessage\n                                id=\"Browse\"\n                                defaultMessage=\"Browse\"\n                              />\n                            </Button>\n                            <input\n                              {...getInputProps({\n                                type: 'file',\n                                style: { display: 'none' },\n                              })}\n                            />\n                          </Table.Cell>\n                        </Table.Row>\n                      </Table.Body>\n                    </Table>\n                  </Segment>\n                </div>\n              )}\n            </Dropzone>\n            {this.state.files.length > 0 && (\n              <Table compact singleLine>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell width={8}>\n                      <FormattedMessage\n                        id=\"Filename\"\n                        defaultMessage=\"Filename\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={4}>\n                      <FormattedMessage\n                        id=\"Last modified\"\n                        defaultMessage=\"Last modified\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={4}>\n                      <FormattedMessage\n                        id=\"File size\"\n                        defaultMessage=\"File size\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={4}>\n                      <FormattedMessage id=\"Preview\" defaultMessage=\"Preview\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell />\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {map(this.state.files, (file, index) => (\n                    <Table.Row className=\"upload-row\" key={file.name}>\n                      <Table.Cell>{file.name}</Table.Cell>\n                      <Table.Cell>\n                        {moment(file.lastModifiedDate).fromNow()}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {filesize(file.size, { round: 0 })}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {file.type.split('/')[0] === 'image' && (\n                          <Image src={file.preview} height={60} />\n                        )}\n                      </Table.Cell>\n                      <Table.Cell>\n                        <Icon\n                          name=\"close\"\n                          value={index}\n                          link\n                          onClick={this.onRemoveFile}\n                        />\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            )}\n          </Modal.Content>\n          <Modal.Actions>\n            {this.state.files.length > 0 && (\n              <Button\n                basic\n                circular\n                primary\n                floated=\"right\"\n                icon=\"arrow right\"\n                aria-label={this.props.intl.formatMessage(messages.upload, {\n                  count: this.state.files.length,\n                })}\n                onClick={this.onSubmit}\n                title={this.props.intl.formatMessage(messages.upload, {\n                  count: this.state.files.length,\n                })}\n                size=\"big\"\n              />\n            )}\n            <Button\n              basic\n              circular\n              secondary\n              icon=\"remove\"\n              aria-label={this.props.intl.formatMessage(messages.cancel)}\n              title={this.props.intl.formatMessage(messages.cancel)}\n              floated=\"right\"\n              size=\"big\"\n              onClick={this.onCancel}\n            />\n          </Modal.Actions>\n        </Modal>\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.content.subrequests?.[SUBREQUEST] || {},\n    }),\n    { createContent },\n  ),\n)(ContentsUploadModal);\n","/**\n * Contents workflow modal.\n * @module components/manage/Contents/ContentsWorkflowModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { getWorkflow, transitionWorkflow } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  stateTitle: {\n    id: 'Change State',\n    defaultMessage: 'Change State',\n  },\n  includeChildrenTitle: {\n    id: 'Change workflow state recursively',\n    defaultMessage: 'Change workflow state recursively',\n  },\n  stateDescription: {\n    id: 'Select the transition to be used for modifying the items state.',\n    defaultMessage:\n      'Select the transition to be used for modifying the items state.',\n  },\n  loadingMessage: {\n    id: 'Workflow Change Loading Message',\n    defaultMessage: 'Updating workflow states...',\n  },\n});\n\n/**\n * ContentsWorkflowModal class.\n * @class ContentsWorkflowModal\n * @extends Component\n */\nclass ContentsWorkflowModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getWorkflow: PropTypes.func.isRequired,\n    transitionWorkflow: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(PropTypes.string).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    workflows: PropTypes.arrayOf(\n      PropTypes.shape({\n        transition: PropTypes.shape({\n          '@id': PropTypes.string,\n          title: PropTypes.string,\n        }),\n      }),\n    ).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getWorkflow(this.props.items);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {string} state New state\n   * @returns {undefined}\n   */\n  onSubmit({ state, include_children }) {\n    if (!state) {\n      return;\n    }\n\n    this.props.transitionWorkflow(\n      filter(\n        map(\n          concat(\n            ...map(this.props.workflows, (workflow) => workflow.transitions),\n          ),\n          (item) => item['@id'],\n        ),\n        (x) => last(x.split('/')) === state,\n      ),\n      include_children,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open &&\n      this.props.workflows.length > 0 && (\n        <ModalForm\n          open={this.props.open}\n          loading={this.props.request.loading}\n          loadingMessage={this.props.intl.formatMessage(\n            messages.loadingMessage,\n          )}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.stateTitle)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['state', 'include_children'],\n              },\n            ],\n            properties: {\n              state: {\n                description: this.props.intl.formatMessage(\n                  messages.stateDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.stateTitle),\n                type: 'string',\n                choices: map(\n                  uniqBy(\n                    concat(\n                      ...map(\n                        this.props.workflows,\n                        (workflow) => workflow.transitions,\n                      ),\n                    ),\n                    (x) => x.title,\n                  ),\n                  (y) => [last(y['@id'].split('/')), y.title],\n                ),\n              },\n              include_children: {\n                title: this.props.intl.formatMessage(\n                  messages.includeChildrenTitle,\n                ),\n                type: 'boolean',\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.workflow.transition,\n      workflows: state.workflow.multiple,\n    }),\n    { getWorkflow, transitionWorkflow },\n  ),\n)(ContentsWorkflowModal);\n","import React from 'react';\nconst Circle = ({ color }) => (\n  <svg height=\"10\" width=\"10\" style={{ marginRight: 5 }}>\n    <circle cx=\"5\" cy=\"5\" r=\"4\" fill={color || '#51aa55'} />\n  </svg>\n);\n\nexport default Circle;\n","/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/AddonsControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport {\n  Accordion,\n  Button,\n  Container,\n  Divider,\n  Header,\n  Label,\n  Message,\n  Segment,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport {\n  installAddon,\n  listAddons,\n  uninstallAddon,\n  upgradeAddon,\n} from '@plone/volto/actions';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Icon, Toolbar } from '@plone/volto/components';\nimport circleBottomSVG from '@plone/volto/icons/circle-bottom.svg';\nimport circleTopSVG from '@plone/volto/icons/circle-top.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  activateAndDeactivate: {\n    id: 'Activate and deactivate',\n    defaultMessage: 'Activate and deactivate add-ons in the lists below.',\n  },\n  addAddons: {\n    id: 'Add Addons',\n    defaultMessage:\n      'To make new add-ons show up here, add them to your buildout configuration, run buildout, and restart the server process. For detailed instructions see',\n  },\n  addonsSettings: {\n    id: 'Add-ons Settings',\n    defaultMessage: 'Add-ons Settings',\n  },\n  available: {\n    id: 'Available',\n    defaultMessage: 'Available',\n  },\n  availableVersion: {\n    id: 'Latest version',\n    defaultMessage: 'Latest version',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  installed: {\n    id: 'Installed',\n    defaultMessage: 'Installed',\n  },\n  installedVersion: {\n    id: 'Installed version',\n    defaultMessage: 'Installed version',\n  },\n  noUninstallProfile: {\n    id: 'No uninstall profile',\n    defaultMessage: 'This addon does not provide an uninstall profile.',\n  },\n  update: {\n    id: 'Update',\n    defaultMessage: 'Update',\n  },\n  updatesAvailable: {\n    id: 'Updates available',\n    defaultMessage: 'Updates available',\n  },\n  updateInstalledAddons: {\n    id: 'Update installed addons:',\n    defaultMessage: 'Update installed addons:',\n  },\n  uninstall: {\n    id: 'Uninstall',\n    defaultMessage: 'Uninstall',\n  },\n});\n\n/**\n * AddonsControlpanel class.\n * @class AddonsControlpanel\n * @extends Component\n */\nclass AddonsControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listAddons: PropTypes.func.isRequired,\n    installAddon: PropTypes.func.isRequired,\n    uninstallAddon: PropTypes.func.isRequired,\n    installedAddons: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        id: PropTypes.string,\n        title: PropTypes.string,\n        version: PropTypes.string,\n        description: PropTypes.string,\n        uninstall_profile_id: PropTypes.string,\n        upgrade_info: PropTypes.shape({\n          available: PropTypes.boolean,\n        }),\n      }),\n    ).isRequired,\n    availableAddons: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        id: PropTypes.string,\n        title: PropTypes.string,\n        version: PropTypes.string,\n        description: PropTypes.string,\n        uninstall_profile_id: PropTypes.string,\n        upgrade_info: PropTypes.shape({\n          available: PropTypes.boolean,\n        }),\n      }),\n    ).isRequired,\n    upgradableAddons: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        id: PropTypes.string,\n        title: PropTypes.string,\n        version: PropTypes.string,\n        description: PropTypes.string,\n        uninstall_profile_id: PropTypes.string,\n        upgrade_info: PropTypes.shape({\n          available: PropTypes.boolean,\n        }),\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onAccordionClick = this.onAccordionClick.bind(this);\n    this.onInstall = this.onInstall.bind(this);\n    this.onUninstall = this.onUninstall.bind(this);\n    this.onUpgrade = this.onUpgrade.bind(this);\n    this.state = {\n      activeIndex: -1,\n      installedAddons: [],\n      availableAddons: [],\n      upgradableAddons: [],\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.listAddons();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Install handler\n   * @method onInstall\n   * @param {Object} event Event object.\n   * @param {string} value Id of package to install.\n   * @returns {undefined}\n   */\n  onInstall(event, { value }) {\n    event.preventDefault();\n    this.props.installAddon(value).then(() => this.props.listAddons());\n  }\n\n  /**\n   * Uninstall handler\n   * @method onUninstall\n   * @param {Object} event Event object.\n   * @param {string} value Id of package to uninstall.\n   * @returns {undefined}\n   */\n  onUninstall(event, { value }) {\n    event.preventDefault();\n    this.props.uninstallAddon(value).then(() => this.props.listAddons());\n  }\n\n  /**\n   * Unpgrade handler\n   * @method onUpgrade\n   * @param {Object} event Event object.\n   * @param {string} value Id of package to update.\n   * @returns {undefined}\n   */\n  onUpgrade(event, { value }) {\n    event.preventDefault();\n    this.props.upgradeAddon(value).then(() => this.props.listAddons());\n  }\n\n  /**\n   * On accordion click handler\n   * @method onAccordionClick\n   * @param {object} event Event object.\n   * @param {object} index Index of the accordion element being clicked\n   * @returns {undefined}\n   */\n  onAccordionClick(event, item) {\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === item.index ? -1 : item.index;\n    this.setState({ activeIndex: newIndex });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-addons\" className=\"controlpanel-addons\">\n        <Helmet title=\"Addons\" />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Add-ons Settings\"\n              defaultMessage=\"Add-ons Settings\"\n            />\n          </Segment>\n          {this.props.upgradableAddons.length > 0 && (\n            <Message attached>\n              <Message.Header>\n                <FormattedMessage\n                  id=\"Updates available\"\n                  defaultMessage=\"Updates available\"\n                />\n              </Message.Header>\n              <FormattedMessage\n                id=\"Update installed addons\"\n                defaultMessage=\"Update installed addons\"\n              />\n            </Message>\n          )}\n\n          <Segment>\n            <Header as=\"h3\">\n              <FormattedMessage\n                id=\"Activate and deactivate\"\n                defaultMessage=\"Activate and deactivate add-ons in the lists below.\"\n              />\n            </Header>\n            <FormattedMessage\n              id=\"Add Addons\"\n              defaultMessage=\"To make new add-ons show up here, add them to your buildout configuration, run buildout, and restart the server process. For detailed instructions see\"\n            />\n            &nbsp;\n            <a\n              href=\"http://docs.plone.org/manage/installing/installing_addons.html\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Installing a third party add-on\n            </a>\n            .\n          </Segment>\n\n          <Segment key=\"header-installed\" secondary>\n            <FormattedMessage id=\"Installed\" defaultMessage=\"Installed\" />:\n            <Label circular>{this.props.installedAddons.length}</Label>\n          </Segment>\n\n          <Segment key=\"body-installed\" attached>\n            <Accordion>\n              <Divider />\n              {this.props.installedAddons.map((item) => (\n                <div key={item.id}>\n                  <Accordion.Title\n                    active={this.state.activeIndex === item.id}\n                    index={item.id}\n                    onClick={this.onAccordionClick}\n                    className={\n                      item.upgrade_info.available ? 'updateAvailable' : ''\n                    }\n                  >\n                    {item.title}\n                    {item.upgrade_info.available && (\n                      <span className=\"updateText\">\n                        <FormattedMessage id=\"Update\" defaultMessage=\"Update\" />\n                      </span>\n                    )}\n                    <Icon\n                      name={\n                        this.state.activeIndex === item.id\n                          ? circleTopSVG\n                          : circleBottomSVG\n                      }\n                      size=\"24px\"\n                      className={`accordionToggle ${item.title}`}\n                      color=\"#878f93\"\n                    />\n                  </Accordion.Title>\n                  <Accordion.Content\n                    active={this.state.activeIndex === item.id}\n                  >\n                    <div className=\"description\">{item.description}</div>\n                    <Button.Group floated=\"right\">\n                      {item.upgrade_info.available && (\n                        <Button\n                          primary\n                          basic\n                          onClick={this.onUpgrade}\n                          value={item.id}\n                        >\n                          <FormattedMessage\n                            id=\"Update\"\n                            defaultMessage=\"Update\"\n                          />\n                        </Button>\n                      )}\n                      {item.uninstall_profile_id && (\n                        <Button\n                          negative\n                          basic\n                          onClick={this.onUninstall}\n                          value={item.id}\n                          className=\"uninstallAction\"\n                        >\n                          <FormattedMessage\n                            id=\"Uninstall\"\n                            defaultMessage=\"Uninstall\"\n                            className=\"button-label\"\n                          />\n                        </Button>\n                      )}\n                    </Button.Group>\n                    <div className=\"version\">\n                      <FormattedMessage\n                        id=\"Installed version\"\n                        defaultMessage=\"Installed version\"\n                      />\n                      : &nbsp; {item.version}\n                    </div>\n                  </Accordion.Content>\n                  <Divider />\n                </div>\n              ))}\n            </Accordion>\n          </Segment>\n\n          <Segment key=\"header-available\" secondary>\n            <FormattedMessage id=\"Available\" defaultMessage=\"Available\" />:\n            <Label circular>{this.props.availableAddons.length}</Label>\n          </Segment>\n\n          <Segment key=\"body-available\" attached>\n            <Accordion>\n              <Divider />\n              {this.props.availableAddons.map((item) => (\n                <div key={item.id}>\n                  <Accordion.Title\n                    active={this.state.activeIndex === item.id}\n                    index={item.id}\n                    onClick={this.onAccordionClick}\n                  >\n                    {item.title}\n                    <Icon\n                      name={\n                        this.state.activeIndex === item.id\n                          ? circleTopSVG\n                          : circleBottomSVG\n                      }\n                      size=\"23px\"\n                      className={`accordionToggle ${item.title}`}\n                    />\n                  </Accordion.Title>\n                  <Accordion.Content\n                    active={this.state.activeIndex === item.id}\n                  >\n                    <div className=\"description\">{item.description}</div>\n                    {item.uninstall_profile_id === '' && (\n                      <div>\n                        <Message icon=\"warning\" warning>\n                          <FormattedMessage\n                            id=\"No uninstall profile\"\n                            defaultMessage=\"This addon does not provide an uninstall profile.\"\n                          />\n                        </Message>\n                      </div>\n                    )}\n                    <Button.Group floated=\"right\">\n                      <Button\n                        primary\n                        basic\n                        onClick={this.onInstall}\n                        value={item.id}\n                        className=\"installAction\"\n                      >\n                        <FormattedMessage\n                          id=\"Install\"\n                          defaultMessage=\"Install\"\n                          className=\"button-label\"\n                        />\n                      </Button>\n                    </Button.Group>\n                    <div className=\"version\">\n                      <FormattedMessage\n                        id=\"Latest version\"\n                        defaultMessage=\"Latest version\"\n                      />\n                      : &nbsp;\n                      {item.version}\n                    </div>\n                  </Accordion.Content>\n                  <Divider />\n                </div>\n              ))}\n            </Accordion>\n          </Segment>\n        </Segment.Group>\n\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to=\"/controlpanel\" className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      aria-label={this.props.intl.formatMessage(messages.back)}\n                      className=\"contents circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      installedAddons: state.addons.installedAddons,\n      availableAddons: state.addons.availableAddons,\n      upgradableAddons: state.addons.upgradableAddons,\n      pathname: props.location.pathname,\n    }),\n    { installAddon, listAddons, uninstallAddon, upgradeAddon },\n  ),\n)(AddonsControlpanel);\n","/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentType\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Header } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { last, nth, join } from 'lodash';\nimport { Error, Form, Icon, Toolbar, Toast } from '@plone/volto/components';\nimport { getControlpanel, updateControlpanel } from '@plone/volto/actions';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  title: {\n    id: '{id} Content Type',\n    defaultMessage: '{id} Content Type',\n  },\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n});\n\n/**\n * ContentType class.\n * @class ContentType\n * @extends Component\n */\nclass ContentType extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    parent: PropTypes.string.isRequired,\n    cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.object,\n      schema: PropTypes.object,\n      title: PropTypes.string,\n    }),\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentType\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visual: false,\n      error: null,\n      isClient: false,\n    };\n\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getControlpanel(join([this.props.parent, this.props.id], '/'));\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Control Panel GET\n    if (\n      this.props.cpanelRequest.get.loading &&\n      nextProps.cpanelRequest.get.error\n    ) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error,\n      });\n    }\n\n    // Control Panel PATCH\n    if (\n      this.props.cpanelRequest.update.loading &&\n      nextProps.cpanelRequest.update.loaded\n    ) {\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(getParentUrl(this.props.pathname));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (this.props.controlpanel) {\n      let controlpanel = this.props.controlpanel;\n      if (controlpanel?.data?.filter_content_types === false) {\n        controlpanel.data.filter_content_types = { title: 'all', token: 'all' };\n      }\n      if (controlpanel?.data?.filter_content_types === true) {\n        if ((controlpanel?.data?.allowed_content_types || []).length) {\n          controlpanel.data.filter_content_types = {\n            title: 'some',\n            token: 'some',\n          };\n        } else {\n          controlpanel.data.filter_content_types = {\n            title: 'none',\n            token: 'none',\n          };\n        }\n      }\n      return (\n        <div id=\"page-controlpanel\" className=\"ui container\">\n          <Header disabled>\n            {this.props.intl.formatMessage(messages.title, {\n              id: controlpanel.title,\n            })}\n          </Header>\n          <Form\n            isEditForm\n            ref={this.form}\n            schema={controlpanel.schema}\n            formData={controlpanel.data}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            pathname={this.props.pathname}\n            visual={this.state.visual}\n            hideActions\n            loading={this.props.cpanelRequest.update.loading}\n          />\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      disabled={this.props.cpanelRequest.update.loading}\n                      loading={this.props.cpanelRequest.update.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button\n                      className=\"cancel\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />\n            </Portal>\n          )}\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      controlpanel: state.controlpanels.controlpanel,\n      cpanelRequest: state.controlpanels,\n      pathname: props.location.pathname,\n      id: last(props.location.pathname.split('/')),\n      parent: nth(props.location.pathname.split('/'), -2),\n    }),\n    { getControlpanel, updateControlpanel },\n  ),\n)(ContentType);\n","/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentTypeLayout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport {\n  getParentUrl,\n  hasBlocksData,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { nth, join } from 'lodash';\nimport {\n  Error,\n  Form,\n  Icon,\n  Toolbar,\n  Sidebar,\n  Toast,\n} from '@plone/volto/components';\nimport {\n  getSchema,\n  updateSchema,\n  getControlpanel,\n  updateControlpanel,\n} from '@plone/volto/actions';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  enable: {\n    id: 'Enable editable Blocks',\n    defaultMessage: 'Enable editable Blocks',\n  },\n});\n\n/**\n * ContentTypeLayout class.\n * @class ContentTypeLayout\n * @extends Component\n */\nclass ContentTypeLayout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    updateSchema: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    parent: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n    schemaRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.object,\n      schema: PropTypes.object,\n      title: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: {},\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentTypeLayout\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visual: false,\n      content: null,\n      readOnlyBehavior: null,\n      error: null,\n      isClient: false,\n    };\n\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onEnableBlocks = this.onEnableBlocks.bind(this);\n    this.onDisableBlocksBehavior = this.onDisableBlocksBehavior.bind(this);\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getControlpanel(join([this.props.parent, this.props.id], '/'));\n    this.props.getSchema(this.props.id);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Control Panel GET\n    if (\n      this.props.cpanelRequest.get.loading &&\n      nextProps.cpanelRequest.get.error\n    ) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      let properties = nextProps.schema?.properties || {};\n      let content = {};\n      let value, key;\n      for (key in properties) {\n        value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      if (hasBlocksData(properties)) {\n        this.setState({\n          visual: true,\n        });\n\n        const blocksFieldName = getBlocksFieldname(properties);\n        const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n        content[blocksFieldName] = properties[blocksFieldName]?.default || {};\n        content[blocksLayoutFieldname] = properties[blocksLayoutFieldname]\n          ?.default || { items: [] };\n\n        const blocksBehavior = properties[blocksFieldName]?.behavior || '';\n        this.setState({\n          readOnlyBehavior: !blocksBehavior.includes('generated')\n            ? blocksBehavior\n            : '',\n        });\n      } else {\n        this.setState({\n          visual: false,\n          readOnlyBehavior: '',\n        });\n      }\n\n      this.setState({\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.update.loading &&\n      nextProps.schemaRequest.update.loaded\n    ) {\n      this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Blocks behavior disabled\n    if (\n      this.props.cpanelRequest.update.loading &&\n      nextProps.cpanelRequest.update.loaded\n    ) {\n      this.onEnableBlocks();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    let schema = { properties: {} };\n    Object.keys(data)\n      .filter((k) => data[k])\n      .forEach((k) => (schema.properties[k] = { default: data[k] }));\n    this.props.updateSchema(this.props.id, schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    let url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  /**\n   * Enable blocks handler\n   * @method onEnableBlocks\n   * @returns {undefined}\n   */\n  onEnableBlocks() {\n    let schema = {\n      fieldsets: [\n        {\n          id: 'layout',\n          title: 'Layout',\n          fields: ['blocks', 'blocks_layout'],\n        },\n      ],\n      properties: {\n        blocks: {\n          title: 'Blocks',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n        },\n        blocks_layout: {\n          title: 'Blocks Layout',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n        },\n      },\n    };\n    this.props.updateSchema(this.props.id, schema);\n  }\n\n  /**\n   * Disable Blocks behavior handler\n   * @method onDisableBlocksBehavior\n   * @returns {undefined}\n   */\n  onDisableBlocksBehavior() {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], {\n      [this.state.readOnlyBehavior]: false,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (!this.state.visual) {\n      // Still loading\n      if (!this.state.content) {\n        return <div />;\n      }\n\n      // Blocks are not enabled\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onEnableBlocks}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          <Portal\n            node={this.state.isClient && document.getElementById('toolbar')}\n          >\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name={backSVG}\n                      size=\"30px\"\n                      className=\"contents circled\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        </>\n      );\n    }\n\n    if (this.state.readOnlyBehavior) {\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onDisableBlocksBehavior}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          <Portal\n            node={this.state.isClient && document.getElementById('toolbar')}\n          >\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name={backSVG}\n                      size=\"30px\"\n                      className=\"contents circled\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        </>\n      );\n    }\n\n    // Render layout editor\n    const blocksFieldName = getBlocksFieldname(\n      this.props.schema?.properties || {},\n    );\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(\n      this.props.schema?.properties || {},\n    );\n    return (\n      <div id=\"page-controlpanel-layout\">\n        <Form\n          isAdminForm\n          ref={this.form}\n          schema={{\n            fieldsets: [\n              {\n                id: 'layout',\n                title: 'Layout',\n                fields: [blocksFieldName, blocksLayoutFieldname],\n              },\n            ],\n            properties: {\n              ...this.props.schema.properties[blocksFieldName],\n              ...this.props.schema.properties[blocksLayoutFieldname],\n            },\n            required: [],\n          }}\n          formData={this.state.content}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          pathname={this.props.pathname}\n          visual={this.state.visual}\n          hideActions\n        />\n        <Portal\n          node={this.state.isClient && document.getElementById('sidebar')}\n        >\n          <Sidebar settingsTab={true} documentTab={false} />\n        </Portal>\n        <Portal\n          node={this.state.isClient && document.getElementById('toolbar')}\n        >\n          <Toolbar\n            pathname={this.props.pathname}\n            hideDefaultViewButtons\n            inner={\n              <>\n                <Button\n                  id=\"toolbar-save\"\n                  className=\"save\"\n                  aria-label={this.props.intl.formatMessage(messages.save)}\n                  onClick={() => this.form.current.onSubmit()}\n                  disabled={this.props.schemaRequest.update.loading}\n                  loading={this.props.schemaRequest.update.loading}\n                >\n                  <Icon\n                    name={saveSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.save)}\n                  />\n                </Button>\n                <Button\n                  className=\"cancel\"\n                  aria-label={this.props.intl.formatMessage(messages.cancel)}\n                  onClick={() => this.onCancel()}\n                >\n                  <Icon\n                    name={clearSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.cancel)}\n                  />\n                </Button>\n              </>\n            }\n          />\n        </Portal>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      cpanelRequest: state.controlpanels,\n      controlpanel: state.controlpanels.controlpanel,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n      parent: nth(props.location.pathname.split('/'), -3),\n    }),\n    { getSchema, updateSchema, getControlpanel, updateControlpanel },\n  ),\n)(ContentTypeLayout);\n","/**\n * Content type schema.\n * @module components/manage/Controlpanels/ContentTypeSchema\n */\n\nimport { getSchema, putSchema } from '@plone/volto/actions';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport { nth } from 'lodash';\nimport { Error, Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { Button, Header } from 'semantic-ui-react';\n\nconst messages = defineMessages({\n  title: {\n    id: '{id} Schema',\n    defaultMessage: '{id} Schema',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  typeCreated: {\n    id: 'Schema updates',\n    defaultMessage: 'Schema updates',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n});\n\n/**\n * ContentTypeSchema class.\n * @class ContentTypeSchema\n * @extends Component\n */\nclass ContentTypeSchema extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getSchema: PropTypes.func.isRequired,\n    putSchema: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {};\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      schema: null,\n      content: null,\n      isClient: false,\n    };\n\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getSchema(this.props.id);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Schema error\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.error) {\n      this.setState({\n        error: nextProps.schemaRequest.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      let properties = nextProps.schema?.properties || {};\n      let content = {};\n      let value, key;\n      for (key in properties) {\n        value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      this.setState({\n        schema: nextProps.schema,\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.loaded\n    ) {\n      // this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Schema update error\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.error\n    ) {\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={JSON.stringify(\n            nextProps.schemaRequest.put.error.response.body ||\n              nextProps.schemaRequest.put.error.response.text,\n          )}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.putSchema(this.props.id, data.schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    let url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  form = React.createRef();\n\n  makeSchemaList = (schema) => {\n    const result = {\n      title: 'Schema',\n      type: 'object',\n      fieldsets: [\n        {\n          fields: ['schema'],\n          id: 'default',\n          title: 'Default',\n        },\n      ],\n      properties: {\n        schema: {\n          description: 'Form schema',\n          title: 'Form schema',\n          type: 'schema',\n          id: 'schema',\n        },\n      },\n      required: [],\n      layouts: null,\n    };\n    result.layouts = schema.layouts.slice();\n\n    return result;\n  };\n\n  isEditable = (field) =>\n    !field.behavior || field.behavior.includes('generated');\n\n  makeSchemaData = (schema, contentType) => {\n    const fieldsets = schema.fieldsets.map((fieldset) => {\n      const readOnlyFields = fieldset.fields.filter(\n        (fieldId) =>\n          !this.isEditable(schema.properties[fieldId]) &&\n          fieldId !== 'changeNote',\n      );\n      const userCreatedFields = fieldset.fields.filter((fieldId) =>\n        this.isEditable(schema.properties[fieldId]),\n      );\n      const changeNote = fieldset.fields.filter(\n        (fieldId) => fieldId === 'changeNote',\n      );\n      return {\n        ...fieldset,\n        fields: [...readOnlyFields, ...userCreatedFields, ...changeNote],\n      };\n    });\n    const result = {\n      ...schema,\n      fieldsets,\n      contentType,\n    };\n\n    return { schema: JSON.stringify(result) };\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (this.state.schema) {\n      const contentTypeSchema = this.makeSchemaList(this.state.schema);\n      const schemaData = this.makeSchemaData(this.state.schema, this.props.id);\n\n      return (\n        <div id=\"page-controlpanel-schema\" className=\"ui container\">\n          <Header disabled>\n            {this.props.intl.formatMessage(messages.title, {\n              id: this.props?.schema?.title || this.props.id,\n            })}\n          </Header>\n          <Form\n            ref={this.form}\n            schema={contentTypeSchema}\n            formData={schemaData}\n            pathname={this.props.pathname}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            hideActions\n          />\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      disabled={this.props.schemaRequest.put.loading}\n                      loading={this.props.schemaRequest.put.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button\n                      className=\"cancel\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />\n            </Portal>\n          )}\n        </div>\n      );\n    }\n\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n    }),\n    {\n      getSchema,\n      putSchema,\n    },\n  ),\n)(ContentTypeSchema);\n","/**\n * Content Types component.\n * @module components/manage/Controlpanels/ContentTypes\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { last } from 'lodash';\nimport { Confirm, Container, Table, Button, Header } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport {\n  Error,\n  Icon,\n  ModalForm,\n  Toolbar,\n  Toast,\n  ContentTypesActions,\n} from '@plone/volto/components';\nimport {\n  getControlpanel,\n  postControlpanel,\n  deleteControlpanel,\n} from '@plone/volto/actions';\nimport { getId } from '@plone/volto/helpers';\n\nimport addSVG from '@plone/volto/icons/add-document.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add',\n    defaultMessage: 'Add',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  yes: {\n    id: 'Yes',\n    defaultMessage: 'Yes',\n  },\n  no: {\n    id: 'No',\n    defaultMessage: 'No',\n  },\n  addTypeFormTitle: {\n    id: 'Add new content type',\n    defaultMessage: 'Add new content type',\n  },\n  addTypeButtonTitle: {\n    id: 'Add new content type',\n    defaultMessage: 'Add new content type',\n  },\n  addTypeFormTitleTitle: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  addTypeFormDescriptionTitle: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  typeCreated: {\n    id: 'Content type created',\n    defaultMessage: 'Content type created',\n  },\n  deleteConfirmTitle: {\n    id: 'Delete Type',\n    defaultMessage: 'Delete Type',\n  },\n  typeDeleted: {\n    id: 'Content type deleted',\n    defaultMessage: 'Content type deleted',\n  },\n});\n\n/**\n * ContentTypes class.\n * @class ContentTypes\n * @extends Component\n */\nclass ContentTypes extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    postControlpanel: PropTypes.func.isRequired,\n    deleteControlpanel: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      items: PropTypes.arrayOf(\n        PropTypes.shape({\n          '@id': PropTypes.string,\n          title: PropTypes.string,\n          description: PropTypes.string,\n          count: PropTypes.integer,\n        }),\n      ),\n    }),\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Types\n   */\n  constructor(props) {\n    super(props);\n    this.onAddTypeSubmit = this.onAddTypeSubmit.bind(this);\n    this.onAddTypeError = this.onAddTypeError.bind(this);\n    this.onAddTypeSuccess = this.onAddTypeSuccess.bind(this);\n    this.onEdit = this.onEdit.bind(this);\n    this.onLayout = this.onLayout.bind(this);\n    this.onSchema = this.onSchema.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteTypeSuccess = this.onDeleteTypeSuccess.bind(this);\n\n    this.state = {\n      showAddType: false,\n      addTypeError: '',\n      showDelete: false,\n      typeToDelete: undefined,\n      error: null,\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getControlpanel(this.props.id);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Get\n    if (\n      this.props.cpanelRequest.get.loading &&\n      nextProps.cpanelRequest.get.error\n    ) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error,\n      });\n    }\n\n    // Create\n    if (\n      this.props.cpanelRequest.post.loading &&\n      nextProps.cpanelRequest.post.loaded\n    ) {\n      this.props.getControlpanel(this.props.id);\n      this.onAddTypeSuccess();\n    }\n    if (\n      this.props.cpanelRequest.post.loading &&\n      nextProps.cpanelRequest.post.error\n    ) {\n      this.onAddTypeError(nextProps.cpanelRequest.post.error);\n    }\n\n    // Delete\n    if (\n      this.props.cpanelRequest.delete.loading &&\n      nextProps.cpanelRequest.delete.loaded\n    ) {\n      this.props.getControlpanel(this.props.id);\n      this.onDeleteTypeSuccess();\n    }\n  }\n\n  /** Add  */\n\n  /**\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @memberof ContentTypes\n   * @returns {undefined}\n   */\n  onAddTypeSubmit(data, callback) {\n    this.props.postControlpanel(this.props.id, data);\n    this.setState({\n      addTypeSetFormDataCallback: callback,\n    });\n  }\n\n  /**\n   * Handle Errors after postControlpanel()\n   *\n   * @param {*} error object. Requires the property .message\n   * @memberof ContentTypes\n   * @returns {undefined}\n   */\n  onAddTypeError(error) {\n    this.setState({\n      addTypeError: error.message,\n    });\n  }\n\n  /**\n   * Handle Success after postControlpanel()\n   *\n   * @memberof ContentTypes\n   * @returns {undefined}\n   */\n  onAddTypeSuccess() {\n    this.state.addTypeSetFormDataCallback({});\n    this.setState({\n      showAddType: false,\n      addTypeError: undefined,\n      addTypeSetFormDataCallback: undefined,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.typeCreated)}\n      />,\n    );\n  }\n\n  /** Edit  */\n  /**\n   * @param {*} event Event object.\n   * @param {*} { value }\n   * @memberof ContentTypes\n   * @returns {undefined}\n   */\n  onEdit(event, { value }) {\n    this.props.history.push(value);\n  }\n\n  /**\n   * Layout button click\n   * @param {*} event\n   * @param {string} value\n   * @returns {undefined}\n   */\n  onLayout(event, { value }) {\n    this.props.history.push(value);\n  }\n\n  /** Delete */\n  /**\n   * @param {*} event Event object.\n   * @param {*} { value }\n   * @memberof ContentTypes\n   * @returns {undefined}\n   */\n  onDelete(event, { value }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        typeToDelete: value,\n      });\n    }\n  }\n\n  /** Folder\n   * @param {Object} event Event object.\n   * @param {string} { value }\n   * @memberof ContentTypes\n   * @returns {undefined}\n   */\n  onSchema(event, { value }) {\n    if (value) {\n      this.props.history.push(`${this.props.pathname}/${value}/schema`);\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @memberof ContentTypes\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    const item = getId(this.state.typeToDelete);\n    this.props.deleteControlpanel(this.props.id, item);\n    this.setState({\n      showDelete: false,\n      typeToDelete: undefined,\n    });\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @memberof ContentTypes\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      typeToDelete: undefined,\n    });\n  }\n\n  /**\n   * Handle Success after deleteControlpanel()\n   *\n   * @method onDeleteTypeSuccess\n   * @memberof ContentTypes\n   * @returns {undefined}\n   */\n  onDeleteTypeSuccess() {\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.typeDeleted)}\n      />,\n    );\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (!this.props.controlpanel) {\n      return <div />;\n    }\n    return (\n      <Container className=\"types-control-panel\">\n        <div className=\"container\">\n          <Confirm\n            open={this.state.showDelete}\n            header={this.props.intl.formatMessage(messages.deleteConfirmTitle)}\n            cancelButton={this.props.intl.formatMessage(messages.no)}\n            confirmButton={this.props.intl.formatMessage(messages.yes)}\n            content={\n              <div className=\"content\">\n                <ul className=\"content\">\n                  <FormattedMessage\n                    id=\"Do you really want to delete the type {typename}?\"\n                    defaultMessage=\"Do you really want to delete type {typename}?\"\n                    values={{\n                      typename: <b>{getId(this.state.typeToDelete || '')}</b>,\n                    }}\n                  />\n                </ul>\n              </div>\n            }\n            onCancel={this.onDeleteCancel}\n            onConfirm={this.onDeleteOk}\n          />\n          <ModalForm\n            open={this.state.showAddType}\n            className=\"modal\"\n            onSubmit={this.onAddTypeSubmit}\n            submitError={this.state.addTypeError}\n            onCancel={() => this.setState({ showAddType: false })}\n            title={this.props.intl.formatMessage(messages.addTypeFormTitle)}\n            loading={this.props.cpanelRequest.post.loading}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: 'Content type',\n                  fields: ['title', 'description'],\n                },\n              ],\n              properties: {\n                title: {\n                  title: this.props.intl.formatMessage(\n                    messages.addTypeFormTitleTitle,\n                  ),\n                  type: 'string',\n                  description: '',\n                },\n                description: {\n                  title: this.props.intl.formatMessage(\n                    messages.addTypeFormDescriptionTitle,\n                  ),\n                  type: 'string',\n                  description: '',\n                },\n              },\n              required: ['title'],\n            }}\n          />\n        </div>\n        <Container>\n          <article id=\"content\">\n            <Header disabled>{this.props.controlpanel.title}</Header>\n            <section id=\"content-core\">\n              <Table compact singleLine striped>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Type\" defaultMessage=\"Type\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"Description\"\n                        defaultMessage=\"Description\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Items\" defaultMessage=\"Items\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell textAlign=\"right\">\n                      <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {this.props.controlpanel.items.map((item) => (\n                    <Table.Row key={item['@id']}>\n                      <Table.Cell>\n                        <Link to={`${this.props.pathname}/${item['id']}`}>\n                          {item.title}\n                        </Link>\n                      </Table.Cell>\n                      <Table.Cell>{item.description}</Table.Cell>\n                      <Table.Cell>{item.count}</Table.Cell>\n                      <Table.Cell textAlign=\"right\">\n                        <ContentTypesActions\n                          item={item}\n                          path={this.props.pathname}\n                          onEdit={this.onEdit}\n                          onDelete={this.onDelete}\n                          onSchema={this.onSchema}\n                          onLayout={this.onLayout}\n                        />\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </section>\n          </article>\n        </Container>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to={getParentUrl(this.props.pathname)} className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      size=\"30px\"\n                      className=\"contents circled\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                  <Button\n                    className=\"add\"\n                    aria-label={this.props.intl.formatMessage(messages.add)}\n                    tabIndex={0}\n                    id=\"toolbar-add\"\n                    onClick={() => {\n                      this.setState({ showAddType: true });\n                    }}\n                  >\n                    <Icon\n                      name={addSVG}\n                      title={this.props.intl.formatMessage(\n                        messages.addTypeButtonTitle,\n                      )}\n                    />\n                  </Button>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      controlpanel: state.controlpanels.controlpanel,\n      cpanelRequest: state.controlpanels,\n      pathname: props.location.pathname,\n      id: last(props.location.pathname.split('/')),\n    }),\n    {\n      getControlpanel,\n      postControlpanel,\n      deleteControlpanel,\n    },\n  ),\n)(ContentTypes);\n","/**\n * Content Types component.\n * @module components/manage/Controlpanels/ContentTypesActions\n */\n\nimport React from 'react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport layoutSVG from '@plone/volto/icons/file.svg';\nimport folderSVG from '@plone/volto/icons/folder.svg';\nimport editSVG from '@plone/volto/icons/pen.svg';\n/**\n * ContentTypesActions class.\n * @class ContentTypesActions\n * @extends Component\n */\nconst ContentTypesActions = ({\n  item,\n  path,\n  onEdit,\n  onDelete,\n  onLayout,\n  onSchema,\n}) => {\n  return (\n    <Dropdown icon=\"ellipsis horizontal\" className={`actions-${item.id}`}>\n      <Dropdown.Menu className=\"left\">\n        <Dropdown.Item\n          onClick={onEdit}\n          value={`${path}/${item.id}`}\n          className={`edit-${item.id}`}\n        >\n          <Icon name={editSVG} size=\"15px\" />\n          <FormattedMessage id=\"Edit\" defaultMessage=\"Edit\" />\n        </Dropdown.Item>\n        <Dropdown.Item onClick={onSchema} value={item.id}>\n          <Icon name={folderSVG} size=\"15px\" />\n          <FormattedMessage id=\"Schema\" defaultMessage=\"Schema\" />\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={onLayout}\n          value={`${path}/${item.id}/layout`}\n          className={`layout-${item.id}`}\n        >\n          <Icon name={layoutSVG} size=\"15px\" />\n          <FormattedMessage id=\"Layout\" defaultMessage=\"Layout\" />\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={onDelete}\n          value={item['@id']}\n          className={`delete-${item.id}`}\n        >\n          <Icon name={trashSVG} size=\"15px\" />\n          <FormattedMessage id=\"Delete\" defaultMessage=\"Delete\" />\n        </Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default injectIntl(ContentTypesActions);\n","/**\n * Controlpanel component.\n * @module components/manage/Controlpanels/Controlpanel\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Container } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\n\nimport { Form, Icon, Toolbar, Toast } from '@plone/volto/components';\nimport { updateControlpanel, getControlpanel } from '@plone/volto/actions';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n});\n\n/**\n * Controlpanel class.\n * @class Controlpanel\n * @extends Component\n */\nclass Controlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.object,\n      schema: PropTypes.object,\n      title: PropTypes.string,\n    }),\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getControlpanel(this.props.id);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n  form = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.controlpanel) {\n      return (\n        <div id=\"page-controlpanel\">\n          <Helmet title={this.props.controlpanel.title} />\n          <Container>\n            <Form\n              ref={this.form}\n              title={this.props.controlpanel.title}\n              schema={this.props.controlpanel.schema}\n              formData={this.props.controlpanel.data}\n              onSubmit={this.onSubmit}\n              onCancel={this.onCancel}\n              hideActions\n              loading={this.props.updateRequest.loading}\n            />\n          </Container>\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      disabled={this.props.updateRequest.loading}\n                      loading={this.props.updateRequest.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button\n                      className=\"cancel\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />\n            </Portal>\n          )}\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      controlpanel: state.controlpanels.controlpanel,\n      updateRequest: state.controlpanels.update,\n      id: props.match.params.id,\n      pathname: props.location.pathname,\n    }),\n    { updateControlpanel, getControlpanel },\n  ),\n  withRouter,\n)(Controlpanel);\n","/**\n * Controlpanels component.\n * @module components/manage/Controlpanels/Controlpanels\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { Portal } from 'react-portal';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container, Grid, Header, Icon, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport Icons from '@plone/volto/constants/ControlpanelIcons';\nimport { listControlpanels, getSystemInformation } from '@plone/volto/actions';\nimport {\n  Error,\n  Icon as IconNext,\n  Toolbar,\n  VersionOverview,\n} from '@plone/volto/components';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  sitesetup: {\n    id: 'Site Setup',\n    defaultMessage: 'Site Setup',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  versionoverview: {\n    id: 'Version Overview',\n    defaultMessage: 'Version Overview',\n  },\n  moderatecomments: {\n    id: 'Moderate Comments',\n    defaultMessage: 'Moderate Comments',\n  },\n  usersandgroups: {\n    id: 'Users and Groups',\n    defaultMessage: 'Users and Groups',\n  },\n});\n\n/**\n * Controlpanels container class.\n * @class Controlpanels\n * @extends Component\n */\nclass Controlpanels extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listControlpanels: PropTypes.func.isRequired,\n    controlpanels: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        group: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.listControlpanels();\n    this.props.getSystemInformation();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Error\n    if (\n      this.props.controlpanelsRequest.loading &&\n      nextProps.controlpanelsRequest.error\n    ) {\n      this.setState({\n        error: nextProps.controlpanelsRequest.error,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    const controlpanels = map(\n      concat(this.props.controlpanels, [\n        {\n          '@id': '/addons',\n          group: 'General',\n          title: 'Add-Ons',\n        },\n        {\n          '@id': '/database',\n          group: 'General',\n          title: 'Database',\n        },\n        {\n          '@id': '/moderate-comments',\n          group: 'Content',\n          title: this.props.intl.formatMessage(messages.moderatecomments),\n        },\n        {\n          '@id': '/users',\n          group: 'Users',\n          title: this.props.intl.formatMessage(messages.usersandgroups),\n        },\n      ]),\n      (controlpanel) => ({\n        ...controlpanel,\n        id: last(controlpanel['@id'].split('/')),\n      }),\n    );\n    const groups = map(uniqBy(controlpanels, 'group'), 'group');\n    return (\n      <div className=\"view-wrapper\">\n        <Helmet title={this.props.intl.formatMessage(messages.sitesetup)} />\n        <Container className=\"controlpanel\">\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage id=\"Site Setup\" defaultMessage=\"Site Setup\" />\n            </Segment>\n            {map(groups, (group) => [\n              <Segment key={`header-${group}`} secondary>\n                {group}\n              </Segment>,\n              <Segment key={`body-${group}`} attached>\n                <Grid columns={6}>\n                  <Grid.Row>\n                    {map(filter(controlpanels, { group }), (controlpanel) => (\n                      <Grid.Column key={controlpanel.id}>\n                        <Link to={`/controlpanel/${controlpanel.id}`}>\n                          <Header as=\"h3\" icon textAlign=\"center\">\n                            <Icon name={Icons[controlpanel.id] || 'setting'} />\n                            <Header.Content>\n                              {controlpanel.title}\n                            </Header.Content>\n                          </Header>\n                        </Link>\n                      </Grid.Column>\n                    ))}\n                  </Grid.Row>\n                </Grid>\n              </Segment>,\n            ])}\n          </Segment.Group>\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"Version Overview\"\n                defaultMessage=\"Version Overview\"\n              />\n            </Segment>\n            <Segment attached>\n              {this.props.systemInformation ? (\n                <VersionOverview {...this.props.systemInformation} />\n              ) : null}\n            </Segment>\n          </Segment.Group>\n        </Container>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link to=\"/\" className=\"item\">\n                  <IconNext\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      controlpanels: state.controlpanels.controlpanels,\n      controlpanelsRequest: state.controlpanels.list,\n      pathname: props.location.pathname,\n      systemInformation: state.controlpanels.systeminformation,\n    }),\n    { listControlpanels, getSystemInformation },\n  ),\n)(Controlpanels);\n","/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/DatabaseInformation\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Container, Divider, Message, Segment, Table } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { getDatabaseInformation } from '@plone/volto/actions';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Icon, Toolbar } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\n/**\n * DatabaseInformation class.\n * @class DatabaseInformation\n * @extends Component\n */\nclass DatabaseInformation extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getDatabaseInformation: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs DiffComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentWillMount() {\n    this.props.getDatabaseInformation();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.databaseInformation ? (\n      <Container id=\"database-page\" className=\"controlpanel-database\">\n        <Helmet title=\"DatabaseInformation\" />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Database Information\"\n              defaultMessage=\"Database Information\"\n            />\n          </Segment>\n          <Segment>\n            <Message>\n              <FormattedMessage\n                id=\"The Database Manager allow you to view database status information\"\n                defaultMessage=\"The Database Manager allow you to view database status information\"\n              />\n            </Message>\n          </Segment>\n          <Segment>\n            <Message>\n              <Message.Header>\n                <FormattedMessage\n                  id=\"Database main\"\n                  defaultMessage=\"Database main\"\n                />\n              </Message.Header>\n            </Message>\n            <Table celled padded columns=\"2\">\n              <Table.Body>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Database Location\"\n                      defaultMessage=\"Database Location\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>\n                    {this.props.databaseInformation.db_name}\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Database Size\"\n                      defaultMessage=\"Database Size\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>\n                    {this.props.databaseInformation.database_size}\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Total number of objects in the database\"\n                      defaultMessage=\"Total number of objects in the database\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>\n                    {this.props.databaseInformation.db_size}\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Total number of objects in memory from all caches\"\n                      defaultMessage=\"Total number of objects in memory from all caches\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>\n                    {this.props.databaseInformation.cache_size}\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Target number of objects in memory per cache\"\n                      defaultMessage=\"Target number of objects in memory per cache\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>\n                    {this.props.databaseInformation.cache_length}\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell>\n                    <FormattedMessage\n                      id=\"Target memory size per cache in bytes\"\n                      defaultMessage=\"Target memory size per cache in bytes\"\n                    />\n                  </Table.Cell>\n                  <Table.Cell>\n                    {this.props.databaseInformation.cache_length_bytes}\n                  </Table.Cell>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Segment>\n          <Segment>\n            <Divider />\n\n            <Message>\n              <Message.Header>\n                <FormattedMessage\n                  id=\"Total number of objects in each cache\"\n                  defaultMessage=\"Total number of objects in each cache\"\n                />\n              </Message.Header>\n            </Message>\n            <Table celled padded>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>\n                    <FormattedMessage\n                      id=\"Cache Name\"\n                      defaultMessage=\"Cache Name\"\n                    />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell>\n                    <FormattedMessage\n                      id=\"Number of active objects\"\n                      defaultMessage=\"Number of active objects\"\n                    />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell>\n                    <FormattedMessage\n                      id=\"Total active and non-active objects\"\n                      defaultMessage=\"Total active and non-active objects\"\n                    />\n                  </Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n              {this.props.databaseInformation.cache_detail_length.map(\n                (item) => (\n                  <Table.Row>\n                    <Table.Cell>{item.connection}</Table.Cell>\n                    <Table.Cell>{item.ngsize}</Table.Cell>\n                    <Table.Cell>{item.size}</Table.Cell>\n                  </Table.Row>\n                ),\n              )}\n            </Table>\n          </Segment>\n        </Segment.Group>\n\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to=\"/controlpanel\" className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      aria-label={this.props.intl.formatMessage(messages.back)}\n                      className=\"contents circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    ) : null;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      databaseInformation: state.controlpanels.databaseinformation,\n      pathname: props.location.pathname,\n    }),\n    { getDatabaseInformation },\n  ),\n)(DatabaseInformation);\n","/**\n * Moderate comments component.\n * @module components/manage/Controlpanels/ModerateComments\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { getParentUrl, Helmet } from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Container, Button, Table } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { deleteComment, searchContent } from '@plone/volto/actions';\nimport { CommentEditModal, Icon, Toolbar } from '@plone/volto/components';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  ModerateComments: {\n    id: 'Moderate comments',\n    defaultMessage: 'Moderate comments',\n  },\n});\n\n/**\n * ModerateCommentsComponent class.\n * @class ModerateComments\n * @extends Component\n */\nclass ModerateComments extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    searchContent: PropTypes.func.isRequired,\n    deleteComment: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        author_name: PropTypes.string,\n        creation_date: PropTypes.string,\n        text: PropTypes.shape({\n          data: PropTypes.string,\n        }),\n        is_deletable: PropTypes.bool,\n        is_editable: PropTypes.bool,\n      }),\n    ).isRequired,\n    deleteRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Comments\n   */\n  constructor(props) {\n    super(props);\n    this.onDelete = this.onDelete.bind(this);\n    this.onEdit = this.onEdit.bind(this);\n    this.onEditOk = this.onEditOk.bind(this);\n    this.onEditCancel = this.onEditCancel.bind(this);\n    this.state = {\n      showEdit: false,\n      editId: null,\n      editText: null,\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.searchContent('', {\n      portal_type: 'Discussion Item',\n      fullobjects: true,\n    });\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded) {\n      this.props.searchContent('', {\n        portal_type: 'Discussion Item',\n        fullobjects: true,\n      });\n    }\n  }\n\n  /**\n   * Delete handler\n   * @method onDelete\n   * @param {Object} event Event object.\n   * @param {string} value Delete value.\n   * @returns {undefined}\n   */\n  onDelete(event, { value }) {\n    this.props.deleteComment(value);\n  }\n\n  /**\n   * Edit handler\n   * @method onEdit\n   * @param {Object} event Event object.\n   * @param {string} value Delete value.\n   * @returns {undefined}\n   */\n  onEdit(event, { value }) {\n    this.setState({\n      showEdit: true,\n      editId: value.id,\n      editText: value.text,\n    });\n  }\n\n  /**\n   * On edit ok\n   * @method onEditOk\n   * @returns {undefined}\n   */\n  onEditOk() {\n    this.setState({\n      showEdit: false,\n      editId: null,\n      editText: null,\n    });\n    this.props.searchContent('', {\n      portal_type: 'Discussion Item',\n      fullobjects: true,\n    });\n  }\n\n  /**\n   * On edit cancel\n   * @method onEditCancel\n   * @returns {undefined}\n   */\n  onEditCancel() {\n    this.setState({\n      showEdit: false,\n      editId: null,\n      editText: null,\n    });\n  }\n\n  /**\n   * Back/Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(getParentUrl(this.props.pathname));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-moderate-comments\">\n        <CommentEditModal\n          open={this.state.showEdit}\n          onCancel={this.onEditCancel}\n          onOk={this.onEditOk}\n          id={this.state.editId}\n          text={this.state.editText}\n        />\n        <Helmet\n          title={this.props.intl.formatMessage(messages.ModerateComments)}\n        />\n        <Container>\n          <article id=\"content\">\n            <header>\n              <h1 className=\"documentFirstHeading\">\n                <FormattedMessage\n                  id=\"Moderate comments\"\n                  defaultMessage=\"Moderate comments\"\n                />\n              </h1>\n            </header>\n            <section id=\"content-core\">\n              <Table compact singleLine striped>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"Commenter\"\n                        defaultMessage=\"Commenter\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Date\" defaultMessage=\"Date\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Comment\" defaultMessage=\"Comment\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Action\" defaultMessage=\"Action\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {this.props.items.map((item) => (\n                    <Table.Row key={item['@id']}>\n                      <Table.Cell>{item.author_name}</Table.Cell>\n                      <Table.Cell>\n                        <span title={moment(item.creation_date).format('LLLL')}>\n                          {moment(item.creation_date).fromNow()}\n                        </span>\n                      </Table.Cell>\n                      <Table.Cell>{item.text.data}</Table.Cell>\n                      <Table.Cell>\n                        {item.is_editable && (\n                          <Button\n                            onClick={this.onEdit}\n                            value={{ id: item['@id'], text: item.text.data }}\n                            primary\n                          >\n                            <FormattedMessage id=\"Edit\" defaultMessage=\"Edit\" />\n                          </Button>\n                        )}\n                        {item.is_deletable && (\n                          <Button\n                            onClick={this.onDelete}\n                            value={item['@id']}\n                            color=\"red\"\n                          >\n                            <FormattedMessage\n                              id=\"Delete\"\n                              defaultMessage=\"Delete\"\n                            />\n                          </Button>\n                        )}\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </section>\n          </article>\n        </Container>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      items: state.search.items,\n      deleteRequest: state.comments.delete,\n      pathname: props.location.pathname,\n    }),\n    { deleteComment, searchContent },\n  ),\n)(ModerateComments);\n","/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport {\n  createGroup,\n  createUser,\n  deleteGroup,\n  deleteUser,\n  listGroups,\n  listRoles,\n  listUsers,\n  updateGroup,\n  showAllUsers,\n  updateUser,\n} from '@plone/volto/actions';\nimport {\n  Icon,\n  ModalForm,\n  Toast,\n  Toolbar,\n  UsersControlpanelGroups,\n  UsersControlpanelUser,\n} from '@plone/volto/components';\nimport { getBaseUrl, Helmet, messages } from '@plone/volto/helpers';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport addSvg from '@plone/volto/icons/circle-plus.svg';\nimport { find, isEqual, map } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport {\n  Button,\n  Confirm,\n  Container,\n  Divider,\n  Form,\n  Input,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\n\n/**\n * UsersControlpanel class.\n * @class UsersControlpanel\n * @extends Component\n */\nclass UsersControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listRoles: PropTypes.func.isRequired,\n    listUsers: PropTypes.func.isRequired,\n    updateUser: PropTypes.func,\n    listGroups: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        username: PropTypes.string,\n        fullname: PropTypes.string,\n        roles: PropTypes.arrayOf(PropTypes.string),\n      }),\n    ).isRequired,\n    groups: PropTypes.arrayOf(\n      PropTypes.shape({\n        Title: PropTypes.string,\n        Description: PropTypes.string,\n        roles: PropTypes.arrayOf(PropTypes.string),\n        groupname: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.onSearchGroups = this.onSearchGroups.bind(this);\n    this.delete = this.delete.bind(this);\n    this.deleteGroup = this.deleteGroup.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddUserSubmit = this.onAddUserSubmit.bind(this);\n    this.onAddGroupSubmit = this.onAddGroupSubmit.bind(this);\n    this.onAddUserError = this.onAddUserError.bind(this);\n    this.onAddGroupError = this.onAddGroupError.bind(this);\n    this.onAddUserSuccess = this.onAddUserSuccess.bind(this);\n    this.onAddGroupSuccess = this.onAddGroupSuccess.bind(this);\n    this.updateUserRole = this.updateUserRole.bind(this);\n    this.updateGroupRole = this.updateGroupRole.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onShowAllUser = this.onShowAllUser.bind(this);\n    this.state = {\n      search: '',\n      showAddUser: false,\n      showAddUserErrorConfirm: false,\n      addUserError: '',\n      addGroupError: '',\n      showDelete: false,\n      userToDelete: undefined,\n      updateUser: undefined,\n      groupToDelete: undefined,\n      showAddGroup: false,\n      entries: props.users,\n      groupEntries: props.groups,\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.listRoles();\n    this.props.listGroups();\n    this.setState({ isClient: true });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded) ||\n      (this.props.createRequest.loading && nextProps.createRequest.loaded)\n    ) {\n      this.props.listUsers(this.state.search);\n    }\n    if (\n      (this.props.deleteGroupRequest.loading &&\n        nextProps.deleteGroupRequest.loaded) ||\n      (this.props.createGroupRequest.loading &&\n        nextProps.createGroupRequest.loaded)\n    ) {\n      this.props.listGroups(this.state.search);\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.loaded) {\n      this.onAddUserSuccess();\n    }\n    if (\n      this.props.createGroupRequest.loading &&\n      nextProps.createGroupRequest.loaded\n    ) {\n      this.onAddGroupSuccess();\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.error) {\n      this.onAddUserError(nextProps.createRequest.error);\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.error) {\n      this.onAddGroupError(nextProps.createRequest.error);\n    }\n    this.setState({\n      entries: map(nextProps.users, (entry) => {\n        const values = find(this.state.entries, { id: entry.id });\n        return {\n          ...entry,\n          roles: values ? values.roles : entry.roles,\n        };\n      }),\n      groupEntries: map(nextProps.groups, (entry) => {\n        const values = find(this.state.groupEntries, { id: entry.id });\n        return {\n          ...entry,\n          roles: values ? values.roles : entry.roles,\n        };\n      }),\n    });\n  }\n\n  getUserFromProps(value) {\n    return find(this.props.users, ['@id', value]);\n  }\n\n  getGroupFromProps(value) {\n    return find(this.props.groups, ['@id', value]);\n  }\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSearch(event) {\n    event.preventDefault();\n    this.props.listUsers(this.state.search);\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object\n   * @memberof UsersControlpanel\n   * @returns {undefined}\n   */\n  onSearchGroups(event) {\n    event.preventDefault();\n    this.props.listGroups(this.state.search);\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   * Delete a user\n   * @method delete\n   * @param {object} event Event object.\n   * @param {string} value username.\n   * @returns {undefined}\n   */\n  delete(event, { value }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        userToDelete: this.getUserFromProps(value),\n      });\n    }\n  }\n  /**\n   *\n   *\n   * @param {*} event Event object.\n   * @param {*} { value } id (groupname)\n   * @memberof UsersControlpanel\n   * @returns {undefined}\n   */\n  deleteGroup(event, { value }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        groupToDelete: this.getGroupFromProps(value),\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.userToDelete) {\n      this.props.deleteUser(this.state.userToDelete.id);\n      this.setState({\n        showDelete: false,\n        userToDelete: undefined,\n      });\n    } else {\n      this.props.deleteGroup(this.state.groupToDelete.id);\n      this.setState({\n        showDelete: false,\n        groupToDelete: undefined,\n      });\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n    });\n  }\n\n  /**\n   * Callback to be called by the ModalForm when the form is submitted.\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @returns {undefined}\n   */\n  onAddUserSubmit(data, callback) {\n    this.props.createUser(data);\n    this.setState({\n      addUserSetFormDataCallback: callback,\n    });\n  }\n\n  /**\n   *\n   *\n   * @param {*} data\n   * @param {*} callback\n   * @memberof UsersControlpanel\n   */\n  updateUserRole(name, value) {\n    this.setState({\n      entries: map(this.state.entries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === name\n            ? entry.roles.includes(value) === false\n              ? entry.roles.concat([value])\n              : [].concat(entry.roles.filter((e) => e !== value))\n            : entry.roles,\n      })),\n    });\n  }\n  /**\n   *\n   * @param {*} name\n   * @param {*} value\n   * @memberof UsersControlpanel\n   */\n  updateGroupRole(name, value) {\n    this.setState({\n      groupEntries: map(this.state.groupEntries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === name\n            ? entry.roles.includes(value) === false\n              ? entry.roles.concat([value])\n              : [].concat(entry.roles.filter((e) => e !== value))\n            : entry.roles,\n      })),\n    });\n  }\n\n  /**\n   *\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @memberof UsersControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSubmit(data, callback) {\n    this.props.createGroup(data);\n    this.setState({\n      addGroupSetFormDataCallback: callback,\n    });\n  }\n\n  /**\n   * Handle Errors after createUser()\n   *\n   * @param {object} error object. Requires the property .message\n   * @returns {undefined}\n   */\n  onAddUserError(error) {\n    this.setState({\n      addUserError: error.message,\n    });\n  }\n  /**\n   * Handle Errors after createGroup()\n   *\n   * @param {*} error object. Requires the property .message\n   * @memberof UsersControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupError(error) {\n    this.setState({\n      addGroupError: error.message,\n    });\n  }\n\n  /**\n   * Handle Success after createUser()\n   *\n   * @returns {undefined}\n   */\n  onAddUserSuccess() {\n    this.state.addUserSetFormDataCallback({});\n    this.setState({\n      showAddUser: false,\n      addUserError: undefined,\n      addUserSetFormDataCallback: undefined,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.userCreated)}\n      />,\n    );\n  }\n  /**\n   * Handle Success after createGroup()\n   *\n   * @memberof UsersControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSuccess() {\n    this.state.addGroupSetFormDataCallback({});\n    this.setState({\n      showAddGroup: false,\n      addGroupError: undefined,\n      addGroupSetFormDataCallback: undefined,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.groupCreated)}\n      />,\n    );\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    const userData = { roles: {} };\n    const groupData = { roles: {} };\n\n    event.preventDefault();\n    for (let i = 0; i < this.props.users.length; i += 1) {\n      if (!isEqual(this.props.users[i].roles, this.state.entries[i].roles)) {\n        this.state.entries[i].roles.forEach((item) => {\n          userData.roles[item] = true;\n        });\n        userData.id = this.state.entries[i].id;\n        this.props.updateUser(userData.id, userData);\n      }\n    }\n    for (let i = 0; i < this.props.groups.length; i += 1) {\n      if (\n        !isEqual(this.props.groups[i].roles, this.state.groupEntries[i].roles)\n      ) {\n        this.state.groupEntries[i].roles.forEach((item) => {\n          groupData.roles[item] = true;\n        });\n        groupData.id = this.state.groupEntries[i].id;\n        this.props.updateGroup(groupData.id, groupData);\n      }\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * ShowAllUser handler\n   * @method onShowAllUser\n   * @returns {undefined}\n   */\n  onShowAllUser() {\n    this.props.showAllUsers();\n    this.props.listUsers();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    let usernameToDelete = this.state.userToDelete\n      ? this.state.userToDelete.username\n      : '';\n    /*let fullnameToDelete = this.state.userToDelete\n      ? this.state.userToDelete.fullname\n      : '';*/\n    let groupNameToDelete = this.state.groupToDelete\n      ? this.state.groupToDelete.id\n      : '';\n\n    return (\n      <Container className=\"users-control-panel\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.usersAndGroups)}\n        />\n        <div className=\"container\">\n          <Confirm\n            open={this.state.showDelete}\n            header={\n              this.state.groupToDelete\n                ? this.props.intl.formatMessage(\n                    messages.deleteGroupConfirmTitle,\n                  )\n                : this.props.intl.formatMessage(messages.deleteUserConfirmTitle)\n            }\n            content={\n              this.state.groupToDelete ? (\n                <div className=\"content\">\n                  <ul className=\"content\">\n                    <FormattedMessage\n                      id=\"Do you really want to delete the group {groupname}?\"\n                      defaultMessage=\"Do you really want to delete the group {groupname}?\"\n                      values={{\n                        groupname: <b>{groupNameToDelete}</b>,\n                      }}\n                    />\n                  </ul>\n                </div>\n              ) : (\n                <div className=\"content\">\n                  <ul className=\"content\">\n                    <FormattedMessage\n                      id=\"Do you really want to delete the user {username}?\"\n                      defaultMessage=\"Do you really want to delete the user {username}?\"\n                      values={{\n                        username: <b>{usernameToDelete}</b>,\n                      }}\n                    />\n                  </ul>\n                </div>\n              )\n            }\n            onCancel={this.onDeleteCancel}\n            onConfirm={this.onDeleteOk}\n            size={null}\n          />\n          {this.state.showAddUser ? (\n            <ModalForm\n              open={this.state.showAddUser}\n              className=\"modal\"\n              onSubmit={this.onAddUserSubmit}\n              submitError={this.state.addUserError}\n              onCancel={() => this.setState({ showAddUser: false })}\n              title={this.props.intl.formatMessage(messages.addUserFormTitle)}\n              loading={this.props.createRequest.loading}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: 'FIXME: User Data',\n                    fields: [\n                      'username',\n                      'fullname',\n                      'email',\n                      'password',\n                      'roles',\n                      'groups',\n                    ],\n                  },\n                ],\n                properties: {\n                  username: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormUsernameTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  fullname: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormFullnameTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  email: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormEmailTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                    widget: 'email',\n                  },\n                  password: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormPasswordTitle,\n                    ),\n                    type: 'password',\n                    description: '',\n                    widget: 'password',\n                  },\n                  roles: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormRolesTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.roles.map((role) => [role.id, role.id]),\n                    description: '',\n                  },\n                  groups: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserGroupNameTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.groups.map((group) => [\n                      group.id,\n                      group.id,\n                    ]),\n                    description: '',\n                  },\n                },\n                required: ['username', 'fullname', 'email', 'password'],\n              }}\n            />\n          ) : null}\n\n          {this.state.showAddGroup ? (\n            <ModalForm\n              open={this.state.showAddGroup}\n              className=\"modal\"\n              onSubmit={this.onAddGroupSubmit}\n              submitError={this.state.addGroupError}\n              onCancel={() => this.setState({ showAddGroup: false })}\n              title={this.props.intl.formatMessage(messages.addGroupsFormTitle)}\n              loading={this.props.createGroupRequest.loading}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: 'FIXME: Group Data',\n                    fields: [\n                      'title',\n                      'description',\n                      'groupname',\n                      'email',\n                      'roles',\n                    ],\n                  },\n                ],\n                properties: {\n                  title: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormTitleTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  description: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormDescriptionTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  groupname: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormGroupNameTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  email: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormEmailTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                    widget: 'email',\n                  },\n                  roles: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormRolesTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.roles.map((role) => [role.id, role.id]),\n                    description: '',\n                  },\n                },\n                required: [\n                  'title',\n                  'description',\n                  'groupname',\n                  'email',\n                  'roles',\n                ],\n              }}\n            />\n          ) : null}\n        </div>\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Users and groups settings\"\n              defaultMessage=\"Users and groups settings\"\n            />\n          </Segment>\n          <Segment>\n            <FormattedMessage id=\"Users\" defaultMessage=\"Users\" />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearch}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchUsers,\n                  )}\n                  onChange={this.onChangeSearch}\n                  id=\"user-search-input\"\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form onSubmit={this.onSubmit}>\n            <div className=\"table\">\n              <Table padded striped attached unstackable>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"User name\"\n                        defaultMessage=\"User name\"\n                      />\n                    </Table.HeaderCell>\n                    {this.props.roles.map((role) => (\n                      <Table.HeaderCell key={role.id}>\n                        {role.id}\n                      </Table.HeaderCell>\n                    ))}\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  <Table.Row>\n                    {this.props.showAllUser ? null : (\n                      <Table.HeaderCell colspan={9}>\n                        <div className=\"show-all-users\">\n                          <p>\n                            {this.props.intl.formatMessage(\n                              messages.showAllUserText,\n                            )}\n                          </p>\n                          <Button\n                            className=\"show-all-users\"\n                            onClick={this.onShowAllUser}\n                          >\n                            {this.props.intl.formatMessage(\n                              messages.showAllUserButton,\n                            )}\n                          </Button>\n                        </div>\n                      </Table.HeaderCell>\n                    )}\n                  </Table.Row>\n                  {this.state.entries.map((user) => (\n                    <UsersControlpanelUser\n                      key={user.id}\n                      onDelete={this.delete}\n                      roles={this.props.roles}\n                      user={user}\n                      updateUser={this.updateUserRole}\n                    />\n                  ))}\n                </Table.Body>\n              </Table>\n            </div>\n          </Form>\n          <Segment clearing className=\"actions\">\n            {this.props.intl.formatMessage(messages.addUserButtonTitle)}\n            <Button\n              basic\n              primary\n              floated=\"right\"\n              onClick={() => {\n                this.setState({ showAddUser: true });\n              }}\n            >\n              <Icon\n                name={addSvg}\n                size=\"30px\"\n                color=\"#007eb1\"\n                className=\"addSVG\"\n                title={this.props.intl.formatMessage(messages.add)}\n              />\n            </Button>\n          </Segment>\n          <Divider />\n          <Segment>\n            <FormattedMessage id=\"Groups\" defaultMessage=\"Groups\" />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearchGroups}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchGroups,\n                  )}\n                  onChange={this.onChangeSearch}\n                  id=\"group-search-input\"\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form onSubmit={this.onSubmit}>\n            <div className=\"table\">\n              <Table padded striped attached unstackable>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"Groupname\"\n                        defaultMessage=\"Groupname\"\n                      />\n                    </Table.HeaderCell>\n                    {this.props.roles.map((role) => (\n                      <Table.HeaderCell key={role.id}>\n                        {role.id}\n                      </Table.HeaderCell>\n                    ))}\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {this.state.groupEntries.map((groups) => (\n                    <UsersControlpanelGroups\n                      key={groups.id}\n                      onDelete={this.deleteGroup}\n                      roles={this.props.roles}\n                      groups={groups}\n                      updateGroups={this.updateGroupRole}\n                    />\n                  ))}\n                </Table.Body>\n              </Table>\n            </div>\n          </Form>\n          <Segment clearing className=\"actions\">\n            {this.props.intl.formatMessage(messages.addGroupsButtonTitle)}\n            <Button\n              basic\n              primary\n              floated=\"right\"\n              onClick={() => {\n                this.setState({ showAddGroup: true });\n              }}\n            >\n              <Icon\n                name={addSvg}\n                size=\"30px\"\n                color=\"#007eb1\"\n                classname=\"addgroupSVG\"\n                title={this.props.intl.formatMessage(messages.add)}\n              />\n            </Button>\n          </Segment>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to=\"/controlpanel\" className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      aria-label={this.props.intl.formatMessage(messages.back)}\n                      className=\"contents circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      roles: state.roles.roles,\n      users: state.users.users,\n      showAllUser: state.users.showAllUser,\n      groups: state.groups.groups,\n      description: state.description,\n      pathname: props.location.pathname,\n      deleteRequest: state.users.delete,\n      createRequest: state.users.create,\n      deleteGroupRequest: state.groups.delete,\n      createGroupRequest: state.groups.create,\n    }),\n    (dispatch) =>\n      bindActionCreators(\n        {\n          listRoles,\n          listUsers,\n          deleteUser,\n          createUser,\n          listGroups,\n          deleteGroup,\n          createGroup,\n          updateUser,\n          updateGroup,\n          showAllUsers,\n        },\n        dispatch,\n      ),\n  ),\n)(UsersControlpanel);\n","/**\n * Users controlpanel groups.\n * @module components/manage/Controlpanels/UsersControlpanelGroups\n */\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Dropdown, Table, Checkbox } from 'semantic-ui-react';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport { Icon } from '@plone/volto/components';\n\n/**\n * UsersControlpanelGroups class.\n * @class UsersControlpanelGroups\n * @extends Component\n */\nclass UsersControlpanelGroups extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    groups: PropTypes.shape({\n      title: PropTypes.string,\n      description: PropTypes.string,\n      email: PropTypes.string,\n      groupname: PropTypes.string,\n      roles: PropTypes.arrayOf(PropTypes.string),\n    }).isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    onDelete: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * @param {*} event\n   * @param {*} { value }\n   * @memberof UsersControlpanelUser\n   */\n  onChange(event, { value }) {\n    const [group, role] = value.split('.');\n    this.props.updateGroups(group, role);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Table.Row key={this.props.groups.title}>\n        <Table.Cell>{this.props.groups.groupname}</Table.Cell>\n        {this.props.roles.map((role) => (\n          <Table.Cell key={role.id}>\n            <Checkbox\n              checked={this.props.groups.roles.includes(role.id)}\n              onChange={this.onChange}\n              value={`${this.props.groups.id}.${role.id}`}\n            />\n          </Table.Cell>\n        ))}\n        <Table.Cell textAlign=\"right\">\n          <Dropdown icon=\"ellipsis horizontal\">\n            <Dropdown.Menu className=\"left\">\n              <Dropdown.Item\n                onClick={this.props.onDelete}\n                value={this.props.groups['@id']}\n              >\n                <Icon name={trashSVG} size=\"15px\" />\n                <FormattedMessage id=\"Delete\" defaultMessage=\"Delete\" />\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Table.Cell>\n      </Table.Row>\n    );\n  }\n}\n\nexport default injectIntl(UsersControlpanelGroups);\n","/**\n * Users controlpanel user.\n * @module components/manage/Controlpanels/UsersControlpanelUser\n */\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Dropdown, Table, Checkbox } from 'semantic-ui-react';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport { Icon } from '@plone/volto/components';\n\n/**\n * UsersControlpanelUser class.\n * @class UsersControlpanelUser\n * @extends Component\n */\nclass UsersControlpanelUser extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    user: PropTypes.shape({\n      username: PropTypes.string,\n      fullname: PropTypes.string,\n      roles: PropTypes.arrayOf(PropTypes.string),\n    }).isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    onDelete: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onChange = this.onChange.bind(this);\n  }\n  /**\n   * @param {*} event\n   * @param {*} { value }\n   * @memberof UsersControlpanelUser\n   */\n\n  onChange(event, { value }) {\n    const [user, role] = value.split('.');\n    this.props.updateUser(user, role);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Table.Row key={this.props.user.username}>\n        <Table.Cell className=\"fullname\">\n          {this.props.user.fullname\n            ? this.props.user.fullname\n            : this.props.user.username}\n        </Table.Cell>\n        {this.props.roles.map((role) => (\n          <Table.Cell key={role.id}>\n            <Checkbox\n              checked={this.props.user.roles.includes(role.id)}\n              onChange={this.onChange}\n              value={`${this.props.user.id}.${role.id}`}\n            />\n          </Table.Cell>\n        ))}\n        <Table.Cell textAlign=\"right\">\n          <Dropdown icon=\"ellipsis horizontal\">\n            <Dropdown.Menu className=\"left\">\n              <Dropdown.Item\n                onClick={this.props.onDelete}\n                value={this.props.user['@id']}\n              >\n                <Icon name={trashSVG} size=\"15px\" />\n                <FormattedMessage id=\"Delete\" defaultMessage=\"Delete\" />\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Table.Cell>\n      </Table.Row>\n    );\n  }\n}\n\nexport default injectIntl(UsersControlpanelUser);\n","/**\n * Version Overview component.\n * @module components/manage/Controlpanels/VersionOverview\n */\n\nimport React from 'react';\nimport { List } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\n\nimport packageJSON from '../../../../package.json';\n\nconst VersionOverview = ({\n  cmf_version,\n  pil_version,\n  plone_version,\n  python_version,\n  zope_version,\n}) => {\n  const voltoVersion = packageJSON.version;\n\n  return (\n    <>\n      <List bulleted size=\"large\">\n        {voltoVersion && (\n          <List.Item key=\"volto\">Volto {voltoVersion}</List.Item>\n        )}\n        <List.Item key=\"volto\">Plone {plone_version}</List.Item>\n\n        <List.Item key=\"volto\"> CMF {cmf_version}</List.Item>\n        <List.Item key=\"volto\">Zope {zope_version}</List.Item>\n        <List.Item key=\"volto\">Python {python_version}</List.Item>\n        <List.Item key=\"volto\">PIL {pil_version}</List.Item>\n      </List>\n      <p>\n        <FormattedMessage\n          id=\"Warning Regarding debug mode\"\n          defaultMessage='You are running in \"debug mode\". This mode is intended for sites that\n        are under development. This allows many configuration changes to be\n        immediately visible, but will make your site run more slowly. To turn\n        off debug mode, stop the server, set \"debug-mode=off\" in your\n        buildout.cfg, re-run bin/buildout and then restart the server process.'\n        />\n      </p>\n    </>\n  );\n};\n\nexport default VersionOverview;\n","/**\n * Delete container.\n * @module components/manage/Delete/Delete\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Button, Container, List, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport qs from 'query-string';\n\nimport { deleteContent, getContent } from '@plone/volto/actions';\nimport { Toolbar } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n  ok: {\n    id: 'Ok',\n    defaultMessage: 'Ok',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n});\n\n/**\n * Delete container class.\n * @class Delete\n * @extends Component\n */\nclass Delete extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    deleteContent: PropTypes.func.isRequired,\n    getContent: PropTypes.func.isRequired,\n    deleteRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    content: PropTypes.shape({\n      title: PropTypes.string,\n    }),\n    returnUrl: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    content: null,\n    returnUrl: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getContent(this.props.pathname.split('/delete')[0]);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded) {\n      this.props.history.push(\n        this.props.returnUrl ||\n          this.props.pathname.replace('/delete', '').replace(/\\/[^/]*$/, ''),\n      );\n    }\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @returns {undefined}\n   */\n  onSubmit() {\n    this.props.deleteContent(this.props.pathname.replace('/delete', ''));\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(this.props.pathname.replace('/delete', ''));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.content) {\n      return (\n        <div id=\"page-delete\">\n          <Helmet title={this.props.intl.formatMessage(messages.delete)} />\n          <Container>\n            <Segment.Group raised>\n              <Segment className=\"primary\">\n                <FormattedMessage\n                  id=\"Do you really want to delete this item?\"\n                  defaultMessage=\"Do you really want to delete this item?\"\n                />\n              </Segment>\n              <Segment attached>\n                <List bulleted>\n                  <List.Item>{this.props.content.title}</List.Item>\n                </List>\n              </Segment>\n              <Segment className=\"actions\" clearing>\n                <Button\n                  basic\n                  circular\n                  primary\n                  floated=\"right\"\n                  icon=\"arrow right\"\n                  aria-label={this.props.intl.formatMessage(messages.ok)}\n                  title={this.props.intl.formatMessage(messages.ok)}\n                  size=\"big\"\n                  onClick={this.onSubmit}\n                />\n                <Button\n                  basic\n                  circular\n                  secondary\n                  icon=\"remove\"\n                  aria-label={this.props.intl.formatMessage(messages.cancel)}\n                  title={this.props.intl.formatMessage(messages.cancel)}\n                  floated=\"right\"\n                  size=\"big\"\n                  onClick={this.onCancel}\n                />\n              </Segment>\n            </Segment.Group>\n          </Container>\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={<span />}\n              />\n            </Portal>\n          )}\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      content: state.content.data,\n      deleteRequest: state.content.delete,\n      pathname: props.location.pathname,\n      returnUrl: qs.parse(props.location.search).return_url,\n    }),\n    { deleteContent, getContent },\n  ),\n)(Delete);\n","/**\n * Diff component.\n * @module components/manage/Diff/Diff\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { filter, isEqual, map } from 'lodash';\nimport { Container, Button, Dropdown, Grid, Table } from 'semantic-ui-react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport moment from 'moment';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport qs from 'query-string';\n\nimport { getDiff, getSchema, getHistory } from '@plone/volto/actions';\nimport {\n  getBaseUrl,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n} from '@plone/volto/helpers';\nimport { DiffField, Icon, Toolbar } from '@plone/volto/components';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  diff: {\n    id: 'Diff',\n    defaultMessage: 'Diff',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  split: {\n    id: 'Split',\n    defaultMessage: 'Split',\n  },\n  unified: {\n    id: 'Unified',\n    defaultMessage: 'Unified',\n  },\n});\n\n/**\n * Diff class.\n * @class Diff\n * @extends Component\n */\nclass Diff extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getDiff: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    getHistory: PropTypes.func.isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    pathname: PropTypes.string.isRequired,\n    one: PropTypes.string.isRequired,\n    two: PropTypes.string.isRequired,\n    view: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n      }),\n    ).isRequired,\n    historyEntries: PropTypes.arrayOf(\n      PropTypes.shape({\n        version: PropTypes.number,\n        time: PropTypes.string,\n        actor: PropTypes.shape({ fullname: PropTypes.string }),\n      }),\n    ).isRequired,\n    title: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs DiffComponent\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeOne = this.onChangeOne.bind(this);\n    this.onChangeTwo = this.onChangeTwo.bind(this);\n    this.onSelectView = this.onSelectView.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.type);\n    this.props.getHistory(getBaseUrl(this.props.pathname));\n    this.props.getDiff(\n      getBaseUrl(this.props.pathname),\n      this.props.one,\n      this.props.two,\n    );\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      this.props.pathname !== nextProps.pathname ||\n      this.props.one !== nextProps.one ||\n      this.props.two !== nextProps.two\n    ) {\n      this.props.getDiff(\n        getBaseUrl(nextProps.pathname),\n        nextProps.one,\n        nextProps.two,\n      );\n    }\n  }\n\n  /**\n   * On select view handler\n   * @method onSelectView\n   * @param {object} event Event object\n   * @param {string} value Value\n   * @returns {undefined}\n   */\n  onSelectView(event, { value }) {\n    this.props.history.push(\n      `${this.props.pathname}?one=${this.props.one}&two=${this.props.two}&view=${value}`,\n    );\n  }\n\n  /**\n   * On change one handler\n   * @method onChangeOne\n   * @param {object} event Event object\n   * @param {string} value Value\n   * @returns {undefined}\n   */\n  onChangeOne(event, { value }) {\n    this.props.history.push(\n      `${this.props.pathname}?one=${value}&two=${this.props.two}&view=${this.props.view}`,\n    );\n  }\n\n  /**\n   * On change two handler\n   * @method onChangeTwo\n   * @param {object} event Event object\n   * @param {string} value Value\n   * @returns {undefined}\n   */\n  onChangeTwo(event, { value }) {\n    this.props.history.push(\n      `${this.props.pathname}?one=${this.props.one}&two=${value}&view=${this.props.view}`,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const versions = map(\n      filter(this.props.historyEntries, (entry) => 'version' in entry),\n      (entry, index) => ({\n        text: `${index === 0 ? 'Current' : entry.version} (${moment(\n          entry.time,\n        ).format('LLLL')}, ${entry.actor.fullname})`,\n        value: `${entry.version}`,\n        key: `${entry.version}`,\n      }),\n    );\n\n    return (\n      <Container id=\"page-diff\">\n        <Helmet title={this.props.intl.formatMessage(messages.diff)} />\n        <h1>\n          <FormattedMessage\n            id=\"Difference between revision {one} and {two} of {title}\"\n            defaultMessage=\"Difference between revision {one} and {two} of {title}\"\n            values={{\n              one: this.props.one,\n              two: this.props.two,\n              title: this.props.title,\n            }}\n          />\n        </h1>\n        <Grid>\n          <Grid.Column width={9}>\n            <p className=\"description\">\n              <FormattedMessage\n                id=\"You can view the difference of the revisions below.\"\n                defaultMessage=\"You can view the difference of the revisions below.\"\n              />\n            </p>\n          </Grid.Column>\n          <Grid.Column width={3} textAlign=\"right\">\n            <Button.Group>\n              {map(\n                [\n                  {\n                    id: 'split',\n                    label: this.props.intl.formatMessage(messages.split),\n                  },\n                  {\n                    id: 'unified',\n                    label: this.props.intl.formatMessage(messages.unified),\n                  },\n                ],\n                (view) => (\n                  <Button\n                    key={view.id}\n                    value={view.id}\n                    active={this.props.view === view.id}\n                    onClick={this.onSelectView}\n                  >\n                    {view.label}\n                  </Button>\n                ),\n              )}\n            </Button.Group>\n          </Grid.Column>\n        </Grid>\n        {this.props.historyEntries.length > 0 && (\n          <Table basic=\"very\">\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell width={6}>\n                  <FormattedMessage id=\"Base\" defaultMessage=\"Base\" />\n                  <Dropdown\n                    onChange={this.onChangeOne}\n                    value={this.props.one}\n                    selection\n                    fluid\n                    options={versions}\n                  />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={6}>\n                  <FormattedMessage id=\"Compare\" defaultMessage=\"Compare\" />\n                  <Dropdown\n                    onChange={this.onChangeTwo}\n                    value={this.props.two}\n                    selection\n                    fluid\n                    options={versions}\n                  />\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n          </Table>\n        )}\n        {this.props.schema &&\n          this.props.data.length > 0 &&\n          map(this.props.schema.fieldsets, (fieldset) =>\n            map(\n              fieldset.fields,\n              (field) =>\n                !isEqual(\n                  this.props.data[0][field],\n                  this.props.data[1][field],\n                ) &&\n                field !== getBlocksFieldname(this.props.data[0]) &&\n                field !== getBlocksLayoutFieldname(this.props.data[0]) && (\n                  <DiffField\n                    key={field}\n                    one={this.props.data[0][field]}\n                    two={this.props.data[1][field]}\n                    schema={this.props.schema.properties[field]}\n                    view={this.props.view}\n                  />\n                ),\n            ),\n          )}\n        {this.props.schema &&\n          this.props.data.length > 0 &&\n          hasBlocksData(this.props.data[0]) &&\n          (!isEqual(\n            this.props.data[0][getBlocksFieldname(this.props.data[0])],\n            this.props.data[1][getBlocksFieldname(this.props.data[1])],\n          ) ||\n            !isEqual(\n              this.props.data[0][getBlocksLayoutFieldname(this.props.data[0])],\n              this.props.data[1][getBlocksLayoutFieldname(this.props.data[1])],\n            )) && (\n            <DiffField\n              one={this.props.data[0][getBlocksFieldname(this.props.data[0])]}\n              two={this.props.data[1][getBlocksFieldname(this.props.data[1])]}\n              contentOne={this.props.data[0]}\n              contentTwo={this.props.data[1]}\n              schema={\n                this.props.schema.properties[\n                  getBlocksFieldname(this.props.data[0])\n                ]\n              }\n              view={this.props.view}\n            />\n          )}\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}/history`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      data: state.diff.data,\n      historyEntries: state.history.entries,\n      schema: state.schema.schema,\n      pathname: props.location.pathname,\n      one: qs.parse(props.location.search).one,\n      two: qs.parse(props.location.search).two,\n      view: qs.parse(props.location.search).view || 'split',\n      title: state.content.data.title,\n      type: state.content.data['@type'],\n    }),\n    { getDiff, getSchema, getHistory },\n  ),\n)(Diff);\n","/**\n * Diff field component.\n * @module components/manage/Diff/DiffField\n */\n\nimport React from 'react';\n// import { diffWords as dWords } from 'diff';\nimport { join, map } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport moment from 'moment';\nimport ReactDOMServer from 'react-dom/server';\nimport { Provider } from 'react-intl-redux';\nimport { createBrowserHistory } from 'history';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport { Api } from '@plone/volto/helpers';\nimport configureStore from '@plone/volto/store';\nimport { DefaultView } from '@plone/volto/components/';\n\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\n/**\n * Enhanced diff words utility\n * @function diffWords\n * @param oneStr Field one\n * @param twoStr Field two\n */\n\n/**\n * Diff field component.\n * @function DiffField\n * @param {*} one Field one\n * @param {*} two Field two\n * @param {Object} schema Field schema\n * @returns {string} Markup of the component.\n */\nconst DiffField = ({\n  one,\n  two,\n  contentOne,\n  contentTwo,\n  view,\n  schema,\n  diffLib,\n}) => {\n  const diffWords = (oneStr, twoStr) => {\n    return diffLib.diffWords(String(oneStr), String(twoStr));\n  };\n\n  let parts, oneArray, twoArray;\n  if (schema.widget) {\n    switch (schema.widget) {\n      case 'richtext':\n        parts = diffWords(one?.data, two?.data);\n        break;\n      case 'datetime':\n        parts = diffWords(\n          moment(one).format('LLLL'),\n          moment(two).format('LLLL'),\n        );\n        break;\n      case 'json':\n        const api = new Api();\n        const history = createBrowserHistory();\n        const store = configureStore(window.__data, history, api);\n        parts = diffWords(\n          ReactDOMServer.renderToStaticMarkup(\n            <Provider store={store}>\n              <ConnectedRouter history={history}>\n                <DefaultView content={contentOne} />\n              </ConnectedRouter>\n            </Provider>,\n          ),\n          ReactDOMServer.renderToStaticMarkup(\n            <Provider store={store}>\n              <ConnectedRouter history={history}>\n                <DefaultView content={contentTwo} />\n              </ConnectedRouter>\n            </Provider>,\n          ),\n        );\n        break;\n      case 'textarea':\n      default:\n        parts = diffWords(one, two);\n        break;\n    }\n  } else if (schema.type === 'object') {\n    parts = diffWords(one?.filename || one, two?.filename || two);\n  } else if (schema.type === 'array') {\n    oneArray = (one || []).map((i) => i?.title || i);\n    twoArray = (two || []).map((j) => j?.title || j);\n    parts = diffWords(oneArray, twoArray);\n  } else {\n    parts = diffWords(one?.title || one, two?.title || two);\n  }\n  return (\n    <Table compact data-testid=\"DiffField\">\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell colSpan={2}>{schema.title}</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {view === 'split' && (\n          <Table.Row>\n            <Table.Cell width={8} verticalAlign=\"top\">\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: join(\n                    map(\n                      parts,\n                      (part) =>\n                        (part.removed &&\n                          `<span class=\"deletion\">${part.value}</span>`) ||\n                        (!part.added && `<span>${part.value}</span>`) ||\n                        '',\n                    ),\n                    '',\n                  ),\n                }}\n              />\n            </Table.Cell>\n            <Table.Cell width={8} verticalAlign=\"top\">\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: join(\n                    map(\n                      parts,\n                      (part) =>\n                        (part.added &&\n                          `<span class=\"addition\">${part.value}</span>`) ||\n                        (!part.removed && `<span>${part.value}</span>`) ||\n                        '',\n                    ),\n                    '',\n                  ),\n                }}\n              />\n            </Table.Cell>\n          </Table.Row>\n        )}\n        {view === 'unified' && (\n          <Table.Row>\n            <Table.Cell width={16} verticalAlign=\"top\">\n              <span\n                dangerouslySetInnerHTML={{\n                  __html: join(\n                    map(\n                      parts,\n                      (part) =>\n                        (part.removed &&\n                          `<span class=\"deletion\">${part.value}</span>`) ||\n                        (part.added &&\n                          `<span class=\"addition\">${part.value}</span>`) ||\n                        (!part.added && `<span>${part.value}</span>`),\n                    ),\n                    '',\n                  ),\n                }}\n              />\n            </Table.Cell>\n          </Table.Row>\n        )}\n      </Table.Body>\n    </Table>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDiffField.propTypes = {\n  one: PropTypes.any.isRequired,\n  two: PropTypes.any.isRequired,\n  contentOne: PropTypes.any,\n  contentTwo: PropTypes.any,\n  view: PropTypes.string.isRequired,\n  schema: PropTypes.shape({\n    widget: PropTypes.string,\n    type: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n};\n\nexport default injectLazyLibs('diffLib')(DiffField);\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport loadable from '@loadable/component';\n\nimport { getSchema, updateContent, getContent } from '@plone/volto/actions';\nimport layouts from '@plone/volto/constants/Layouts';\nimport { getLayoutFieldname } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { FormattedMessage } from 'react-intl';\nimport config from '@plone/volto/registry';\n\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\n\nconst ReactSelect = loadable.lib(() => import('react-select'));\n\nconst Option = (props) => {\n  return (\n    <ReactSelect>\n      {({ components }) => (\n        <components.Option {...props}>\n          <div>{props.label}</div>\n          {props.isFocused && !props.isSelected && (\n            <Icon name={checkSVG} size=\"24px\" color=\"#b8c6c8\" />\n          )}\n          {props.isSelected && (\n            <Icon name={checkSVG} size=\"24px\" color=\"#007bc1\" />\n          )}\n        </components.Option>\n      )}\n    </ReactSelect>\n  );\n};\n\nconst DropdownIndicator = (props) => {\n  return (\n    <ReactSelect>\n      {({ components }) => (\n        <components.DropdownIndicator {...props}>\n          {props.selectProps.menuIsOpen ? (\n            <Icon name={upSVG} size=\"24px\" color=\"#007bc1\" />\n          ) : (\n            <Icon name={downSVG} size=\"24px\" color=\"#007bc1\" />\n          )}\n        </components.DropdownIndicator>\n      )}\n    </ReactSelect>\n  );\n};\n\nconst selectTheme = (theme) => ({\n  ...theme,\n  borderRadius: 0,\n  colors: {\n    ...theme.colors,\n    primary25: 'hotpink',\n    primary: '#b8c6c8',\n  },\n});\n\nconst customSelectStyles = {\n  control: (styles, state) => ({\n    ...styles,\n    border: 'none',\n    borderBottom: '2px solid #b8c6c8',\n    boxShadow: 'none',\n    borderBottomStyle: state.menuIsOpen ? 'dotted' : 'solid',\n  }),\n  menu: (styles, state) => ({\n    ...styles,\n    top: null,\n    marginTop: 0,\n    boxShadow: 'none',\n    borderBottom: '2px solid #b8c6c8',\n  }),\n  menuList: (styles, state) => ({\n    ...styles,\n    maxHeight: '400px',\n  }),\n  indicatorSeparator: (styles) => ({\n    ...styles,\n    width: null,\n  }),\n  valueContainer: (styles) => ({\n    ...styles,\n    // paddingLeft: 0,\n  }),\n  option: (styles, state) => ({\n    ...styles,\n    backgroundColor: null,\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '14px 12px',\n    color: state.isSelected\n      ? '#007bc1'\n      : state.isFocused\n      ? '#4a4a4a'\n      : 'inherit',\n    ':active': {\n      backgroundColor: null,\n    },\n  }),\n};\n\n/**\n * Display container class.\n * @class Display\n * @extends Component\n */\nclass DisplaySelect extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getSchema: PropTypes.func.isRequired,\n    updateContent: PropTypes.func.isRequired,\n    getContent: PropTypes.func.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    pathname: PropTypes.string.isRequired,\n    layouts: PropTypes.arrayOf(PropTypes.string),\n    layout: PropTypes.string,\n    type: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    layouts: [],\n    layout: '',\n  };\n\n  state = {\n    selectedOption: {\n      value: this.props.layout,\n      label: layouts[this.props.layout] || this.props.layout,\n    },\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getSchema(this.props.type);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.getSchema(nextProps.type);\n    }\n    if (!this.props.loaded && nextProps.loaded) {\n      this.props.getContent(nextProps.pathname);\n    }\n  }\n\n  /**\n   * On set layout handler\n   * @method setLayout\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  setLayout = (selectedOption) => {\n    this.props.updateContent(this.props.pathname, {\n      layout: selectedOption.value,\n    });\n    this.setState({ selectedOption });\n  };\n\n  selectValue = (option) => (\n    <Fragment>\n      <span className=\"Select-value-label\">{option.label}</span>\n    </Fragment>\n  );\n\n  optionRenderer = (option) => (\n    <Fragment>\n      <span style={{ marginRight: 'auto' }}>{option.label}</span>\n      <Icon name={checkSVG} size=\"24px\" />\n    </Fragment>\n  );\n\n  render() {\n    const { selectedOption } = this.state;\n\n    return (\n      <Fragment>\n        <label htmlFor=\"display-select\">\n          <FormattedMessage id=\"Viewmode\" defaultMessage=\"View\" />\n        </label>\n        <ReactSelect>\n          {({ default: Select }) => (\n            <Select\n              name=\"display-select\"\n              className=\"react-select-container\"\n              classNamePrefix=\"react-select\"\n              options={this.props.layouts\n                .filter(\n                  (layout) =>\n                    Object.keys(config.views.contentTypesViews).includes(\n                      layout,\n                    ) || Object.keys(config.views.layoutViews).includes(layout),\n                )\n                .map((item) => ({\n                  value: item,\n                  label: layouts[item] || item,\n                }))}\n              styles={customSelectStyles}\n              theme={selectTheme}\n              components={{ DropdownIndicator, Option }}\n              onChange={this.setLayout}\n              defaultValue={selectedOption}\n              isSearchable={false}\n            />\n          )}\n        </ReactSelect>\n      </Fragment>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    loaded: state.content.update.loaded,\n    layouts: state.schema.schema ? state.schema.schema.layouts : [],\n    layout: state.content.data\n      ? state.content.data[getLayoutFieldname(state.content.data)]\n      : '',\n    layout_fieldname: state.content.data\n      ? getLayoutFieldname(state.content.data)\n      : '',\n    type: state.content.data ? state.content.data['@type'] : '',\n  }),\n  { getSchema, updateContent, getContent },\n)(DisplaySelect);\n","import React from 'react';\nimport { isEmpty } from 'lodash';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { v4 as uuid } from 'uuid';\n\nconst DragDropList = (props) => {\n  const {\n    childList,\n    children,\n    onMoveItem,\n    as = 'div',\n    style,\n    forwardedAriaLabelledBy,\n  } = props; //renderChild\n  const [placeholderProps, setPlaceholderProps] = React.useState({});\n  const [uid] = React.useState(uuid());\n\n  const handleDragStart = React.useCallback((event) => {\n    const queryAttr = 'data-rbd-draggable-id';\n    const domQuery = `[${queryAttr}='${event.draggableId}']`;\n    const draggedDOM = document.querySelector(domQuery);\n\n    if (!draggedDOM) {\n      return;\n    }\n\n    const { clientHeight, clientWidth } = draggedDOM;\n    const sourceIndex = event.source.index;\n    var clientY =\n      parseFloat(window.getComputedStyle(draggedDOM.parentNode).paddingTop) +\n      [...draggedDOM.parentNode.children]\n        .slice(0, sourceIndex)\n        .reduce((total, curr) => {\n          const style = curr.currentStyle || window.getComputedStyle(curr);\n          const marginBottom = parseFloat(style.marginBottom);\n          return total + curr.clientHeight + marginBottom;\n        }, 0);\n\n    setPlaceholderProps({\n      clientHeight,\n      clientWidth,\n      clientY,\n      clientX: parseFloat(\n        window.getComputedStyle(draggedDOM.parentNode).paddingLeft,\n      ),\n    });\n  }, []);\n\n  const onDragUpdate = React.useCallback((update) => {\n    if (!update.destination) {\n      return;\n    }\n    const draggableId = update.draggableId;\n    const destinationIndex = update.destination.index;\n\n    const queryAttr = 'data-rbd-draggable-id';\n    const domQuery = `[${queryAttr}='${draggableId}']`;\n    const draggedDOM = document.querySelector(domQuery);\n\n    if (!draggedDOM) {\n      return;\n    }\n    const { clientHeight, clientWidth } = draggedDOM;\n    const sourceIndex = update.source.index;\n    const childrenArray = [...draggedDOM.parentNode.children];\n    const movedItem = childrenArray[sourceIndex];\n    childrenArray.splice(sourceIndex, 1);\n\n    const updatedArray = [\n      ...childrenArray.slice(0, destinationIndex),\n      movedItem,\n      ...childrenArray.slice(destinationIndex + 1),\n    ];\n\n    var clientY =\n      parseFloat(window.getComputedStyle(draggedDOM.parentNode).paddingTop) +\n      updatedArray.slice(0, destinationIndex).reduce((total, curr) => {\n        if (!curr) return total;\n        const style = curr.currentStyle || window.getComputedStyle(curr);\n        const marginBottom = parseFloat(style.marginBottom);\n        return total + curr.clientHeight + marginBottom;\n      }, 0);\n\n    setPlaceholderProps({\n      clientHeight,\n      clientWidth,\n      clientY,\n      clientX: parseFloat(\n        window.getComputedStyle(draggedDOM.parentNode).paddingLeft,\n      ),\n    });\n  }, []);\n\n  const AsDomComponent = as;\n  return (\n    <DragDropContext\n      onDragEnd={(result) => {\n        const isMoved = onMoveItem(result);\n        if (isMoved) setPlaceholderProps({});\n      }}\n      onDragStart={handleDragStart}\n      onDragUpdate={onDragUpdate}\n    >\n      <Droppable droppableId={uid}>\n        {(provided, snapshot) => (\n          <AsDomComponent\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            style={{ position: 'relative', ...style }}\n            aria-labelledby={forwardedAriaLabelledBy}\n          >\n            {childList\n              .filter(([id, child]) => id && child) // beware numbers!\n              .map(([childId, child], index) => (\n                <Draggable\n                  draggableId={childId.toString()}\n                  index={index}\n                  key={childId}\n                >\n                  {(draginfo) => children({ child, childId, index, draginfo })}\n                </Draggable>\n              ))}\n            {provided.placeholder}\n            {!isEmpty(placeholderProps) && (\n              <div\n                style={{\n                  position: 'absolute',\n                  top: `${placeholderProps.clientY}px`,\n                  height: `${placeholderProps.clientHeight + 18}px`,\n                  background: '#eee',\n                  width: `${placeholderProps.clientWidth}px`,\n                  borderRadius: '3px',\n                }}\n              />\n            )}\n          </AsDomComponent>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nexport default DragDropList;\n","/**\n * Edit container.\n * @module components/manage/Edit/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { asyncConnect } from '@plone/volto/helpers';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Button } from 'semantic-ui-react';\nimport { Portal } from 'react-portal';\nimport qs from 'query-string';\nimport { find } from 'lodash';\nimport { toast } from 'react-toastify';\n\nimport {\n  Forbidden,\n  Form,\n  Icon,\n  Sidebar,\n  Toast,\n  Toolbar,\n  Unauthorized,\n} from '@plone/volto/components';\nimport {\n  updateContent,\n  getContent,\n  getSchema,\n  listActions,\n} from '@plone/volto/actions';\nimport { getBaseUrl, hasBlocksData } from '@plone/volto/helpers';\nimport { preloadLazyLibs } from '@plone/volto/helpers/Loadable';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  edit: {\n    id: 'Edit {title}',\n    defaultMessage: 'Edit {title}',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n});\n\n/**\n * Edit class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    getContent: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    schemaRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    getRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    returnUrl: PropTypes.string,\n    content: PropTypes.shape({\n      '@type': PropTypes.string,\n    }),\n    schema: PropTypes.objectOf(PropTypes.any),\n    objectActions: PropTypes.array,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: null,\n    content: null,\n    returnUrl: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visual: true,\n      isClient: false,\n      error: null,\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.getRequest.loaded && this.props.content?.['@type']) {\n      this.props.getSchema(this.props.content['@type']);\n    }\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      if (!hasBlocksData(nextProps.schema.properties)) {\n        this.setState({\n          visual: false,\n        });\n      }\n    }\n    // Hack for make the Plone site editable by Volto Editor without checkings\n    if (this.props?.content?.['@type'] === 'Plone Site') {\n      this.setState({\n        visual: true,\n      });\n    }\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      this.props.history.push(\n        this.props.returnUrl || getBaseUrl(this.props.pathname),\n      );\n    }\n\n    if (this.props.updateRequest.loading && nextProps.updateRequest.error) {\n      const message =\n        nextProps.updateRequest.error?.response?.body?.message ||\n        nextProps.updateRequest.error?.response?.text ||\n        '';\n\n      const error =\n        new DOMParser().parseFromString(message, 'text/html')?.all[0]\n          ?.textContent || message;\n\n      this.setState({ error: error });\n\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={`${nextProps.updateRequest.error.status} ${error}`}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateContent(getBaseUrl(this.props.pathname), data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(\n      this.props.returnUrl || getBaseUrl(this.props.pathname),\n    );\n  }\n\n  form = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const editPermission = find(this.props.objectActions, { id: 'edit' });\n\n    return (\n      <div id=\"page-edit\">\n        {this.props.objectActions?.length > 0 && (\n          <>\n            {editPermission && (\n              <>\n                <Helmet\n                  title={\n                    this.props?.schema?.title\n                      ? this.props.intl.formatMessage(messages.edit, {\n                          title: this.props.schema.title,\n                        })\n                      : null\n                  }\n                />\n                <Form\n                  isEditForm\n                  ref={this.form}\n                  schema={this.props.schema}\n                  formData={this.props.content}\n                  requestError={this.state.error}\n                  onSubmit={this.onSubmit}\n                  hideActions\n                  pathname={this.props.pathname}\n                  visual={this.state.visual}\n                  title={\n                    this.props?.schema?.title\n                      ? this.props.intl.formatMessage(messages.edit, {\n                          title: this.props.schema.title,\n                        })\n                      : null\n                  }\n                  loading={this.props.updateRequest.loading}\n                />\n              </>\n            )}\n\n            {editPermission && this.state.visual && this.state.isClient && (\n              <Portal node={document.getElementById('sidebar')}>\n                <Sidebar />\n              </Portal>\n            )}\n          </>\n        )}\n        {!editPermission && (\n          <>\n            {this.props.token ? (\n              <Forbidden\n                pathname={this.props.pathname}\n                staticContext={this.props.staticContext}\n              />\n            ) : (\n              <Unauthorized\n                pathname={this.props.pathname}\n                staticContext={this.props.staticContext}\n              />\n            )}\n          </>\n        )}\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Button\n                    id=\"toolbar-save\"\n                    className=\"save\"\n                    aria-label={this.props.intl.formatMessage(messages.save)}\n                    onClick={() => this.form.current.onSubmit()}\n                    disabled={this.props.updateRequest.loading}\n                    loading={this.props.updateRequest.loading}\n                  >\n                    <Icon\n                      name={saveSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </Button>\n                  <Button\n                    className=\"cancel\"\n                    aria-label={this.props.intl.formatMessage(messages.cancel)}\n                    onClick={() => this.onCancel()}\n                  >\n                    <Icon\n                      name={clearSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </Button>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const __test__ = compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      objectActions: state.actions.actions.object,\n      token: state.userSession.token,\n      content: state.content.data,\n      schema: state.schema.schema,\n      getRequest: state.content.get,\n      schemaRequest: state.schema,\n      updateRequest: state.content.update,\n      createRequest: state.content.create,\n      pathname: props.location.pathname,\n      returnUrl: qs.parse(props.location.search).return_url,\n    }),\n    {\n      updateContent,\n      getContent,\n      getSchema,\n    },\n  ),\n)(Edit);\n\nexport default compose(\n  injectIntl,\n  asyncConnect([\n    {\n      key: 'actions',\n      promise: async ({ location, store: { dispatch } }) => {\n        await dispatch(listActions(getBaseUrl(location.pathname)));\n      },\n    },\n    {\n      key: 'content',\n      promise: async ({ location, store: { dispatch } }) =>\n        await dispatch(getContent(getBaseUrl(location.pathname))),\n    },\n  ]),\n  connect(\n    (state, props) => ({\n      objectActions: state.actions.actions.object,\n      token: state.userSession.token,\n      content: state.content.data,\n      schema: state.schema.schema,\n      getRequest: state.content.get,\n      schemaRequest: state.schema,\n      updateRequest: state.content.update,\n      pathname: props.location.pathname,\n      returnUrl: qs.parse(props.location.search).return_url,\n    }),\n    {\n      updateContent,\n      getContent,\n      getSchema,\n    },\n  ),\n  preloadLazyLibs('cms'),\n)(Edit);\n","import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { InlineForm } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  Variation: {\n    id: 'Variation',\n    defaultMessage: 'Variation',\n  },\n});\n\nexport const addVariationsFieldToSchema = ({\n  schema,\n  currentVariation,\n  variations,\n  intl,\n}) => {\n  const _ = intl.formatMessage;\n\n  schema.fieldsets[0].fields.unshift('variation');\n  schema.properties.variation = {\n    title: _(messages.Variation),\n    choices: Object.keys(variations).map((key) => [\n      key,\n      _({\n        id: variations[key].label,\n        defaultMessage: variations[key].label,\n      }),\n    ]),\n    noValueOption: false,\n  };\n\n  return schema;\n};\n\nconst withBlockDataForm = (Component) => ({ ...props }) => {\n  const { formData, schema: originalSchema } = props;\n  const intl = useIntl();\n\n  const { blocks } = config;\n\n  // Add variations and schemaEnhancer aware to the component\n  const blockType = formData['@type'];\n  const variations = blocks?.blocksConfig[blockType]?.variations;\n  const currentVariation = formData?.variation;\n  const variationConfig = variations?.[currentVariation];\n  const schemaEnhancer =\n    // Look if a schemaEnhancer is defined in the current block variation\n    // or it is defined in the main block or null\n    variationConfig?.['schemaEnhancer'] ||\n    blocks.blocksConfig?.[blockType]?.['schemaEnhancer'] ||\n    null;\n\n  let schema = originalSchema;\n  if (schemaEnhancer) {\n    schema = schemaEnhancer({ schema: originalSchema, formData, intl });\n  }\n\n  if (variations) {\n    addVariationsFieldToSchema({ schema, currentVariation, variations, intl });\n  }\n\n  return <Component {...props} schema={schema} />;\n};\n\nexport default withBlockDataForm(InlineForm);\n","import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport {\n  messages,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { v4 as uuid } from 'uuid';\nimport { load } from 'redux-localstorage-simple';\nimport { isEqual, omit, without } from 'lodash';\n\nimport { setBlocksClipboard, resetBlocksClipboard } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\n\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nexport class BlocksToolbarComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.copyBlocksToClipboard = this.copyBlocksToClipboard.bind(this);\n    this.cutBlocksToClipboard = this.cutBlocksToClipboard.bind(this);\n    this.deleteBlocks = this.deleteBlocks.bind(this);\n    this.loadFromStorage = this.loadFromStorage.bind(this);\n    this.pasteBlocks = this.pasteBlocks.bind(this);\n    this.setBlocksClipboard = this.setBlocksClipboard.bind(this);\n  }\n\n  loadFromStorage() {\n    const clipboard = load({ states: ['blocksClipboard'] })?.blocksClipboard;\n    if (!isEqual(clipboard, this.props.blocksClipboard))\n      this.props.setBlocksClipboard(clipboard || {});\n  }\n\n  componentDidMount() {\n    window.addEventListener('storage', this.loadFromStorage, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('storage', this.loadFromStorage);\n  }\n\n  deleteBlocks() {\n    const blockIds = this.props.selectedBlocks;\n\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    // Might need ReactDOM.unstable_batchedUpdates()\n    this.props.onSelectBlock(null);\n    const newBlockData = {\n      [blocksFieldname]: omit(formData[blocksFieldname], blockIds),\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: without(formData[blocksLayoutFieldname].items, ...blockIds),\n      },\n    };\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  copyBlocksToClipboard() {\n    this.setBlocksClipboard('copy');\n  }\n\n  cutBlocksToClipboard() {\n    this.setBlocksClipboard('cut');\n    this.deleteBlocks();\n  }\n\n  setBlocksClipboard(actionType) {\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocks = formData[blocksFieldname];\n    const blocksData = this.props.selectedBlocks.map(\n      (blockId) => blocks[blockId],\n    );\n    this.props.setBlocksClipboard({ [actionType]: blocksData });\n    this.props.onSetSelectedBlocks([]);\n  }\n\n  pasteBlocks(e) {\n    const { formData, blocksClipboard = {}, selectedBlock } = this.props;\n    const mode = Object.keys(blocksClipboard).includes('cut') ? 'cut' : 'copy';\n    const blocksData = blocksClipboard[mode] || [];\n    const cloneWithIds = blocksData\n      .filter((blockData) => !!blockData['@type'])\n      .map((blockData) => {\n        const blockConfig = config.blocks.blocksConfig[blockData['@type']];\n        return mode === 'copy'\n          ? blockConfig.cloneData\n            ? blockConfig.cloneData(blockData)\n            : [uuid(), blockData]\n          : [uuid(), blockData]; // if cut/pasting blocks, we don't clone\n      })\n      .filter((info) => !!info); // some blocks may refuse to be copied\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    const selectedIndex =\n      formData[blocksLayoutFieldname].items.indexOf(selectedBlock) + 1;\n\n    const newBlockData = {\n      [blocksFieldname]: {\n        ...formData[blocksFieldname],\n        ...Object.assign(\n          {},\n          ...cloneWithIds.map(([id, data]) => ({ [id]: data })),\n        ),\n      },\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: [\n          ...formData[blocksLayoutFieldname].items.slice(0, selectedIndex),\n          ...cloneWithIds.map(([id]) => id),\n          ...formData[blocksLayoutFieldname].items.slice(selectedIndex),\n        ],\n      },\n    };\n\n    if (!(e.ctrlKey || e.metaKey)) this.props.resetBlocksClipboard();\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  render() {\n    const {\n      blocksClipboard = {},\n      selectedBlock,\n      selectedBlocks,\n      intl,\n    } = this.props;\n    return (\n      <>\n        {selectedBlocks.length > 0 ? (\n          <Portal\n            node={\n              __CLIENT__ && document.querySelector('#toolbar .toolbar-bottom')\n            }\n          >\n            <button\n              aria-label={intl.formatMessage(messages.deleteBlocks)}\n              onClick={this.deleteBlocks}\n              tabIndex={0}\n              className=\"deleteBlocks\"\n              id=\"toolbar-delete-blocks\"\n            >\n              <Icon name={trashSVG} size=\"30px\" />\n            </button>\n            <button\n              aria-label={intl.formatMessage(messages.cutBlocks)}\n              onClick={this.cutBlocksToClipboard}\n              tabIndex={0}\n              className=\"cutBlocks\"\n              id=\"toolbar-cut-blocks\"\n            >\n              <Icon name={cutSVG} size=\"30px\" />\n            </button>\n            <button\n              aria-label={intl.formatMessage(messages.copyBlocks)}\n              onClick={this.copyBlocksToClipboard}\n              tabIndex={0}\n              className=\"copyBlocks\"\n              id=\"toolbar-copy-blocks\"\n            >\n              <Icon name={copySVG} size=\"30px\" />\n            </button>\n          </Portal>\n        ) : (\n          ''\n        )}\n        {selectedBlock && (blocksClipboard?.cut || blocksClipboard?.copy) ? (\n          <Portal\n            node={\n              __CLIENT__ && document.querySelector('#toolbar .toolbar-bottom')\n            }\n          >\n            <button\n              aria-label={intl.formatMessage(messages.pasteBlocks)}\n              onClick={this.pasteBlocks}\n              tabIndex={0}\n              className=\"pasteBlocks\"\n              id=\"toolbar-paste-blocks\"\n            >\n              <span class=\"blockCount\">\n                {(blocksClipboard.cut || blocksClipboard.copy).length}\n              </span>\n              <Icon name={pasteSVG} size=\"30px\" />\n            </button>\n          </Portal>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => {\n      return {\n        blocksClipboard: state?.blocksClipboard || {},\n      };\n    },\n    { setBlocksClipboard, resetBlocksClipboard },\n  ),\n)(BlocksToolbarComponent);\n","/**\n * Field component.\n * @module components/manage/Form/Field\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport { injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\n\nconst MODE_HIDDEN = 'hidden'; //hidden mode. If mode is hidden, field is not rendered\n/**\n * Get default widget\n * @method getViewDefault\n * @returns {string} Widget component.\n */\nconst getWidgetDefault = () => config.widgets.default;\n\n/**\n * Get widget by field's `id` attribute\n * @method getWidgetById\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFieldId = (id) => config.widgets.id[id] || null;\n\n/**\n * Get widget by factory attribute\n * @method getWidgetByFactory\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFactory = (factory) =>\n  config.widgets.factory?.[factory] || null;\n\n/**\n * Get widget by field's `widget` attribute\n * @method getWidgetByName\n * @param {string} widget Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByName = (widget) =>\n  typeof widget === 'string'\n    ? config.widgets.widget[widget] || getWidgetDefault()\n    : null;\n\n/**\n * Get widget by field's `vocabulary` attribute\n * @method getWidgetByVocabulary\n * @param {string} vocabulary Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabulary = (vocabulary) =>\n  vocabulary && vocabulary['@id']\n    ? config.widgets.vocabulary[\n        vocabulary['@id'].replace(\n          `${config.settings.apiPath}/@vocabularies/`,\n          '',\n        )\n      ]\n    : null;\n\n/**\n * Get widget by field's hints `vocabulary` attribute in widgetOptions\n * @method getWidgetByVocabularyFromHint\n * @param {string} props Widget props\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabularyFromHint = (props) =>\n  props.widgetOptions && props.widgetOptions.vocabulary\n    ? config.widgets.vocabulary[\n        props.widgetOptions.vocabulary['@id'].replace(\n          `${config.settings.apiPath}/@vocabularies/`,\n          '',\n        )\n      ]\n    : null;\n\n/**\n * Get widget by field's `choices` attribute\n * @method getWidgetByChoices\n * @param {string} choices Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByChoices = (props) => {\n  if (props.choices) {\n    return config.widgets.choices;\n  }\n\n  if (props.vocabulary) {\n    // If vocabulary exists, then it means it's a choice field in disguise with\n    // no widget specified that probably contains a string then we force it\n    // to be a select widget instead\n    return config.widgets.choices;\n  }\n\n  return null;\n};\n\n/**\n * Get widget by field's `type` attribute\n * @method getWidgetByType\n * @param {string} type Type\n * @returns {string} Widget component.\n */\nconst getWidgetByType = (type) => config.widgets.type[type] || null;\n\n/**\n * Field component class.\n * @function Field\n * @param {Object} props Properties.\n * @returns {string} Markup of the component.\n */\nconst Field = (props, { intl }) => {\n  const Widget =\n    getWidgetByFieldId(props.id) ||\n    getWidgetByName(props.widget) ||\n    getWidgetByChoices(props) ||\n    getWidgetByVocabulary(props.vocabulary) ||\n    getWidgetByVocabularyFromHint(props) ||\n    getWidgetByFactory(props.factory) ||\n    getWidgetByType(props.type) ||\n    getWidgetDefault();\n\n  if (props.mode === MODE_HIDDEN) {\n    return null;\n  }\n\n  if (props.onOrder) {\n    const WrappedWidget = DropTarget(\n      'field',\n      {\n        hover(properties, monitor) {\n          const dragOrder = monitor.getItem().order;\n          const hoverOrder = properties.order;\n\n          if (dragOrder === hoverOrder) {\n            return;\n          }\n          properties.onOrder(dragOrder, hoverOrder - dragOrder);\n\n          monitor.getItem().order = hoverOrder;\n        },\n      },\n      (connect) => ({\n        connectDropTarget: connect.dropTarget(),\n      }),\n    )(\n      DragSource(\n        'field',\n        {\n          beginDrag(properties) {\n            return {\n              id: properties.label,\n              order: properties.order,\n            };\n          },\n        },\n        (connect, monitor) => ({\n          connectDragSource: connect.dragSource(),\n          connectDragPreview: connect.dragPreview(),\n          isDragging: monitor.isDragging(),\n        }),\n      )(\n        ({\n          connectDropTarget,\n          connectDragSource,\n          connectDragPreview,\n          ...rest\n        }) =>\n          connectDropTarget(\n            connectDragSource(\n              connectDragPreview(\n                <div>\n                  <Widget {...rest} />\n                </div>,\n              ),\n            ),\n          ),\n      ),\n    );\n    return <WrappedWidget {...props} />;\n  }\n  return <Widget {...props} />;\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nField.propTypes = {\n  widget: PropTypes.string,\n  vocabulary: PropTypes.shape({ '@id': PropTypes.string }),\n  choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  type: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  focus: PropTypes.bool,\n  onOrder: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nField.defaultProps = {\n  widget: null,\n  vocabulary: null,\n  choices: null,\n  type: 'string',\n  focus: false,\n  onOrder: null,\n};\n\nexport default injectIntl(Field);\n","/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport { BlocksForm, Field, Icon, Toast } from '@plone/volto/components';\nimport {\n  difference,\n  FormValidation,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  messages,\n} from '@plone/volto/helpers';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport {\n  findIndex,\n  isEmpty,\n  keys,\n  map,\n  mapValues,\n  pickBy,\n  without,\n  cloneDeep,\n} from 'lodash';\nimport isBoolean from 'lodash/isBoolean';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport {\n  Button,\n  Container,\n  Form as UiForm,\n  Message,\n  Segment,\n  Tab,\n} from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport { toast } from 'react-toastify';\nimport { BlocksToolbar } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nclass Form extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      definitions: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }),\n    formData: PropTypes.objectOf(PropTypes.any),\n    pathname: PropTypes.string,\n    onSubmit: PropTypes.func,\n    onCancel: PropTypes.func,\n    submitLabel: PropTypes.string,\n    resetAfterSubmit: PropTypes.bool,\n    isEditForm: PropTypes.bool,\n    isAdminForm: PropTypes.bool,\n    title: PropTypes.string,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    hideActions: PropTypes.bool,\n    description: PropTypes.string,\n    visual: PropTypes.bool,\n    blocks: PropTypes.arrayOf(PropTypes.object),\n    onChangeFormData: PropTypes.func,\n    requestError: PropTypes.string,\n    allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n    showRestricted: PropTypes.bool,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    formData: null,\n    onSubmit: null,\n    onCancel: null,\n    submitLabel: null,\n    resetAfterSubmit: false,\n    isEditForm: false,\n    isAdminForm: false,\n    title: null,\n    description: null,\n    error: null,\n    loading: null,\n    hideActions: false,\n    visual: false,\n    blocks: [],\n    pathname: '',\n    schema: {},\n    requestError: null,\n    allowedBlocks: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n    const ids = {\n      title: uuid(),\n      text: uuid(),\n    };\n    let { formData } = props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    if (!props.isEditForm) {\n      // It's a normal (add form), get defaults from schema\n      formData = {\n        ...mapValues(props.schema.properties, 'default'),\n        ...formData,\n      };\n    }\n    // defaults for block editor; should be moved to schema on server side\n    // Adding fallback in case the fields are empty, so we are sure that the edit form\n    // shows at least the default blocks\n    if (\n      formData.hasOwnProperty(blocksFieldname) &&\n      formData.hasOwnProperty(blocksLayoutFieldname)\n    ) {\n      if (\n        !formData[blocksLayoutFieldname] ||\n        isEmpty(formData[blocksLayoutFieldname].items)\n      ) {\n        formData[blocksLayoutFieldname] = {\n          items: [ids.title, ids.text],\n        };\n      }\n      if (!formData[blocksFieldname] || isEmpty(formData[blocksFieldname])) {\n        formData[blocksFieldname] = {\n          [ids.title]: {\n            '@type': 'title',\n          },\n          [ids.text]: {\n            '@type': config.settings.defaultBlockType,\n          },\n        };\n      }\n    }\n    this.state = {\n      formData,\n      initialFormData: cloneDeep(formData),\n      errors: {},\n      selected:\n        formData.hasOwnProperty(blocksLayoutFieldname) &&\n        formData[blocksLayoutFieldname].items.length > 0\n          ? formData[blocksLayoutFieldname].items[0]\n          : null,\n      multiSelected: [],\n      isClient: false,\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onSelectBlock = this.onSelectBlock.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n  }\n\n  /**\n   * On updates caused by props change\n   * if errors from Backend come, these will be shown to their corresponding Fields\n   * also the first Tab to have any errors will be selected\n   * @param {Object} prevProps\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    let { requestError } = this.props;\n    let errors = {};\n    let activeIndex = 0;\n\n    if (requestError && prevProps.requestError !== requestError) {\n      errors = FormValidation.giveServerErrorsToCorrespondingFields(\n        requestError,\n      );\n      activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema,\n      });\n\n      this.setState({\n        errors,\n        activeIndex,\n      });\n    }\n\n    if (this.props.onChangeFormData) {\n      if (\n        JSON.stringify(prevState?.formData) !==\n        JSON.stringify(this.state.formData)\n      ) {\n        this.props.onChangeFormData(this.state.formData);\n      }\n    }\n  }\n\n  /**\n   * Tab selection is done only by setting activeIndex in state\n   */\n  onTabChange(e, { activeIndex }) {\n    this.setState({ activeIndex });\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interraction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({ isFormPristine: false });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n      });\n\n      this.setState({\n        errors,\n      });\n    }\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Change field handler\n   * Remove errors for changed field\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState((prevState) => {\n      const { errors, formData } = prevState;\n      delete errors[id];\n      return {\n        errors,\n        formData: {\n          ...formData,\n          // We need to catch also when the value equals false this fixes #888\n          [id]:\n            value || (value !== undefined && isBoolean(value)) ? value : null,\n        },\n      };\n    });\n  }\n\n  /**\n   * Select block handler\n   * @method onSelectBlock\n   * @param {string} id Id of the field\n   * @param {string} isMultipleSelection true if multiple blocks are selected\n   * @returns {undefined}\n   */\n  onSelectBlock(id, isMultipleSelection, event) {\n    let multiSelected = [];\n    let selected = id;\n\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(\n        this.state.formData,\n      );\n\n      const blocks_layout = this.state.formData[blocksLayoutFieldname].items;\n\n      if (event.shiftKey) {\n        const anchor =\n          this.state.multiSelected.length > 0\n            ? blocks_layout.indexOf(this.state.multiSelected[0])\n            : blocks_layout.indexOf(this.state.selected);\n        const focus = blocks_layout.indexOf(id);\n\n        if (anchor === focus) {\n          multiSelected = [id];\n        } else if (focus > anchor) {\n          multiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          multiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n      }\n\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        if (this.state.multiSelected.includes(id)) {\n          selected = null;\n          multiSelected = without(this.state.multiSelected, id);\n        } else {\n          multiSelected = [...(this.state.multiSelected || []), id];\n        }\n      }\n    }\n\n    this.setState({\n      selected,\n      multiSelected,\n    });\n  }\n\n  /**\n   * Cancel handler\n   * It prevents event from triggering submit, reset form if props.resetAfterSubmit\n   * and calls this.props.onCancel\n   * @method onCancel\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onCancel(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.props.resetAfterSubmit) {\n      this.setState({\n        formData: this.props.formData,\n      });\n    }\n    this.props.onCancel(event);\n  }\n\n  /**\n   * Submit handler also validate form and collect errors\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const errors = FormValidation.validateFieldsPerFieldset({\n      schema: this.props.schema,\n      formData: this.state.formData,\n      formatMessage: this.props.intl.formatMessage,\n    });\n\n    if (keys(errors).length > 0) {\n      const activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema,\n      });\n      this.setState(\n        {\n          errors,\n          activeIndex,\n        },\n        () => {\n          Object.keys(errors).forEach((err) =>\n            toast.error(\n              <Toast error title={err} content={errors[err].join(', ')} />,\n            ),\n          );\n        },\n      );\n    } else {\n      // Get only the values that have been modified (Edit forms), send all in case that\n      // it's an add form\n      if (this.props.isEditForm) {\n        this.props.onSubmit(this.getOnlyFormModifiedValues());\n      } else {\n        this.props.onSubmit(this.state.formData);\n      }\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData,\n        });\n      }\n    }\n  }\n\n  /**\n   * getOnlyFormModifiedValues handler\n   * It returns only the values of the fields that are have really changed since the\n   * form was loaded. Useful for edit forms and PATCH operations, when we only want to\n   * send the changed data.\n   * @method getOnlyFormModifiedValues\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  getOnlyFormModifiedValues = () => {\n    const fieldsModified = Object.keys(\n      difference(this.state.formData, this.state.initialFormData),\n    );\n    return {\n      ...pickBy(this.state.formData, (value, key) =>\n        fieldsModified.includes(key),\n      ),\n      ...(this.state.formData['@static_behaviors'] && {\n        '@static_behaviors': this.state.formData['@static_behaviors'],\n      }),\n    };\n  };\n\n  /**\n   * Removed blocks and blocks_layout fields from the form.\n   * @method removeBlocksLayoutFields\n   * @param {object} schema The schema definition of the form.\n   * @returns A modified copy of the given schema.\n   */\n  removeBlocksLayoutFields = (schema) => {\n    const newSchema = { ...schema };\n    const layoutFieldsetIndex = findIndex(\n      newSchema.fieldsets,\n      (fieldset) => fieldset.id === 'layout',\n    );\n    if (layoutFieldsetIndex > -1) {\n      const layoutFields = newSchema.fieldsets[layoutFieldsetIndex].fields;\n      newSchema.fieldsets[layoutFieldsetIndex].fields = layoutFields.filter(\n        (field) => field !== 'blocks' && field !== 'blocks_layout',\n      );\n      if (newSchema.fieldsets[layoutFieldsetIndex].fields.length === 0) {\n        newSchema.fieldsets = [\n          ...newSchema.fieldsets.slice(0, layoutFieldsetIndex),\n          ...newSchema.fieldsets.slice(layoutFieldsetIndex + 1),\n        ];\n      }\n    }\n    return newSchema;\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { settings } = config;\n    const { schema: originalSchema, onCancel, onSubmit } = this.props;\n    const { formData } = this.state;\n    const schema = this.removeBlocksLayoutFields(originalSchema);\n\n    return this.props.visual ? (\n      // Removing this from SSR is important, since react-beautiful-dnd supports SSR,\n      // but draftJS don't like it much and the hydration gets messed up\n      this.state.isClient && (\n        <div className=\"ui container\">\n          <BlocksToolbar\n            formData={this.state.formData}\n            selectedBlock={this.state.selected}\n            selectedBlocks={this.state.multiSelected}\n            onChangeBlocks={(newBlockData) =>\n              this.setState({\n                formData: {\n                  ...formData,\n                  ...newBlockData,\n                },\n              })\n            }\n            onSetSelectedBlocks={(blockIds) =>\n              this.setState({ multiSelected: blockIds })\n            }\n            onSelectBlock={this.onSelectBlock}\n          />\n          <BlocksForm\n            onChangeFormData={(newFormData) =>\n              this.setState({\n                formData: {\n                  ...formData,\n                  ...newFormData,\n                },\n              })\n            }\n            onChangeField={this.onChangeField}\n            onSelectBlock={this.onSelectBlock}\n            properties={formData}\n            pathname={this.props.pathname}\n            selectedBlock={this.state.selected}\n            multiSelected={this.state.multiSelected}\n            manage={this.props.isAdminForm}\n            allowedBlocks={this.props.allowedBlocks}\n            showRestricted={this.props.showRestricted}\n          />\n          {this.state.isClient && (\n            <Portal\n              node={__CLIENT__ && document.getElementById('sidebar-metadata')}\n            >\n              <UiForm\n                method=\"post\"\n                onSubmit={this.onSubmit}\n                error={keys(this.state.errors).length > 0}\n              >\n                {schema &&\n                  map(schema.fieldsets, (item) => [\n                    <Segment secondary attached key={item.title}>\n                      {item.title}\n                    </Segment>,\n                    <Segment attached key={`fieldset-contents-${item.title}`}>\n                      {map(item.fields, (field, index) => (\n                        <Field\n                          {...schema.properties[field]}\n                          id={field}\n                          fieldSet={item.title.toLowerCase()}\n                          formData={this.state.formData}\n                          focus={false}\n                          value={this.state.formData?.[field]}\n                          required={schema.required.indexOf(field) !== -1}\n                          onChange={this.onChangeField}\n                          onBlur={this.onBlurField}\n                          onClick={this.onClickInput}\n                          key={field}\n                          error={this.state.errors[field]}\n                        />\n                      ))}\n                    </Segment>,\n                  ])}\n              </UiForm>\n            </Portal>\n          )}\n        </div>\n      )\n    ) : (\n      <Container>\n        <UiForm\n          method=\"post\"\n          onSubmit={this.onSubmit}\n          error={keys(this.state.errors).length > 0}\n          className={settings.verticalFormTabs ? 'vertical-form' : ''}\n        >\n          <Segment.Group raised>\n            {schema && schema.fieldsets.length > 1 && (\n              <>\n                {settings.verticalFormTabs && this.props.title && (\n                  <Segment secondary attached key={this.props.title}>\n                    {this.props.title}\n                  </Segment>\n                )}\n                <Tab\n                  menu={{\n                    secondary: true,\n                    pointing: true,\n                    attached: true,\n                    tabular: true,\n                    className: 'formtabs',\n                    vertical: settings.verticalFormTabs,\n                  }}\n                  grid={{ paneWidth: 9, tabWidth: 3, stackable: true }}\n                  onTabChange={this.onTabChange}\n                  activeIndex={this.state.activeIndex}\n                  panes={map(schema.fieldsets, (item) => ({\n                    menuItem: item.title,\n                    render: () => [\n                      !settings.verticalFormTabs && this.props.title && (\n                        <Segment secondary attached key={this.props.title}>\n                          {this.props.title}\n                        </Segment>\n                      ),\n                      ...map(item.fields, (field, index) => (\n                        <Field\n                          {...schema.properties[field]}\n                          id={field}\n                          formData={this.state.formData}\n                          fieldSet={item.title.toLowerCase()}\n                          focus={index === 0}\n                          value={this.state.formData?.[field]}\n                          required={schema.required.indexOf(field) !== -1}\n                          onChange={this.onChangeField}\n                          onBlur={this.onBlurField}\n                          onClick={this.onClickInput}\n                          key={field}\n                          error={this.state.errors[field]}\n                        />\n                      )),\n                    ],\n                  }))}\n                />\n              </>\n            )}\n            {schema && schema.fieldsets.length === 1 && (\n              <Segment>\n                {this.props.title && (\n                  <Segment className=\"primary\">\n                    <h1 style={{ fontSize: '16px' }}> {this.props.title}</h1>\n                  </Segment>\n                )}\n                {this.props.description && (\n                  <Segment secondary>{this.props.description}</Segment>\n                )}\n                {keys(this.state.errors).length > 0 && (\n                  <Message\n                    icon=\"warning\"\n                    negative\n                    attached\n                    header={this.props.intl.formatMessage(messages.error)}\n                    content={this.props.intl.formatMessage(\n                      messages.thereWereSomeErrors,\n                    )}\n                  />\n                )}\n                {this.props.error && (\n                  <Message\n                    icon=\"warning\"\n                    negative\n                    attached\n                    header={this.props.intl.formatMessage(messages.error)}\n                    content={this.props.error.message}\n                  />\n                )}\n                {map(schema.fieldsets[0].fields, (field) => (\n                  <Field\n                    {...schema.properties[field]}\n                    id={field}\n                    value={this.state.formData?.[field]}\n                    required={schema.required.indexOf(field) !== -1}\n                    onChange={this.onChangeField}\n                    onBlur={this.onBlurField}\n                    onClick={this.onClickInput}\n                    key={field}\n                    error={this.state.errors[field]}\n                  />\n                ))}\n              </Segment>\n            )}\n            {!this.props.hideActions && (\n              <Segment className=\"actions\" clearing>\n                {onSubmit && (\n                  <Button\n                    basic\n                    primary\n                    floated=\"right\"\n                    type=\"submit\"\n                    aria-label={\n                      this.props.submitLabel\n                        ? this.props.submitLabel\n                        : this.props.intl.formatMessage(messages.save)\n                    }\n                    title={\n                      this.props.submitLabel\n                        ? this.props.submitLabel\n                        : this.props.intl.formatMessage(messages.save)\n                    }\n                    loading={this.props.loading}\n                  >\n                    <Icon className=\"circled\" name={aheadSVG} size=\"30px\" />\n                  </Button>\n                )}\n                {onCancel && (\n                  <Button\n                    basic\n                    secondary\n                    aria-label={this.props.intl.formatMessage(messages.cancel)}\n                    title={this.props.intl.formatMessage(messages.cancel)}\n                    floated=\"right\"\n                    onClick={this.onCancel}\n                  >\n                    <Icon className=\"circled\" name={clearSVG} size=\"30px\" />\n                  </Button>\n                )}\n              </Segment>\n            )}\n          </Segment.Group>\n        </UiForm>\n      </Container>\n    );\n  }\n}\n\nexport default injectIntl(Form, { forwardRef: true });\n","import PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport React from 'react';\nimport { keys, map } from 'lodash';\nimport { Field, Icon } from '@plone/volto/components';\nimport AnimateHeight from 'react-animate-height';\nimport { Accordion, Segment, Message } from 'semantic-ui-react';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\n\nconst messages = defineMessages({\n  editValues: {\n    id: 'Edit values',\n    defaultMessage: 'Edit values',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  thereWereSomeErrors: {\n    id: 'There were some errors',\n    defaultMessage: 'There were some errors',\n  },\n});\n\nconst InlineForm = ({\n  block,\n  description,\n  error, // Such as {message: \"It's not good\"}\n  errors = {},\n  formData,\n  onChangeField,\n  schema,\n  title,\n  icon,\n  headerActions,\n  footer,\n  focusIndex,\n  intl,\n}) => {\n  const _ = intl.formatMessage;\n  const defaultFieldset = schema.fieldsets.find((o) => o.id === 'default');\n  const other = schema.fieldsets.filter((o) => o.id !== 'default');\n\n  const [currentActiveFieldset, setCurrentActiveFieldset] = React.useState(0);\n  function handleCurrentActiveFieldset(e, blockProps) {\n    const { index } = blockProps;\n    const newIndex = currentActiveFieldset === index ? -1 : index;\n\n    setCurrentActiveFieldset(newIndex);\n  }\n\n  return (\n    <div className=\"ui form\">\n      {title && (\n        <header className=\"header pulled\">\n          {icon}\n          <h2>{title || _(messages.editValues)}</h2>\n          {headerActions}\n        </header>\n      )}\n      {description && (\n        <Segment secondary className=\"attached\">\n          {description}\n        </Segment>\n      )}\n      {keys(errors).length > 0 && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={_(messages.thereWereSomeErrors)}\n        />\n      )}\n      {error && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={error.message}\n        />\n      )}\n\n      <div id={`blockform-fieldset-${defaultFieldset.id}`}>\n        <Segment className=\"form attached\">\n          {map(defaultFieldset.fields, (field, index) => (\n            <Field\n              {...schema.properties[field]}\n              id={field}\n              fieldSet={defaultFieldset.title.toLowerCase()}\n              focus={index === focusIndex}\n              value={\n                'default' in schema.properties[field]\n                  ? formData[field] ?? schema.properties[field].default\n                  : formData[field]\n              }\n              required={schema.required.indexOf(field) !== -1}\n              onChange={(id, value) => {\n                onChangeField(id, value);\n              }}\n              key={field}\n              error={errors[field]}\n              block={block}\n            />\n          ))}\n        </Segment>\n      </div>\n\n      {other.map((fieldset, index) => (\n        <Accordion fluid styled className=\"form\" key={fieldset.id}>\n          <div key={fieldset.id} id={`blockform-fieldset-${fieldset.id}`}>\n            <Accordion.Title\n              active={currentActiveFieldset === index}\n              index={index}\n              onClick={handleCurrentActiveFieldset}\n            >\n              {fieldset.title && <>{fieldset.title}</>}\n              {currentActiveFieldset === index ? (\n                <Icon name={upSVG} size=\"20px\" />\n              ) : (\n                <Icon name={downSVG} size=\"20px\" />\n              )}\n            </Accordion.Title>\n            <Accordion.Content active={currentActiveFieldset === index}>\n              <AnimateHeight\n                animateOpacity\n                duration={500}\n                height={currentActiveFieldset === index ? 'auto' : 0}\n              >\n                <Segment className=\"attached\">\n                  {map(fieldset.fields, (field) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      value={\n                        'default' in schema.properties[field]\n                          ? formData[field] || schema.properties[field].default\n                          : formData[field]\n                      }\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={(id, value) => {\n                        onChangeField(id, value);\n                      }}\n                      key={field}\n                      error={errors[field]}\n                      block={block}\n                    />\n                  ))}\n                </Segment>\n              </AnimateHeight>\n            </Accordion.Content>\n          </div>\n        </Accordion>\n      ))}\n      {footer}\n    </div>\n  );\n};\n\nInlineForm.defaultProps = {\n  block: null,\n  description: null,\n  formData: null,\n  onChangeField: null,\n  error: null,\n  errors: {},\n  schema: {},\n  focusIndex: null,\n};\n\nInlineForm.propTypes = {\n  block: PropTypes.string,\n  description: PropTypes.string,\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(\n      PropTypes.shape({\n        fields: PropTypes.arrayOf(PropTypes.string),\n        id: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string),\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onChangeField: PropTypes.func,\n  error: PropTypes.shape({\n    message: PropTypes.string,\n  }),\n  focusIndex: PropTypes.number,\n};\n\nexport default injectIntl(InlineForm, { forwardRef: true });\n","/**\n * Modal form component.\n * @module components/manage/Form/ModalForm\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { keys, map } from 'lodash';\nimport {\n  Button,\n  Form as UiForm,\n  Header,\n  Menu,\n  Message,\n  Modal,\n  Dimmer,\n  Loader,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { FormValidation } from '@plone/volto/helpers';\nimport { Field, Icon } from '@plone/volto/components';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  required: {\n    id: 'Required input is missing.',\n    defaultMessage: 'Required input is missing.',\n  },\n  minLength: {\n    id: 'Minimum length is {len}.',\n    defaultMessage: 'Minimum length is {len}.',\n  },\n  uniqueItems: {\n    id: 'Items must be unique.',\n    defaultMessage: 'Items must be unique.',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n});\n\n/**\n * Modal form container class.\n * @class ModalForm\n * @extends Component\n */\nclass ModalForm extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }).isRequired,\n    title: PropTypes.string.isRequired,\n    formData: PropTypes.objectOf(PropTypes.any),\n    submitError: PropTypes.string,\n    onSubmit: PropTypes.func.isRequired,\n    onCancel: PropTypes.func,\n    open: PropTypes.bool,\n    submitLabel: PropTypes.string,\n    loading: PropTypes.bool,\n    loadingMessage: PropTypes.string,\n    className: PropTypes.string,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    submitLabel: null,\n    onCancel: null,\n    formData: {},\n    open: true,\n    loading: null,\n    loadingMessage: null,\n    submitError: null,\n    className: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ModalForm\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTab: 0,\n      errors: {},\n      isFormPristine: true,\n      formData: props.formData,\n    };\n    this.selectTab = this.selectTab.bind(this);\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Change field handler\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState({\n      formData: {\n        ...this.state.formData,\n        [id]: value,\n      },\n    });\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interraction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({ isFormPristine: false });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n      });\n\n      this.setState({\n        errors,\n      });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    event.preventDefault();\n    const errors = FormValidation.validateFieldsPerFieldset({\n      schema: this.props.schema,\n      formData: this.state.formData,\n      formatMessage: this.props.intl.formatMessage,\n    });\n\n    if (keys(errors).length > 0) {\n      this.setState({\n        errors,\n      });\n    } else {\n      let setFormDataCallback = (formData) => {\n        this.setState({ formData: formData, errors: {} });\n      };\n      this.props.onSubmit(this.state.formData, setFormDataCallback);\n    }\n  }\n\n  /**\n   * Select tab handler\n   * @method selectTab\n   * @param {Object} event Event object.\n   * @param {number} index Selected tab index.\n   * @returns {undefined}\n   */\n  selectTab(event, { index }) {\n    this.setState({\n      currentTab: index,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { schema, onCancel } = this.props;\n    const currentFieldset = schema.fieldsets[this.state.currentTab];\n\n    const fields = map(currentFieldset.fields, (field) => ({\n      ...schema.properties[field],\n      id: field,\n      value: this.state.formData[field],\n      required: schema.required.indexOf(field) !== -1,\n      onChange: this.onChangeField,\n      onBlur: this.onBlurField,\n      onClick: this.onClickInput,\n    }));\n\n    const state_errors = keys(this.state.errors).length > 0;\n    return (\n      <Modal open={this.props.open} className={this.props.className}>\n        <Header>{this.props.title}</Header>\n        <Dimmer active={this.props.loading}>\n          <Loader>\n            {this.props.loadingMessage || (\n              <FormattedMessage id=\"Loading\" defaultMessage=\"Loading.\" />\n            )}\n          </Loader>\n        </Dimmer>\n        <Modal.Content scrolling>\n          <UiForm\n            method=\"post\"\n            onSubmit={this.onSubmit}\n            error={state_errors || Boolean(this.props.submitError)}\n          >\n            <Message error>\n              {state_errors ? (\n                <FormattedMessage\n                  id=\"There were some errors.\"\n                  defaultMessage=\"There were some errors.\"\n                />\n              ) : (\n                ''\n              )}\n              <div>{this.props.submitError}</div>\n            </Message>\n            {schema.fieldsets.length > 1 && (\n              <Menu tabular stackable>\n                {map(schema.fieldsets, (item, index) => (\n                  <Menu.Item\n                    name={item.id}\n                    index={index}\n                    key={item.id}\n                    active={this.state.currentTab === index}\n                    onClick={this.selectTab}\n                  >\n                    {item.title}\n                  </Menu.Item>\n                ))}\n              </Menu>\n            )}\n            {fields.map((field) => (\n              <Field\n                {...field}\n                key={field.id}\n                onBlur={this.onBlurField}\n                onClick={this.onClickInput}\n                error={this.state.errors[field.id]}\n              />\n            ))}\n          </UiForm>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            basic\n            circular\n            primary\n            floated=\"right\"\n            icon={\n              <Icon name={aheadSVG} className=\"contents circled\" size=\"30px\" />\n            }\n            aria-label={\n              this.props.submitLabel\n                ? this.props.submitLabel\n                : this.props.intl.formatMessage(messages.save)\n            }\n            title={\n              this.props.submitLabel\n                ? this.props.submitLabel\n                : this.props.intl.formatMessage(messages.save)\n            }\n            size=\"big\"\n            onClick={this.onSubmit}\n            loading={this.props.loading}\n          />\n          {onCancel && (\n            <Button\n              basic\n              circular\n              secondary\n              icon={<Icon name={clearSVG} className=\"circled\" size=\"30px\" />}\n              aria-label={this.props.intl.formatMessage(messages.cancel)}\n              title={this.props.intl.formatMessage(messages.cancel)}\n              floated=\"right\"\n              size=\"big\"\n              onClick={onCancel}\n            />\n          )}\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nexport default injectIntl(ModalForm);\n","/**\n * History component.\n * @module components/manage/History/History\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Container, Dropdown, Icon, Segment, Table } from 'semantic-ui-react';\nimport { concat, map, reverse } from 'lodash';\nimport { Portal } from 'react-portal';\nimport moment from 'moment';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { Icon as IconNext, Toolbar } from '@plone/volto/components';\nimport { getHistory, revertHistory } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  history: {\n    id: 'History',\n    defaultMessage: 'History',\n  },\n});\n\n/**\n * History class.\n * @class History\n * @extends Component\n */\nclass History extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getHistory: PropTypes.func.isRequired,\n    revertHistory: PropTypes.func.isRequired,\n    revertRequest: PropTypes.shape({\n      loaded: PropTypes.bool,\n      loading: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    entries: PropTypes.arrayOf(\n      PropTypes.shape({\n        transition_title: PropTypes.string,\n        type: PropTypes.string,\n        action: PropTypes.string,\n        state_title: PropTypes.string,\n        time: PropTypes.string,\n        comments: PropTypes.string,\n        actor: PropTypes.shape({ fullname: PropTypes.string }),\n      }),\n    ).isRequired,\n    title: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Workflow\n   */\n  constructor(props) {\n    super(props);\n    this.onRevert = this.onRevert.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getHistory(getBaseUrl(this.props.pathname));\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n      this.props.getHistory(getBaseUrl(this.props.pathname));\n    }\n  }\n\n  /**\n   * On revert\n   * @method onRevert\n   * @param {object} event Event object\n   * @param {number} value Value\n   * @returns {undefined}\n   */\n  onRevert(event, { value }) {\n    this.props.revertHistory(getBaseUrl(this.props.pathname), value);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const entries = reverse(concat(this.props.entries));\n    let title = entries.length > 0 ? entries[0].state_title : '';\n    for (let x = 1; x < entries.length; x += 1) {\n      entries[x].prev_state_title = title;\n      title = entries[x].state_title || title;\n    }\n    reverse(entries);\n    return (\n      <Container id=\"page-history\">\n        <Helmet title={this.props.intl.formatMessage(messages.history)} />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"History of {title}\"\n              defaultMessage=\"History of {title}\"\n              values={{\n                title: <q>{this.props.title}</q>,\n              }}\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"You can view the history of your item below.\"\n              defaultMessage=\"You can view the history of your item below.\"\n            />\n          </Segment>\n          <Table selectable compact singleLine attached>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell width={4}>\n                  <FormattedMessage id=\"What\" defaultMessage=\"What\" />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={4}>\n                  <FormattedMessage id=\"Who\" defaultMessage=\"Who\" />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={4}>\n                  <FormattedMessage id=\"When\" defaultMessage=\"When\" />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={4}>\n                  <FormattedMessage\n                    id=\"Change Note\"\n                    defaultMessage=\"Change Note\"\n                  />\n                </Table.HeaderCell>\n                <Table.HeaderCell />\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {map(entries, (entry) => (\n                <Table.Row key={entry.time}>\n                  <Table.Cell>\n                    {('version' in entry && entry.version > 0 && (\n                      <Link\n                        className=\"item\"\n                        to={`${getBaseUrl(this.props.pathname)}/diff?one=${\n                          entry.version - 1\n                        }&two=${entry.version}`}\n                      >\n                        {entry.transition_title}\n                      </Link>\n                    )) || (\n                      <span>\n                        {entry.transition_title}\n                        {entry.type === 'workflow' &&\n                          ` (${\n                            entry.action ? `${entry.prev_state_title} → ` : ''\n                          }${entry.state_title})`}\n                      </span>\n                    )}\n                  </Table.Cell>\n                  <Table.Cell>{entry.actor.fullname}</Table.Cell>\n                  <Table.Cell>\n                    <span title={moment(entry.time).format('LLLL')}>\n                      {moment(entry.time).fromNow()}\n                    </span>\n                  </Table.Cell>\n                  <Table.Cell>{entry.comments}</Table.Cell>\n                  <Table.Cell>\n                    {entry.type === 'versioning' && (\n                      <Dropdown icon=\"ellipsis horizontal\">\n                        <Dropdown.Menu className=\"left\">\n                          {'version' in entry && entry.version > 0 && (\n                            <Link\n                              className=\"item\"\n                              to={`${getBaseUrl(\n                                this.props.pathname,\n                              )}/diff?one=${entry.version - 1}&two=${\n                                entry.version\n                              }`}\n                            >\n                              <Icon name=\"copy\" />{' '}\n                              <FormattedMessage\n                                id=\"View changes\"\n                                defaultMessage=\"View changes\"\n                              />\n                            </Link>\n                          )}\n                          {'version' in entry && (\n                            <Link\n                              className=\"item\"\n                              to={`${getBaseUrl(this.props.pathname)}?version=${\n                                entry.version\n                              }`}\n                            >\n                              <Icon name=\"eye\" />{' '}\n                              <FormattedMessage\n                                id=\"View this revision\"\n                                defaultMessage=\"View this revision\"\n                              />\n                            </Link>\n                          )}\n                          {'version' in entry && (\n                            <Dropdown.Item\n                              value={entry.version}\n                              onClick={this.onRevert}\n                            >\n                              <Icon name=\"undo\" />{' '}\n                              <FormattedMessage\n                                id=\"Revert to this revision\"\n                                defaultMessage=\"Revert to this revision\"\n                              />\n                            </Dropdown.Item>\n                          )}\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    )}\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <IconNext\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      entries: state.history.entries,\n      pathname: props.location.pathname,\n      title: state.content.data.title,\n      revertRequest: state.history.revert,\n    }),\n    { getHistory, revertHistory },\n  ),\n)(History);\n","import React from 'react';\n\nexport default function MaybeWrap({\n  condition,\n  as: Component = 'div',\n  ...props\n}) {\n  return condition ? <Component {...props} /> : props.children;\n}\n","/**\n * Messages component.\n * @module components/manage/Messages/Messages\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Message, Container } from 'semantic-ui-react';\nimport { map } from 'lodash';\n\nimport { removeMessage } from '@plone/volto/actions';\n\n/**\n * Messages container class.\n * @class Messages\n * @extends Component\n */\nclass Messages extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    removeMessage: PropTypes.func.isRequired,\n    messages: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        body: PropTypes.string,\n        level: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Messages\n   */\n  constructor(props) {\n    super(props);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  // /**\n  //  * Component will receive props\n  //  * @method componentWillReceiveProps\n  //  * @param {Object} nextProps Next properties\n  //  * @returns {undefined}\n  //  */\n  // componentWillReceiveProps(nextProps) {\n  //   if (nextProps.messages.length > this.props.messages.length) {\n  //     window.setTimeout(() => {\n  //       if (this.props.messages.length > 0) {\n  //         this.props.removeMessage(-1);\n  //       }\n  //     }, 6000);\n  //   }\n  // }\n\n  /**\n   * On dismiss\n   * @method onDismiss\n   * @param {Object} event Event object\n   * @param {number} value Index of message\n   * @returns {undefined}\n   */\n  onDismiss(event, { value }) {\n    this.props.removeMessage(value);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.messages && (\n        <Container className=\"messages\">\n          {map(this.props.messages, (message, index) => (\n            <Message\n              key={message.id}\n              value={index}\n              onDismiss={this.onDismiss}\n              error={message.level === 'error'}\n              success={message.level === 'success'}\n              warning={message.level === 'warning'}\n              info={message.level === 'info'}\n              header={message.title}\n              content={message.body}\n            />\n          ))}\n        </Container>\n      )\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    messages: state.messages.messages,\n  }),\n  { removeMessage },\n)(Messages);\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { updateIntl } from 'react-intl-redux';\nimport { getTranslationLocator } from '@plone/volto/actions';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nlet locales = {};\n\nif (config.settings) {\n  config.settings.supportedLanguages.forEach((lang) => {\n    import('~/../locales/' + lang + '.json').then((locale) => {\n      locales = { ...locales, [lang]: locale.default };\n    });\n  });\n}\n\nconst CreateTranslation = (props) => {\n  const dispatch = useDispatch();\n  const { language, translationOf } = props.location.state;\n  const [translationLocation, setTranslationLocation] = React.useState(null);\n\n  React.useEffect(() => {\n    // Only on mount, we dispatch the locator query\n    dispatch(getTranslationLocator(translationOf, language)).then((resp) => {\n      setTranslationLocation(resp['@id']);\n    });\n    // On unmount we dispatch the language change\n    return () => {\n      dispatch(\n        updateIntl({\n          locale: language,\n          messages: locales[language],\n        }),\n      );\n    };\n    // On mount only\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []);\n\n  return (\n    translationLocation && (\n      <Redirect\n        to={{\n          pathname: `${flattenToAppURL(translationLocation)}/add`,\n          search: `?type=${props.location.state.type}`,\n          state: {\n            translationOf: props.location.state.translationOf,\n            language: props.location.state.language,\n          },\n        }}\n      />\n    )\n  );\n};\n\nexport default CreateTranslation;\n","import React from 'react';\nimport { Button, Container, Segment, Table } from 'semantic-ui-react';\nimport { Helmet } from '@plone/volto/helpers';\nimport langmap from 'langmap';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport { reduce } from 'lodash';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Icon, Toast, Toolbar } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport {\n  deleteLinkTranslation,\n  getContent,\n  linkTranslation,\n} from '@plone/volto/actions';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Portal } from 'react-portal';\nimport { toast } from 'react-toastify';\n\nimport addSVG from '@plone/volto/icons/add.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\n\nconst messages = defineMessages({\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  linked: {\n    id: 'Translation linked',\n    defaultMessage: 'Translation linked',\n  },\n  unlinked: {\n    id: 'Translation linking removed',\n    defaultMessage: 'Translation linking removed',\n  },\n  ManageTranslations: {\n    id: 'Manage Translations',\n    defaultMessage: 'Manage Translations',\n  },\n  ManageTranslationsTitle: {\n    id: 'Manage translations for {title}',\n    defaultMessage: 'Manage translations for {title}',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\nconst ManageTranslations = (props) => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const content = useSelector((state) => state.content.data);\n  const dispatch = useDispatch();\n\n  const { isObjectBrowserOpen, openObjectBrowser } = props;\n\n  const currentSelectedItem = React.useRef(null);\n\n  React.useEffect(() => {\n    if (!content) {\n      dispatch(getContent(getBaseUrl(pathname)));\n    }\n  }, [dispatch, content, pathname]);\n\n  React.useEffect(() => {\n    // Only execute the link API call on the final item selected, once the ObjectBrowser\n    // is closed\n    if (!isObjectBrowserOpen && currentSelectedItem.current) {\n      dispatch(linkTranslation(content['@id'], currentSelectedItem.current))\n        .then((resp) => {\n          toast.success(\n            <Toast\n              success\n              title={intl.formatMessage(messages.success)}\n              content={intl.formatMessage(messages.linked)}\n            />,\n          );\n          dispatch(getContent(getBaseUrl(pathname)));\n        })\n        .catch((error) => {\n          // TODO: The true error sent by the API is shadowed by the superagent one\n          // Update this when this issue is fixed.\n          const shadowedError = JSON.parse(error.response.text);\n          toast.error(\n            <Toast\n              error\n              title={shadowedError.error.type}\n              content={shadowedError.error.message}\n            />,\n            { toastId: 'linkFailed' },\n          );\n        });\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [isObjectBrowserOpen]);\n\n  const translations = content &&\n    content['@components'].translations.items && {\n      [content.language.token]: {\n        url: content['@id'],\n      },\n      ...reduce(\n        content['@components'].translations.items,\n        (acc, value) => {\n          return { ...acc, [value.language]: { url: value['@id'] } };\n        },\n        {},\n      ),\n    };\n\n  function onSelectTarget(target) {\n    // We store the selection temporarily on the component, because we don't want it to\n    // execute it right away, since that will lead into duplicate link requests and we\n    // only want the last to get through\n    currentSelectedItem.current = target;\n  }\n\n  function onDeleteTranslation(lang) {\n    dispatch(deleteLinkTranslation(content['@id'], lang))\n      .then((resp) => {\n        toast.success(\n          <Toast\n            success\n            title={intl.formatMessage(messages.success)}\n            content={intl.formatMessage(messages.unlinked)}\n          />,\n        );\n        dispatch(getContent(getBaseUrl(pathname)));\n      })\n      .catch((error) => {\n        // TODO: The true error sent by the API is shadowed by the superagent one\n        // Update this when this issue is fixed.\n        const shadowedError = JSON.parse(error.response.text);\n        toast.error(\n          <Toast\n            error\n            title={shadowedError.error.type}\n            content={shadowedError.error.message}\n          />,\n          { toastId: 'linkFailed' },\n        );\n      });\n  }\n\n  return (\n    <Container id=\"page-manage-translations\">\n      <Helmet title={intl.formatMessage(messages.ManageTranslations)} />\n      <Segment.Group raised>\n        <Segment className=\"primary\">\n          <FormattedMessage\n            id=\"Manage translations for {title}\"\n            defaultMessage=\"Manage translations for {title}\"\n            values={{ title: <q>{content.title}</q> }}\n          />\n        </Segment>\n        {content && (\n          <Table selectable compact singleLine attached>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Language</Table.HeaderCell>\n                <Table.HeaderCell>Path</Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"right\">Tools</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {config.settings.supportedLanguages.map((lang) => (\n                <Table.Row key={lang}>\n                  <Table.Cell collapsing>\n                    {lang === content.language.token ? (\n                      <strong>{langmap[lang].nativeName}</strong>\n                    ) : (\n                      langmap[lang].nativeName\n                    )}\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Link to={flattenToAppURL(translations[lang]?.url || '')}>\n                      {flattenToAppURL(translations[lang]?.url || '')}\n                    </Link>\n                  </Table.Cell>\n                  <Table.Cell\n                    textAlign=\"right\"\n                    className=\"manage-multilingual-tools\"\n                  >\n                    <Button.Group>\n                      <Button\n                        basic\n                        icon\n                        disabled={\n                          lang === content.language.token ||\n                          translations?.[lang]\n                        }\n                        as={Link}\n                        to={{\n                          pathname: `${pathname}/create-translation`,\n                          state: {\n                            type: content['@type'],\n                            translationOf: flattenToAppURL(content['@id']),\n                            language: lang,\n                          },\n                        }}\n                      >\n                        <Icon name={addSVG} size=\"24px\" />\n                      </Button>\n                    </Button.Group>\n                    {translations?.[lang] ? (\n                      <Button.Group>\n                        <Button\n                          basic\n                          icon\n                          disabled={lang === content.language.token}\n                          onClick={() => onDeleteTranslation(lang)}\n                        >\n                          <Icon\n                            name={\n                              lang === content.language.token\n                                ? linkSVG\n                                : unlinkSVG\n                            }\n                            size=\"24px\"\n                          />\n                        </Button>\n                      </Button.Group>\n                    ) : (\n                      <Button.Group>\n                        <Button\n                          basic\n                          icon\n                          disabled={lang === content.language.token}\n                          onClick={() =>\n                            openObjectBrowser({\n                              mode: 'link',\n                              overlay: true,\n                              onSelectItem: (url) => {\n                                onSelectTarget(url, isObjectBrowserOpen);\n                              },\n                            })\n                          }\n                        >\n                          <Icon name={linkSVG} size=\"24px\" />\n                        </Button>\n                      </Button.Group>\n                    )}\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        {__CLIENT__ && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link to={`${getBaseUrl(pathname)}`} className=\"item\">\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Segment.Group>\n    </Container>\n  );\n};\n\nexport default withObjectBrowser(ManageTranslations);\n","/**\n * Change password component.\n * @module components/manage/Preferences/ChangePassword\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\n\nimport { Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport { updatePassword } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changePassword: {\n    id: 'Change Password',\n    defaultMessage: 'Change Password',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  oldPasswordTitle: {\n    id: 'Current password',\n    defaultMessage: 'Current password',\n  },\n  oldPasswordDescription: {\n    id: 'Enter your current password.',\n    defaultMessage: 'Enter your current password.',\n  },\n  newPasswordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  newPasswordDescription: {\n    id: 'Enter your new password. Minimum 5 characters.',\n    defaultMessage: 'Enter your new password. Minimum 5 characters.',\n  },\n  newPasswordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  newPasswordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * ChangePassword class.\n * @class ChangePassword\n * @extends Component\n */\nclass ChangePassword extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    userId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    updatePassword: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.newPassword === data.newPasswordRepeat) {\n      this.props.updatePassword(\n        this.props.userId,\n        data.oldPassword,\n        data.newPassword,\n      );\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.saved)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-change-password\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.changePassword)}\n        />\n        <Form\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n              },\n            ],\n            properties: {\n              oldPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.oldPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.oldPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.newPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPasswordRepeat: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatDescription,\n                ),\n                title: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatTitle,\n                ),\n                type: 'string',\n                widget: 'password',\n              },\n            },\n            required: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n          }}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          loading={this.props.loading}\n        />\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      userId: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n      loading: state.users.update_password.loading,\n      pathname: props.location.pathname,\n    }),\n    { updatePassword },\n  ),\n)(ChangePassword);\n","/**\n * Personal information component.\n * @module components/manage/Preferences/PersonalInformation\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\n\nimport { Form, Toast } from '@plone/volto/components';\nimport { getUser, updateUser } from '@plone/volto/actions';\n\nconst messages = defineMessages({\n  personalInformation: {\n    id: 'Personal Information',\n    defaultMessage: 'Personal Information',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  fullnameTitle: {\n    id: 'Full Name',\n    defaultMessage: 'Full Name',\n  },\n  fullnameDescription: {\n    id: 'Enter full name, e.g. John Smith.',\n    defaultMessage: 'Enter full name, e.g. John Smith.',\n  },\n  emailTitle: {\n    id: 'E-mail',\n    defaultMessage: 'E-mail',\n  },\n  emailDescription: {\n    id: 'We will use this address if you need to recover your password',\n    defaultMessage:\n      'We will use this address if you need to recover your password',\n  },\n  portraitTitle: {\n    id: 'Portrait',\n    defaultMessage: 'Portrait',\n  },\n  portraitDescription: {\n    id: 'The user portrait/avatar',\n    defaultMessage: 'The user portrait/avatar',\n  },\n  homePageTitle: {\n    id: 'Home page',\n    defaultMessage: 'Home page',\n  },\n  homePageDescription: {\n    id: 'The URL for your external home page, if you have one.',\n    defaultMessage: 'The URL for your external home page, if you have one.',\n  },\n  locationTitle: {\n    id: 'Location',\n    defaultMessage: 'Location',\n  },\n  locationDescription: {\n    id:\n      'Your location - either city and country - or in a company setting, where your office is located.',\n    defaultMessage:\n      'Your location - either city and country - or in a company setting, where your office is located.',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * PersonalInformation class.\n * @class PersonalInformation\n * @extends Component\n */\nclass PersonalInformation extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    user: PropTypes.shape({\n      fullname: PropTypes.string,\n      email: PropTypes.string,\n      home_page: PropTypes.string,\n      location: PropTypes.string,\n    }).isRequired,\n    updateUser: PropTypes.func.isRequired,\n    getUser: PropTypes.func.isRequired,\n    userId: PropTypes.string.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    loading: PropTypes.bool,\n    closeMenu: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getUser(this.props.userId);\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    // We don't want the user to change his login name/username or the roles\n    // from this form\n    // Backend will complain anyways, but we clean the data here before it does\n    delete data.id;\n    delete data.username;\n    delete data.roles;\n    this.props.updateUser(this.props.userId, data);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.saved)}\n      />,\n    );\n    this.props.closeMenu();\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.closeMenu();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Form\n        formData={this.props.user}\n        schema={{\n          fieldsets: [\n            {\n              id: 'default',\n              title: this.props.intl.formatMessage(messages.default),\n              fields: [\n                'fullname',\n                'email',\n                'portrait',\n                'home_page',\n                'location',\n              ],\n            },\n          ],\n          properties: {\n            fullname: {\n              description: this.props.intl.formatMessage(\n                messages.fullnameDescription,\n              ),\n              title: this.props.intl.formatMessage(messages.fullnameTitle),\n              type: 'string',\n            },\n            email: {\n              description: this.props.intl.formatMessage(\n                messages.emailDescription,\n              ),\n              title: this.props.intl.formatMessage(messages.emailTitle),\n              type: 'string',\n            },\n            portrait: {\n              description: this.props.intl.formatMessage(\n                messages.portraitDescription,\n              ),\n              title: this.props.intl.formatMessage(messages.portraitTitle),\n              type: 'object',\n            },\n            home_page: {\n              description: this.props.intl.formatMessage(\n                messages.homePageDescription,\n              ),\n              title: this.props.intl.formatMessage(messages.homePageTitle),\n              type: 'string',\n            },\n            location: {\n              description: this.props.intl.formatMessage(\n                messages.locationDescription,\n              ),\n              title: this.props.intl.formatMessage(messages.locationTitle),\n              type: 'string',\n            },\n          },\n          required: ['email'],\n        }}\n        onSubmit={this.onSubmit}\n        onCancel={this.onCancel}\n        loading={this.props.loading}\n      />\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      user: state.users.user,\n      userId: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n      loaded: state.users.get.loaded,\n      loading: state.users.update.loading,\n    }),\n    { getUser, updateUser },\n  ),\n)(PersonalInformation);\n","/**\n * Personal preferences component.\n * @module components/manage/Preferences/PersonalPreferences\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { updateIntl } from 'react-intl-redux';\nimport { map, keys } from 'lodash';\nimport cookie from 'react-cookie';\nimport request from 'superagent';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\n\nimport { Form, Toast } from '@plone/volto/components';\nimport languages from '@plone/volto/constants/Languages';\n\nconst messages = defineMessages({\n  personalPreferences: {\n    id: 'Personal Preferences',\n    defaultMessage: 'Personal Preferences',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  language: {\n    id: 'Language',\n    defaultMessage: 'Language',\n  },\n  languageDescription: {\n    id: 'Your preferred language',\n    defaultMessage: 'Your preferred language',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * PersonalPreferences class.\n * @class PersonalPreferences\n * @extends Component\n */\nclass PersonalPreferences extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateIntl: PropTypes.func.isRequired,\n    closeMenu: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs PersonalPreferences\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    cookie.save('I18N_LANGUAGE', data.language || '', {\n      expires: new Date((2 ** 31 - 1) * 1000),\n      path: '/',\n    });\n    request('GET', `/assets/locales/${data.language || 'en'}.json`).then(\n      (locale) => {\n        this.props.updateIntl({\n          locale: locale.language || 'en',\n          messages: locale.body,\n        });\n        toast.success(\n          <Toast\n            success\n            title={this.props.intl.formatMessage(messages.success)}\n            content={this.props.intl.formatMessage(messages.saved)}\n          />,\n        );\n      },\n    );\n    toast.success(\n      <Toast success title={this.props.intl.formatMessage(messages.saved)} />,\n    );\n    this.props.closeMenu();\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.closeMenu();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Form\n        formData={{ language: cookie.load('I18N_LANGUAGE') || '' }}\n        schema={{\n          fieldsets: [\n            {\n              id: 'default',\n              title: this.props.intl.formatMessage(messages.default),\n              fields: ['language'],\n            },\n          ],\n          properties: {\n            language: {\n              description: this.props.intl.formatMessage(\n                messages.languageDescription,\n              ),\n              title: this.props.intl.formatMessage(messages.language),\n              type: 'string',\n              choices: map(keys(languages), (lang) => [lang, languages[lang]]),\n            },\n          },\n          required: [],\n        }}\n        onSubmit={this.onSubmit}\n        onCancel={this.onCancel}\n      />\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(null, { updateIntl }),\n)(PersonalPreferences);\n","/**\n * Sharing container.\n * @module components/manage/Sharing/Sharing\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { find, isEqual, map } from 'lodash';\nimport { Portal } from 'react-portal';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Form,\n  Icon as IconOld,\n  Input,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { updateSharing, getSharing } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { Icon, Toolbar } from '@plone/volto/components';\n\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  searchForUserOrGroup: {\n    id: 'Search for user or group',\n    defaultMessage: 'Search for user or group',\n  },\n  inherit: {\n    id: 'Inherit permissions from higher levels',\n    defaultMessage: 'Inherit permissions from higher levels',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  sharing: {\n    id: 'Sharing',\n    defaultMessage: 'Sharing',\n  },\n  user: {\n    id: 'User',\n    defaultMessage: 'User',\n  },\n  group: {\n    id: 'Group',\n    defaultMessage: 'Group',\n  },\n  globalRole: {\n    id: 'Global role',\n    defaultMessage: 'Global role',\n  },\n  inheritedValue: {\n    id: 'Inherited value',\n    defaultMessage: 'Inherited value',\n  },\n});\n\n/**\n * SharingComponent class.\n * @class SharingComponent\n * @extends Component\n */\nclass SharingComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateSharing: PropTypes.func.isRequired,\n    getSharing: PropTypes.func.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    entries: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        login: PropTypes.string,\n        roles: PropTypes.object,\n        title: PropTypes.string,\n        type: PropTypes.string,\n      }),\n    ).isRequired,\n    available_roles: PropTypes.arrayOf(PropTypes.object).isRequired,\n    inherit: PropTypes.bool,\n    title: PropTypes.string.isRequired,\n    login: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    inherit: null,\n    login: '',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onToggleInherit = this.onToggleInherit.bind(this);\n    this.state = {\n      search: '',\n      inherit: props.inherit,\n      entries: props.entries,\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n    }\n    this.setState({\n      inherit:\n        this.props.inherit === null ? nextProps.inherit : this.state.inherit,\n      entries: map(nextProps.entries, (entry) => {\n        const values = find(this.state.entries, { id: entry.id });\n        return {\n          ...entry,\n          roles: values ? values.roles : entry.roles,\n        };\n      }),\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    const data = { entries: [] };\n    event.preventDefault();\n    if (this.props.inherit !== this.state.inherit) {\n      data.inherit = this.state.inherit;\n    }\n    for (let i = 0; i < this.props.entries.length; i += 1) {\n      if (!isEqual(this.props.entries[i].roles, this.state.entries[i].roles)) {\n        data.entries.push({\n          id: this.state.entries[i].id,\n          type: this.state.entries[i].type,\n          roles: this.state.entries[i].roles,\n        });\n      }\n    }\n    this.props.updateSharing(getBaseUrl(this.props.pathname), data);\n  }\n\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSearch(event) {\n    event.preventDefault();\n    this.props.getSharing(getBaseUrl(this.props.pathname), this.state.search);\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   * On toggle inherit handler\n   * @method onToggleInherit\n   * @returns {undefined}\n   */\n  onToggleInherit() {\n    this.setState({\n      inherit: !this.state.inherit,\n    });\n  }\n\n  /**\n   * On change handler\n   * @method onChange\n   * @param {object} event Event object\n   * @param {string} value Entry value\n   * @returns {undefined}\n   */\n  onChange(event, { value }) {\n    const [principal, role] = value.split(':');\n    this.setState({\n      entries: map(this.state.entries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === principal\n            ? {\n                ...entry.roles,\n                [role]: !entry.roles[role],\n              }\n            : entry.roles,\n      })),\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-sharing\">\n        <Helmet title={this.props.intl.formatMessage(messages.sharing)} />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Sharing for {title}\"\n              defaultMessage=\"Sharing for {title}\"\n              values={{ title: <q>{this.props.title}</q> }}\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"You can control who can view and edit your item using the list below.\"\n              defaultMessage=\"You can control who can view and edit your item using the list below.\"\n            />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearch}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchForUserOrGroup,\n                  )}\n                  onChange={this.onChangeSearch}\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form onSubmit={this.onSubmit}>\n            <Table celled padded striped attached>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>\n                    <FormattedMessage id=\"Name\" defaultMessage=\"Name\" />\n                  </Table.HeaderCell>\n                  {this.props.available_roles?.map((role) => (\n                    <Table.HeaderCell key={role.id}>\n                      {role.title}\n                    </Table.HeaderCell>\n                  ))}\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {this.state.entries?.map((entry) => (\n                  <Table.Row key={entry.id}>\n                    <Table.Cell>\n                      <IconOld\n                        name={entry.type === 'user' ? 'user' : 'users'}\n                        title={\n                          entry.type === 'user'\n                            ? this.props.intl.formatMessage(messages.user)\n                            : this.props.intl.formatMessage(messages.group)\n                        }\n                      />{' '}\n                      {entry.title}\n                      {entry.login && ` (${entry.login})`}\n                    </Table.Cell>\n                    {this.props.available_roles?.map((role) => (\n                      <Table.Cell key={role.id}>\n                        {entry.roles[role.id] === 'global' && (\n                          <IconOld\n                            name=\"check circle outline\"\n                            title={this.props.intl.formatMessage(\n                              messages.globalRole,\n                            )}\n                            color=\"blue\"\n                          />\n                        )}\n                        {entry.roles[role.id] === 'acquired' && (\n                          <IconOld\n                            name=\"check circle outline\"\n                            color=\"green\"\n                            title={this.props.intl.formatMessage(\n                              messages.inheritedValue,\n                            )}\n                          />\n                        )}\n                        {typeof entry.roles[role.id] === 'boolean' && (\n                          <Checkbox\n                            onChange={this.onChange}\n                            value={`${entry.id}:${role.id}`}\n                            checked={entry.roles[role.id]}\n                            disabled={entry.login === this.props.login}\n                          />\n                        )}\n                      </Table.Cell>\n                    ))}\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n            <Segment attached>\n              <Form.Field>\n                <Checkbox\n                  checked={this.state.inherit}\n                  onChange={this.onToggleInherit}\n                  label={this.props.intl.formatMessage(messages.inherit)}\n                />\n              </Form.Field>\n              <p className=\"help\">\n                <FormattedMessage\n                  id=\"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator.\"\n                  defaultMessage=\"By default, permissions from the container of this item are inherited. If you disable this, only the explicitly defined sharing permissions will be valid. In the overview, the symbol {inherited} indicates an inherited value. Similarly, the symbol {global} indicates a global role, which is managed by the site administrator.\"\n                  values={{\n                    inherited: (\n                      <IconOld name=\"check circle outline\" color=\"green\" />\n                    ),\n                    global: (\n                      <IconOld name=\"check circle outline\" color=\"blue\" />\n                    ),\n                  }}\n                />\n              </p>\n            </Segment>\n            <Segment className=\"actions\" attached clearing>\n              <Button\n                basic\n                primary\n                floated=\"right\"\n                type=\"submit\"\n                aria-label={this.props.intl.formatMessage(messages.save)}\n                title={this.props.intl.formatMessage(messages.save)}\n                loading={this.props.loading}\n                onClick={this.onSubmit}\n              >\n                <Icon className=\"circled\" name={aheadSVG} size=\"30px\" />\n              </Button>\n              <Button\n                basic\n                secondary\n                aria-label={this.props.intl.formatMessage(messages.cancel)}\n                title={this.props.intl.formatMessage(messages.cancel)}\n                floated=\"right\"\n                onClick={this.onCancel}\n              >\n                <Icon className=\"circled\" name={clearSVG} size=\"30px\" />\n              </Button>\n            </Segment>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      entries: state.sharing.data.entries,\n      inherit: state.sharing.data.inherit,\n      available_roles: state.sharing.data.available_roles,\n      updateRequest: state.sharing.update,\n      pathname: props.location.pathname,\n      title: state.content.data.title,\n      login: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n    }),\n    { updateSharing, getSharing },\n  ),\n)(SharingComponent);\n","import React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport imageLeftSVG from '@plone/volto/icons/image-left.svg';\nimport imageRightSVG from '@plone/volto/icons/image-right.svg';\nimport imageFitSVG from '@plone/volto/icons/image-fit.svg';\nimport imageFullSVG from '@plone/volto/icons/image-full.svg';\n\nconst messages = defineMessages({\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  full: {\n    id: 'Full',\n    defaultMessage: 'Full',\n  },\n});\n\nconst AlignBlock = ({ align, onChangeBlock, data, intl, block }) => {\n  /**\n   * Align block handler\n   * @method onAlignBlock\n   * @param {string} align Alignment option\n   * @returns {undefined}\n   */\n  function onAlignBlock(align) {\n    onChangeBlock(block, {\n      ...data,\n      align,\n    });\n  }\n\n  return (\n    <div>\n      <Button.Group>\n        <Button\n          icon\n          basic\n          aria-label={intl.formatMessage(messages.left)}\n          onClick={() => onAlignBlock('left')}\n          active={data.align === 'left'}\n        >\n          <Icon name={imageLeftSVG} size=\"24px\" />\n        </Button>\n      </Button.Group>\n      <Button.Group>\n        <Button\n          icon\n          basic\n          aria-label={intl.formatMessage(messages.right)}\n          onClick={() => onAlignBlock('right')}\n          active={data.align === 'right'}\n        >\n          <Icon name={imageRightSVG} size=\"24px\" />\n        </Button>\n      </Button.Group>\n      <Button.Group>\n        <Button\n          icon\n          basic\n          aria-label={intl.formatMessage(messages.center)}\n          onClick={() => onAlignBlock('center')}\n          active={data.align === 'center' || !data.align}\n        >\n          <Icon name={imageFitSVG} size=\"24px\" />\n        </Button>\n      </Button.Group>\n      <Button.Group>\n        <Button\n          icon\n          basic\n          aria-label={intl.formatMessage(messages.full)}\n          onClick={() => onAlignBlock('full')}\n          active={data.align === 'full'}\n        >\n          <Icon name={imageFullSVG} size=\"24px\" />\n        </Button>\n      </Button.Group>\n    </div>\n  );\n};\n\nexport default injectIntl(AlignBlock);\n","import React from 'react';\nimport ObjectBrowserBody from '@plone/volto/components/manage/Sidebar/ObjectBrowserBody';\nimport { getParentURL } from '@plone/volto/components/manage/Sidebar/ObjectBrowserBody';\nimport SidebarPopup from '@plone/volto/components/manage/Sidebar/SidebarPopup';\n\nconst withObjectBrowser = (WrappedComponent) =>\n  class extends React.Component {\n    /**\n     * Default properties\n     * @property {Object} defaultProps Default properties.\n     * @static\n     */\n    static defaultProps = {\n      onChangeBlock: () => {},\n      data: {},\n      block: new Date().getTime() + '',\n    };\n\n    constructor() {\n      super();\n      this.state = { isObjectBrowserOpen: false };\n    }\n\n    /**\n     * openObjectBrowser\n     * @function openObjectBrowser\n     * @param {Object} object ObjectBrowser configuration.\n     * @param {string} object.mode Quick mode, defaults to `image`. Values: link, image, multiple\n     * @param {string} object.dataName Name of the block data property to write the selected item.\n     * @param {string} object.onSelectItem Function that will be called on item selection.\n     * @param {string} object.overlay Boolean to show overlay background on content when opening objectBrowser.\n     *\n     * Usage:\n     *\n     * this.props.openObjectBrowser();\n     *\n     * this.props.openObjectBrowser({mode: 'link'});\n     *\n     * this.props.openObjectBrowser({\n     *   dataName: 'myfancydatafield'\n     *   });\n     *\n     * this.props.openObjectBrowser({\n     *   onSelectItem: url =>\n     *     this.props.onChangeBlock(this.props.block, {\n     *       ...this.props.data,\n     *       myfancydatafield: url,\n     *     }),\n     *   });\n     */\n    openObjectBrowser = ({\n      mode = 'image',\n      onSelectItem = null,\n      dataName = null,\n      overlay = null,\n      propDataName = null,\n      selectableTypes,\n      maximumSelectionSize,\n    } = {}) =>\n      this.setState(() => ({\n        isObjectBrowserOpen: true,\n        mode,\n        onSelectItem,\n        dataName,\n        overlay,\n        propDataName,\n        selectableTypes,\n        maximumSelectionSize,\n      }));\n\n    closeObjectBrowser = () => this.setState({ isObjectBrowserOpen: false });\n\n    render() {\n      let contextURL = this.props.pathname ?? this.props.location?.pathname;\n      if (contextURL?.endsWith('edit')) {\n        contextURL = getParentURL(contextURL);\n      }\n      return (\n        <>\n          <WrappedComponent\n            {...this.props}\n            isObjectBrowserOpen={this.state.isObjectBrowserOpen}\n            openObjectBrowser={this.openObjectBrowser}\n            closeObjectBrowser={this.closeObjectBrowser}\n          />\n\n          <>\n            <SidebarPopup\n              open={this.state.isObjectBrowserOpen}\n              onClose={this.closeObjectBrowser}\n              overlay={this.state.overlay}\n            >\n              <ObjectBrowserBody\n                {...this.props}\n                data={\n                  this.state.propDataName\n                    ? this.props[this.state.propDataName]\n                    : { ...this.props.data, contextURL }\n                }\n                closeObjectBrowser={this.closeObjectBrowser}\n                mode={this.state.mode}\n                onSelectItem={this.state.onSelectItem}\n                dataName={this.state.dataName}\n                selectableTypes={this.state.selectableTypes}\n                maximumSelectionSize={this.state.maximumSelectionSize}\n              />\n            </SidebarPopup>\n          </>\n        </>\n      );\n    }\n  };\nexport default withObjectBrowser;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { Input, Segment } from 'semantic-ui-react';\nimport { join } from 'lodash';\n\n// These absolute imports (without using the corresponding centralized index.js) are required\n// to cut circular import problems, this file should never use them. This is because of\n// the very nature of the functionality of the component and its relationship with others\nimport { searchContent } from '@plone/volto/actions/search/search';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { flattenToAppURL, isInternalURL } from '@plone/volto/helpers/Url/Url';\nimport config from '@plone/volto/registry';\n\nimport backSVG from '@plone/volto/icons/back.svg';\nimport folderSVG from '@plone/volto/icons/folder.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport searchSVG from '@plone/volto/icons/zoom.svg';\nimport linkSVG from '@plone/volto/icons/link.svg';\n\nimport ObjectBrowserNav from '@plone/volto/components/manage/Sidebar/ObjectBrowserNav';\n\nconst messages = defineMessages({\n  SearchInputPlaceholder: {\n    id: 'Search content',\n    defaultMessage: 'Search content',\n  },\n  SelectedItems: {\n    id: 'Selected items',\n    defaultMessage: 'Selected items',\n  },\n  of: { id: 'Selected items - x of y', defaultMessage: 'of' },\n});\n\nexport function getParentURL(url) {\n  return flattenToAppURL(`${join(url.split('/').slice(0, -1), '/')}`) || '/';\n}\n\n/**\n * ObjectBrowserBody container class.\n * @class ObjectBrowserBody\n * @extends Component\n */\nclass ObjectBrowserBody extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    block: PropTypes.string.isRequired,\n    mode: PropTypes.string.isRequired,\n    data: PropTypes.any.isRequired,\n    searchSubrequests: PropTypes.objectOf(PropTypes.any).isRequired,\n    searchContent: PropTypes.func.isRequired,\n    closeObjectBrowser: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectItem: PropTypes.func,\n    dataName: PropTypes.string,\n    maximumSelectionSize: PropTypes.number,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    image: '',\n    href: '',\n    onSelectItem: null,\n    dataName: null,\n    selectableTypes: [],\n    maximumSelectionSize: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentFolder:\n        this.props.mode === 'multiple'\n          ? '/'\n          : this.props.data?.contextURL\n          ? getParentURL(this.props.data.contextURL)\n          : '/',\n      currentImageFolder:\n        this.props.mode === 'multiple'\n          ? '/'\n          : this.props.data?.url\n          ? getParentURL(this.props.data.url)\n          : '/',\n      currentLinkFolder:\n        this.props.mode === 'multiple'\n          ? '/'\n          : this.props.data?.href\n          ? getParentURL(this.props.data.href)\n          : '/',\n      parentFolder: '',\n      selectedImage:\n        this.props.mode === 'multiple'\n          ? ''\n          : this.props.data?.url\n          ? flattenToAppURL(this.props.data.url)\n          : '',\n      selectedHref:\n        this.props.mode === 'multiple'\n          ? ''\n          : this.props.data?.href\n          ? flattenToAppURL(this.props.data.href)\n          : '',\n      showSearchInput: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.initialSearch(this.props.mode);\n  }\n\n  initialSearch = (mode) => {\n    const currentSelected =\n      mode === 'multiple'\n        ? ''\n        : mode === 'image'\n        ? this.state.selectedImage\n        : this.state.selectedHref;\n    if (currentSelected && isInternalURL(currentSelected)) {\n      this.props.searchContent(\n        getParentURL(currentSelected),\n        {\n          'path.depth': 1,\n          sort_on: 'getObjPositionInParent',\n          metadata_fields: '_all',\n          b_size: 1000,\n        },\n        `${this.props.block}-${mode}`,\n      );\n    } else {\n      this.props.searchContent(\n        this.state.currentFolder,\n        {\n          'path.depth': 1,\n          sort_on: 'getObjPositionInParent',\n          metadata_fields: '_all',\n          b_size: 1000,\n        },\n        `${this.props.block}-${mode}`,\n      );\n    }\n  };\n\n  navigateTo = (id) => {\n    this.props.searchContent(\n      id,\n      {\n        'path.depth': 1,\n        sort_on: 'getObjPositionInParent',\n        metadata_fields: '_all',\n        b_size: 1000,\n      },\n      `${this.props.block}-${this.props.mode}`,\n    );\n    const parent = `${join(id.split('/').slice(0, -1), '/')}` || '/';\n    this.setState(() => ({\n      parentFolder: parent,\n      currentFolder: id || '/',\n    }));\n  };\n\n  toggleSearchInput = () =>\n    this.setState((prevState) => ({\n      showSearchInput: !prevState.showSearchInput,\n    }));\n\n  onSearch = (e) => {\n    const text = e.target.value;\n    text.length > 2\n      ? this.props.searchContent(\n          '/',\n          {\n            SearchableText: `${text}*`,\n            metadata_fields: '_all',\n          },\n          `${this.props.block}-${this.props.mode}`,\n        )\n      : this.props.searchContent(\n          '/',\n          {\n            'path.depth': 1,\n            sort_on: 'getObjPositionInParent',\n            metadata_fields: '_all',\n          },\n          `${this.props.block}-${this.props.mode}`,\n        );\n  };\n\n  onSelectItem = (item) => {\n    const url = item['@id'];\n    const title = item.title;\n    const { block, data, mode, dataName, onChangeBlock } = this.props;\n\n    const updateState = (mode) => {\n      switch (mode) {\n        case 'image':\n          this.setState({\n            selectedImage: url,\n            currentImageFolder: getParentURL(url),\n          });\n          break;\n        case 'link':\n          this.setState({\n            selectedHref: url,\n            currentLinkFolder: getParentURL(url),\n          });\n          break;\n        default:\n          break;\n      }\n    };\n\n    if (dataName) {\n      onChangeBlock(block, {\n        ...data,\n        [dataName]: url,\n      });\n    } else if (this.props.onSelectItem) {\n      this.props.onSelectItem(url, item);\n    } else if (mode === 'image') {\n      onChangeBlock(block, {\n        ...data,\n        url: flattenToAppURL(item.getURL),\n        alt: title,\n      });\n    } else if (mode === 'link') {\n      onChangeBlock(block, {\n        ...data,\n        href: flattenToAppURL(url),\n      });\n    }\n    updateState(mode);\n  };\n\n  onChangeBlockData = (key, value) => {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      [key]: value,\n    });\n  };\n\n  isSelectable = (item) => {\n    return this.props.selectableTypes.length > 0\n      ? this.props.selectableTypes.indexOf(item['@type']) >= 0\n      : true;\n  };\n\n  handleClickOnItem = (item) => {\n    if (this.props.mode === 'image') {\n      if (item.is_folderish) {\n        this.navigateTo(item['@id']);\n      }\n      if (config.settings.imageObjects.includes(item['@type'])) {\n        this.onSelectItem(item);\n      }\n    } else {\n      if (this.isSelectable(item)) {\n        if (\n          !this.props.maximumSelectionSize ||\n          !this.props.data ||\n          this.props.data.length < this.props.maximumSelectionSize\n        ) {\n          this.onSelectItem(item);\n          let length = this.props.data ? this.props.data.length : 0;\n          if (length + 1 >= this.props.maximumSelectionSize) {\n            this.props.closeObjectBrowser();\n          }\n        } else {\n          this.props.closeObjectBrowser();\n        }\n      } else {\n        this.navigateTo(item['@id']);\n      }\n    }\n  };\n\n  handleDoubleClickOnItem = (item) => {\n    if (this.props.mode === 'image') {\n      if (item.is_folderish) {\n        this.navigateTo(item['@id']);\n      }\n      if (config.settings.imageObjects.includes(item['@type'])) {\n        this.onSelectItem(item);\n        this.props.closeObjectBrowser();\n      }\n    } else {\n      if (this.isSelectable(item)) {\n        if (this.props.data.length < this.props.maximumSelectionSize) {\n          this.onSelectItem(item);\n        }\n        this.props.closeObjectBrowser();\n      } else {\n        this.navigateTo(item['@id']);\n      }\n    }\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Segment.Group raised>\n        <header className=\"header pulled\">\n          <div className=\"vertical divider\" />\n          {this.state.currentFolder === '/' ? (\n            <>\n              {this.props.mode === 'image' ? (\n                <Icon name={folderSVG} size=\"24px\" />\n              ) : (\n                <Icon name={linkSVG} size=\"24px\" />\n              )}\n            </>\n          ) : (\n            <Icon\n              name={backSVG}\n              size=\"24px\"\n              onClick={() => this.navigateTo(this.state.parentFolder)}\n            />\n          )}\n          {this.state.showSearchInput ? (\n            <Input\n              className=\"search\"\n              onChange={this.onSearch}\n              placeholder={this.props.intl.formatMessage(\n                messages.SearchInputPlaceholder,\n              )}\n            />\n          ) : this.props.mode === 'image' ? (\n            <h2>\n              <FormattedMessage\n                id=\"Choose Image\"\n                defaultMessage=\"Choose Image\"\n              />\n            </h2>\n          ) : (\n            <h2>\n              <FormattedMessage\n                id=\"Choose Target\"\n                defaultMessage=\"Choose Target\"\n              />\n            </h2>\n          )}\n\n          <button onClick={this.toggleSearchInput}>\n            <Icon name={searchSVG} size=\"24px\" />\n          </button>\n          <button className=\"clearSVG\" onClick={this.props.closeObjectBrowser}>\n            <Icon name={clearSVG} size=\"24px\" />\n          </button>\n        </header>\n        <Segment secondary>{this.state.currentFolder}</Segment>\n        {this.props.mode === 'multiple' && (\n          <Segment className=\"infos\">\n            {this.props.intl.formatMessage(messages.SelectedItems)}:{' '}\n            {this.props.data?.length}\n            {this.props.maximumSelectionSize && (\n              <>\n                {' '}\n                {this.props.intl.formatMessage(messages.of)}{' '}\n                {this.props.maximumSelectionSize}\n              </>\n            )}\n          </Segment>\n        )}\n        <ObjectBrowserNav\n          currentSearchResults={\n            this.props.searchSubrequests[\n              `${this.props.block}-${this.props.mode}`\n            ]\n          }\n          selected={\n            this.props.mode === 'multiple'\n              ? this.props.data\n              : [\n                  {\n                    '@id':\n                      this.props.mode === 'image'\n                        ? this.state.selectedImage\n                        : this.state.selectedHref,\n                  },\n                ]\n          }\n          handleClickOnItem={this.handleClickOnItem}\n          handleDoubleClickOnItem={this.handleDoubleClickOnItem}\n          mode={this.props.mode}\n          navigateTo={this.navigateTo}\n          isSelectable={this.isSelectable}\n        />\n      </Segment.Group>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      searchSubrequests: state.search.subrequests,\n    }),\n    { searchContent },\n  ),\n)(ObjectBrowserBody);\n","import React from 'react';\nimport { Button, Segment, Popup } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport cx from 'classnames';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { flattenToAppURL, getContentIcon } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\nimport homeSVG from '@plone/volto/icons/home.svg';\n\nconst messages = defineMessages({\n  browse: {\n    id: 'Browse',\n    defaultMessage: 'Browse',\n  },\n  select: {\n    id: 'Select',\n    defaultMessage: 'Select',\n  },\n});\n\nconst ObjectBrowserNav = ({\n  currentSearchResults,\n  selected,\n  handleClickOnItem,\n  handleDoubleClickOnItem,\n  mode,\n  navigateTo,\n  isSelectable,\n}) => {\n  const intl = useIntl();\n  const isSelected = (item) => {\n    let ret = false;\n    if (selected) {\n      selected\n        .filter((item) => item != null)\n        .forEach((_item) => {\n          if (flattenToAppURL(_item['@id']) === flattenToAppURL(item['@id'])) {\n            ret = true;\n          }\n        });\n    }\n    return ret;\n  };\n\n  return (\n    <Segment as=\"ul\" className=\"object-listing\">\n      {currentSearchResults &&\n        currentSearchResults.items.map((item) => (\n          <li\n            role=\"presentation\"\n            aria-label={\n              item.is_folderish && mode === 'image'\n                ? `${intl.formatMessage(messages.browse)} ${item.id}`\n                : `${intl.formatMessage(messages.select)} ${item.id}`\n            }\n            key={item.id}\n            className={cx('', {\n              'selected-item': isSelected(item),\n\n              disabled:\n                mode === 'image'\n                  ? !config.settings.imageObjects.includes(item['@type']) &&\n                    !item.is_folderish\n                  : !isSelectable(item),\n            })}\n            onClick={() => handleClickOnItem(item)}\n            onDoubleClick={() => handleDoubleClickOnItem(item)}\n          >\n            <span title={`${item['@id']} (${item['@type']})`}>\n              <Popup\n                key={item['@id']}\n                content={\n                  <>\n                    <Icon name={homeSVG} size=\"18px\" />{' '}\n                    {flattenToAppURL(item['@id'])} ( {item['@type']})\n                  </>\n                }\n                trigger={\n                  <span>\n                    <Icon\n                      name={getContentIcon(item['@type'], item.is_folderish)}\n                      size=\"24px\"\n                    />\n                  </span>\n                }\n              />\n\n              {item.title}\n            </span>\n            {item.is_folderish && mode === 'image' && (\n              <Icon name={rightArrowSVG} size=\"24px\" />\n            )}\n            {item.is_folderish && (mode === 'link' || mode === 'multiple') && (\n              <Button.Group>\n                <Button\n                  basic\n                  icon\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    navigateTo(item['@id']);\n                  }}\n                  aria-label={`${intl.formatMessage(messages.browse)} ${\n                    item.id\n                  }`}\n                >\n                  <Icon name={rightArrowSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n            )}\n          </li>\n        ))}\n    </Segment>\n  );\n};\n\nexport default ObjectBrowserNav;\n","/**\n * Sidebar component.\n * @module components/manage/Sidebar/Sidebar\n */\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Tab } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport cookie from 'react-cookie';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { BodyClass } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport forbiddenSVG from '@plone/volto/icons/forbidden.svg';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport expandSVG from '@plone/volto/icons/left-key.svg';\nimport collapseSVG from '@plone/volto/icons/right-key.svg';\n\nconst messages = defineMessages({\n  document: {\n    id: 'Document',\n    defaultMessage: 'Document',\n  },\n  block: {\n    id: 'Block',\n    defaultMessage: 'Block',\n  },\n  settings: {\n    id: 'Settings',\n    defaultMessage: 'Settings',\n  },\n  shrinkSidebar: {\n    id: 'Shrink sidebar',\n    defaultMessage: 'Shrink sidebar',\n  },\n  expandSidebar: {\n    id: 'Expand sidebar',\n    defaultMessage: 'Expand sidebar',\n  },\n});\n\n/**\n * Sidebar container class.\n * @class Sidebar\n * @extends Component\n */\nclass Sidebar extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    documentTab: PropTypes.bool,\n    blockTab: PropTypes.bool,\n    settingsTab: PropTypes.bool,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    documentTab: true,\n    blockTab: true,\n    settingsTab: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sidebar\n   */\n  constructor(props) {\n    super(props);\n    this.onToggleExpanded = this.onToggleExpanded.bind(this);\n    this.onToggleFullSize = this.onToggleFullSize.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.state = {\n      expanded: cookie.load('sidebar_expanded') !== 'false',\n      size: 0,\n      showFull: true,\n      showFullToolbarExpanded: true,\n    };\n  }\n\n  /**\n   * On toggle expanded handler\n   * also reset sidebar since this has mimized it\n   * @method onToggleExpanded\n   * @returns {undefined}\n   */\n  onToggleExpanded() {\n    cookie.save('sidebar_expanded', !this.state.expanded, {\n      expires: new Date((2 ** 31 - 1) * 1000),\n      path: '/',\n    });\n    this.setState({\n      expanded: !this.state.expanded,\n    });\n    this.resetFullSizeSidebar();\n  }\n\n  /**\n   * Remove fullsize classes\n   * Reset state\n   */\n  resetFullSizeSidebar() {\n    if (!this.state.expanded) {\n      const currentResizer = document.querySelector('#sidebar');\n      const sidebarContainer = currentResizer.getElementsByClassName(\n        'sidebar-container',\n      )[0];\n      sidebarContainer.classList.remove('full-size');\n      sidebarContainer.classList.remove('no-toolbar');\n\n      this.setState({\n        showFull: true,\n      });\n    }\n  }\n\n  /**\n   * Set width of sibar to 100% minus the width of the toolbar or reset to\n   * initial size, by adding css classes\n   */\n  onToggleFullSize() {\n    const currentResizer = document.querySelector('#sidebar');\n    const sidebarContainer = currentResizer.getElementsByClassName(\n      'sidebar-container',\n    )[0];\n\n    if (this.state.showFull) {\n      sidebarContainer.classList.add('full-size');\n      if (!this.props.toolbarExpanded) {\n        sidebarContainer.classList.add('no-toolbar');\n      } else {\n        sidebarContainer.classList.remove('no-toolbar');\n      }\n    } else {\n      sidebarContainer.classList.remove('full-size');\n      sidebarContainer.classList.remove('no-toolbar');\n    }\n\n    this.setState((prevState) => ({\n      showFull: !prevState.showFull,\n    }));\n  }\n\n  /**\n   * On tab change\n   * @method onTabChange\n   * @param {Object} event Event object\n   * @param {Object} data Data object\n   * @returns {undefined}\n   */\n  onTabChange(event, data) {\n    this.props.setSidebarTab(data.activeIndex);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { expanded } = this.state;\n\n    return (\n      <Fragment>\n        <BodyClass\n          className={expanded ? 'has-sidebar' : 'has-sidebar-collapsed'}\n        />\n        <div\n          className={cx('sidebar-container', { collapsed: !expanded })}\n          style={this.state.size > 0 ? { width: this.state.size } : null}\n        >\n          <Button\n            aria-label={\n              expanded\n                ? this.props.intl.formatMessage(messages.shrinkSidebar)\n                : this.props.intl.formatMessage(messages.expandSidebar)\n            }\n            className={\n              this.props.content && this.props.content.review_state\n                ? `${this.props.content.review_state} trigger`\n                : 'trigger'\n            }\n            onClick={this.onToggleExpanded}\n          />\n          <Button\n            className=\"full-size-sidenav-btn\"\n            onClick={this.onToggleFullSize}\n            aria-label=\"full-screen-sidenav\"\n          >\n            <Icon\n              className=\"full-size-icon\"\n              name={this.state.showFull ? expandSVG : collapseSVG}\n            />\n          </Button>\n          <Tab\n            menu={{\n              secondary: true,\n              pointing: true,\n              attached: true,\n              tabular: true,\n              className: 'formtabs',\n            }}\n            className=\"tabs-wrapper\"\n            renderActiveOnly={false}\n            activeIndex={this.props.tab}\n            onTabChange={this.onTabChange}\n            panes={[\n              !!this.props.documentTab && {\n                menuItem: this.props.intl.formatMessage(messages.document),\n                pane: (\n                  <Tab.Pane\n                    key=\"metadata\"\n                    className=\"tab-wrapper\"\n                    id=\"sidebar-metadata\"\n                  />\n                ),\n              },\n              !!this.props.blockTab && {\n                menuItem: this.props.intl.formatMessage(messages.block),\n                pane: (\n                  <Tab.Pane\n                    key=\"properties\"\n                    className=\"tab-wrapper\"\n                    id=\"sidebar-properties\"\n                  >\n                    <Icon\n                      className=\"tab-forbidden\"\n                      name={forbiddenSVG}\n                      size=\"48px\"\n                    />\n                  </Tab.Pane>\n                ),\n              },\n              !!this.props.settingsTab && {\n                menuItem: this.props.intl.formatMessage(messages.settings),\n                pane: (\n                  <Tab.Pane\n                    key=\"settings\"\n                    className=\"tab-wrapper\"\n                    id=\"sidebar-settings\"\n                  >\n                    <Icon\n                      className=\"tab-forbidden\"\n                      name={forbiddenSVG}\n                      size=\"48px\"\n                    />\n                  </Tab.Pane>\n                ),\n              },\n            ].filter((tab) => tab)}\n          />\n        </div>\n        <div className={this.state.expanded ? 'pusher expanded' : 'pusher'} />\n      </Fragment>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      tab: state.sidebar.tab,\n      toolbarExpanded: state.toolbar.expanded,\n    }),\n    { setSidebarTab },\n  ),\n)(Sidebar);\n","import React from 'react';\nimport { Portal } from 'react-portal';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\n\nconst DEFAULT_TIMEOUT = 500;\n\nconst SidebarPopup = (props) => {\n  const { children, open, onClose, overlay } = props;\n\n  const asideElement = React.createRef();\n\n  const handleClickOutside = (e) => {\n    if (asideElement && doesNodeContainClick(asideElement.current, e)) return;\n    onClose();\n  };\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside, false);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside, false);\n    };\n  });\n\n  return (\n    <>\n      {overlay && (\n        <CSSTransition\n          in={open}\n          timeout={DEFAULT_TIMEOUT}\n          classNames=\"overlay-container\"\n          unmountOnExit\n        >\n          <Portal node={document?.body}>\n            <div className=\"overlay-container\"></div>\n          </Portal>\n        </CSSTransition>\n      )}\n      <CSSTransition\n        in={open}\n        timeout={DEFAULT_TIMEOUT}\n        classNames=\"sidebar-container\"\n        unmountOnExit\n      >\n        <Portal>\n          <aside\n            role=\"presentation\"\n            onClick={(e) => {\n              e.stopPropagation();\n            }}\n            onKeyDown={(e) => {\n              e.stopPropagation();\n            }}\n            ref={asideElement}\n            key=\"sidebarpopup\"\n            className=\"sidebar-container\"\n            style={{ overflowY: 'auto' }}\n          >\n            {children}\n          </aside>\n        </Portal>\n      </CSSTransition>\n    </>\n  );\n};\n\nSidebarPopup.propTypes = {\n  open: PropTypes.bool,\n  onClose: PropTypes.func,\n  overlay: PropTypes.bool,\n};\n\nSidebarPopup.defaultProps = {\n  open: false,\n  onClose: () => {},\n  overlay: false,\n};\n\nexport default SidebarPopup;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Portal } from 'react-portal';\n\n/**\n * Portal that wraps Sidebar components\n * @param {Array} children Sidebar content\n * @param {bool} selected Sidebar needs to know when the related block is selected\n * @param {string} tab Element id where to insert sidebar content, default: sidebar-properties\n * @returns {string} Rendered sidebar\n */\nconst SidebarPortal = ({ children, selected, tab = 'sidebar-properties' }) => {\n  const [isClient, setIsClient] = React.useState(null);\n\n  React.useEffect(() => setIsClient(true), []);\n\n  return (\n    <>\n      {selected && (\n        <Portal node={isClient && document.getElementById(tab)}>\n          <div role=\"form\" style={{ height: '100%' }}>\n            <div\n              style={{ height: '100%' }}\n              role=\"presentation\"\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n              onKeyDown={(e) => {\n                e.stopPropagation();\n              }}\n            >\n              {children}\n            </div>\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n};\n\nSidebarPortal.propTypes = {\n  children: PropTypes.any,\n  selected: PropTypes.bool.isRequired,\n};\n\nexport default SidebarPortal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@plone/volto/components';\n\nimport successSVG from '@plone/volto/icons/ready.svg';\nimport infoSVG from '@plone/volto/icons/info.svg';\nimport errorSVG from '@plone/volto/icons/error.svg';\nimport warningSVG from '@plone/volto/icons/warning.svg';\n\nconst Toast = (props) => {\n  function getIcon(props) {\n    if (props.info) {\n      return infoSVG;\n    } else if (props.success) {\n      return successSVG;\n    } else if (props.error) {\n      return errorSVG;\n    } else if (props.error) {\n      return warningSVG;\n    } else {\n      return successSVG;\n    }\n  }\n\n  const { title, content } = props;\n\n  return (\n    <>\n      <Icon name={getIcon(props)} size=\"18px\" />\n      <div className=\"toast-inner-content\">\n        {title && <h4>{title}</h4>}\n        <p>{content}</p>\n      </div>\n    </>\n  );\n};\n\nToast.propTypes = {\n  title: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n  info: PropTypes.bool,\n  success: PropTypes.bool,\n  error: PropTypes.bool,\n  warning: PropTypes.bool,\n};\n\nexport default Toast;\n","/**\n * More component.\n * @module components/manage/Toolbar/More\n */\n\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { find } from 'lodash';\n\nimport { Icon, Display, Workflow } from '@plone/volto/components';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\nimport userSVG from '@plone/volto/icons/user.svg';\n\nconst messages = defineMessages({\n  personalTools: {\n    id: 'Personal tools',\n    defaultMessage: 'Personal tools',\n  },\n  history: {\n    id: 'History',\n    defaultMessage: 'History',\n  },\n  sharing: {\n    id: 'Sharing',\n    defaultMessage: 'Sharing',\n  },\n  ManageTranslations: {\n    id: 'Manage Translations',\n    defaultMessage: 'Manage Translations',\n  },\n});\n\n/**\n * More container class.\n * @class More\n * @extends Component\n */\nclass More extends Component {\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    pathname: PropTypes.string.isRequired,\n    content: PropTypes.shape({\n      title: PropTypes.string,\n      '@type': PropTypes.string,\n      is_folderish: PropTypes.bool,\n      review_state: PropTypes.string,\n    }),\n    loadComponent: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    actions: null,\n    content: null,\n  };\n  state = {\n    openManageTranslations: false,\n    pushed: false,\n  };\n\n  push = (selector) => {\n    this.setState(() => ({\n      pushed: true,\n    }));\n    this.props.loadComponent(selector);\n    document.removeEventListener('mousedown', this.handleClickOutside, false);\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const path = getBaseUrl(this.props.pathname);\n    const editAction = find(this.props.actions.object, { id: 'edit' });\n    const historyAction = find(this.props.actions.object, { id: 'history' });\n    const sharingAction = find(this.props.actions.object, {\n      id: 'local_roles',\n    });\n\n    return (\n      <div\n        className=\"menu-more pastanaga-menu\"\n        style={{\n          flex: this.props.theToolbar.current\n            ? `0 0 ${\n                this.props.theToolbar.current.getBoundingClientRect().width\n              }px`\n            : null,\n        }}\n      >\n        <header>\n          <h2>{this.props.content.title}</h2>\n          <button\n            className=\"more-user\"\n            aria-label={this.props.intl.formatMessage(messages.personalTools)}\n            onClick={() => this.push('personalTools')}\n            tabIndex={0}\n          >\n            <Icon name={userSVG} size=\"30px\" />\n          </button>\n        </header>\n        <div className=\"pastanaga-menu-list\">\n          <ul>\n            <li className=\"state-select\">\n              <Workflow pathname={path} />\n            </li>\n            <li className=\"display-select\">\n              {editAction && <Display pathname={path} />}\n            </li>\n            <li>\n              <Link to={`${path}/history`}>\n                <button>\n                  <div>\n                    <span className=\"pastanaga-menu-label\">\n                      {historyAction?.title ||\n                        this.props.intl.formatMessage(messages.history)}\n                    </span>\n                    <span className=\"pastanaga-menu-value\" />\n                  </div>\n                  <Icon name={rightArrowSVG} size=\"24px\" />\n                </button>\n              </Link>\n            </li>\n            {sharingAction && (\n              <li>\n                <Link to={`${path}/sharing`}>\n                  <button>\n                    {this.props.intl.formatMessage(messages.sharing)}\n                    <Icon name={rightArrowSVG} size=\"24px\" />\n                  </button>\n                </Link>\n              </li>\n            )}\n            {editAction && config.settings.isMultilingual && (\n              <>\n                <li>\n                  <Link to={`${path}/manage-translations`}>\n                    <button>\n                      {this.props.intl.formatMessage(\n                        messages.ManageTranslations,\n                      )}\n\n                      <Icon name={rightArrowSVG} size=\"24px\" />\n                    </button>\n                  </Link>\n                </li>\n              </>\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      actions: state.actions.actions,\n      pathname: props.pathname,\n      content: state.content.data,\n    }),\n    {},\n  ),\n)(More);\n","/**\n * PersonalTools container.\n * @module components/manage/Toolbar/PersonalTools\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';\nimport cx from 'classnames';\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport { getUser } from '@plone/volto/actions';\nimport logoutSVG from '@plone/volto/icons/log-out.svg';\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\n\nimport backSVG from '@plone/volto/icons/back.svg';\nimport cameraSVG from '@plone/volto/icons/camera.svg';\n\nconst messages = defineMessages({\n  preferences: {\n    id: 'Preferences',\n    defaultMessage: 'Preferences',\n  },\n  profile: {\n    id: 'Profile',\n    defaultMessage: 'Profile',\n  },\n  userAvatar: {\n    id: 'user avatar',\n    defaultMessage: 'user avatar',\n  },\n});\n\n/**\n * Toolbar container class.\n * @class PersonalTools\n * @extends Component\n */\nclass PersonalTools extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    user: PropTypes.shape({\n      fullname: PropTypes.string,\n      email: PropTypes.string,\n      home_page: PropTypes.string,\n      location: PropTypes.string,\n    }).isRequired,\n    userId: PropTypes.string.isRequired,\n    getUser: PropTypes.func.isRequired,\n    loadComponent: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getUser(this.props.userId);\n  }\n\n  push = (selector) => {\n    this.setState(() => ({\n      pushed: true,\n    }));\n    this.props.loadComponent(selector);\n  };\n\n  pull = () => {\n    this.props.unloadComponent();\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div\n        className={cx('personal-tools pastanaga-menu', {\n          'has-inner-actions': this.props.hasActions,\n        })}\n        style={{\n          flex: this.props.theToolbar.current\n            ? `0 0 ${\n                this.props.theToolbar.current.getBoundingClientRect().width\n              }px`\n            : null,\n        }}\n      >\n        <header className=\"header\">\n          <button className=\"back\" onClick={this.pull}>\n            <Icon name={backSVG} size=\"30px\" />\n          </button>\n          <div className=\"vertical divider\" />\n          <h2>\n            {this.props.user.fullname\n              ? this.props.user.fullname\n              : this.props.user.username}\n          </h2>\n          <Link id=\"toolbar-logout\" to=\"/logout\">\n            <Icon className=\"logout\" name={logoutSVG} size=\"30px\" />\n          </Link>\n        </header>\n        <div className={cx('avatar', { default: !this.props.user.portrait })}>\n          {this.props.user.portrait ? (\n            <img\n              src={this.props.user.portrait}\n              alt={this.props.intl.formatMessage(messages.userAvatar)}\n            />\n          ) : (\n            <Icon name={cameraSVG} size=\"96px\" />\n          )}\n        </div>\n        {/* <Stats /> Maybe we can find a good fit in the future for this visual element */}\n        <div className=\"pastanaga-menu-list\">\n          {/* This (probably also) should be a Component by itself*/}\n          <ul>\n            <li>\n              <button\n                aria-label={this.props.intl.formatMessage(messages.profile)}\n                onClick={() => this.push('profile')}\n              >\n                <FormattedMessage id=\"Profile\" defaultMessage=\"Profile\" />\n                <Icon name={rightArrowSVG} size=\"24px\" />\n              </button>\n            </li>\n            <li>\n              <button\n                aria-label={this.props.intl.formatMessage(messages.preferences)}\n                onClick={() => this.push('preferences')}\n              >\n                <FormattedMessage\n                  id=\"Preferences\"\n                  defaultMessage=\"Preferences\"\n                />\n                <Icon name={rightArrowSVG} size=\"24px\" />\n              </button>\n            </li>\n            <li>\n              <Link to=\"/controlpanel\">\n                <FormattedMessage id=\"Site Setup\" defaultMessage=\"Site Setup\" />\n                <Icon name={rightArrowSVG} size=\"24px\" />\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(\n  connect(\n    (state) => ({\n      user: state.users.user,\n      userId: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n    }),\n    { getUser },\n  )(PersonalTools),\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Icon } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst StandardWrapper = (props) => {\n  function pull() {\n    props.unloadComponent();\n  }\n\n  return (\n    <div\n      className={cx(`${props.componentName} pastanaga-menu`, {\n        'has-inner-actions': props.hasActions,\n      })}\n      style={{\n        flex: props.theToolbar.current\n          ? `0 0 ${props.theToolbar.current.getBoundingClientRect().width}px`\n          : null,\n      }}\n    >\n      <header className=\"header pulled\">\n        <button onClick={pull}>\n          <Icon name={backSVG} size=\"30px\" />\n        </button>\n        <div className=\"vertical divider\" />\n        <h2>{props.componentTitle || props.componentName}</h2>\n      </header>\n      {props.children}\n    </div>\n  );\n};\n\nStandardWrapper.propTypes = {\n  componentName: PropTypes.string.isRequired,\n  componentTitle: PropTypes.string,\n  unloadComponent: PropTypes.func.isRequired,\n  loadComponent: PropTypes.func.isRequired,\n  closeMenu: PropTypes.func.isRequired,\n  hasActions: PropTypes.bool,\n};\n\nexport default StandardWrapper;\n","/**\n * Toolbar component.\n * @module components/manage/Toolbar/Toolbar\n */\n\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport cookie from 'react-cookie';\nimport { filter, find } from 'lodash';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\n\nimport More from '@plone/volto/components/manage/Toolbar/More';\nimport PersonalTools from '@plone/volto/components/manage/Toolbar/PersonalTools';\nimport Types from '@plone/volto/components/manage/Toolbar/Types';\nimport PersonalInformation from '@plone/volto/components/manage/Preferences/PersonalInformation';\nimport PersonalPreferences from '@plone/volto/components/manage/Preferences/PersonalPreferences';\nimport StandardWrapper from '@plone/volto/components/manage/Toolbar/StandardWrapper';\nimport {\n  getTypes,\n  listActions,\n  setExpandedToolbar,\n} from '@plone/volto/actions';\nimport { Icon } from '@plone/volto/components';\nimport { BodyClass, getBaseUrl } from '@plone/volto/helpers';\n\nimport pastanagaSmall from '@plone/volto/components/manage/Toolbar/pastanaga-small.svg';\nimport pastanagalogo from '@plone/volto/components/manage/Toolbar/pastanaga.svg';\nimport penSVG from '@plone/volto/icons/pen.svg';\nimport folderSVG from '@plone/volto/icons/folder.svg';\nimport addSVG from '@plone/volto/icons/add-document.svg';\nimport moreSVG from '@plone/volto/icons/more.svg';\nimport userSVG from '@plone/volto/icons/user.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  edit: {\n    id: 'Edit',\n    defaultMessage: 'Edit',\n  },\n  contents: {\n    id: 'Contents',\n    defaultMessage: 'Contents',\n  },\n  add: {\n    id: 'Add',\n    defaultMessage: 'Add',\n  },\n  more: {\n    id: 'More',\n    defaultMessage: 'More',\n  },\n  personalTools: {\n    id: 'Personal tools',\n    defaultMessage: 'Personal tools',\n  },\n  shrinkToolbar: {\n    id: 'Shrink toolbar',\n    defaultMessage: 'Shrink toolbar',\n  },\n  personalInformation: {\n    id: 'Personal Information',\n    defaultMessage: 'Personal Information',\n  },\n  personalPreferences: {\n    id: 'Personal Preferences',\n    defaultMessage: 'Personal Preferences',\n  },\n  collection: {\n    id: 'Collection',\n    defaultMessage: 'Collection',\n  },\n  file: {\n    id: 'File',\n    defaultMessage: 'File',\n  },\n  link: {\n    id: 'Link',\n    defaultMessage: 'Link',\n  },\n  newsItem: {\n    id: 'News Item',\n    defaultMessage: 'News Item',\n  },\n  page: {\n    id: 'Page',\n    defaultMessage: 'Page',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\nconst toolbarComponents = {\n  personalTools: { component: PersonalTools, wrapper: null },\n  more: { component: More, wrapper: null },\n  types: { component: Types, wrapper: null, contentAsProps: true },\n  profile: {\n    component: PersonalInformation,\n    wrapper: StandardWrapper,\n    wrapperTitle: messages.personalInformation,\n    hideToolbarBody: true,\n  },\n  preferences: {\n    component: PersonalPreferences,\n    wrapper: StandardWrapper,\n    wrapperTitle: messages.personalPreferences,\n    hideToolbarBody: true,\n  },\n};\n\n/**\n * Toolbar container class.\n * @class Toolbar\n * @extends Component\n */\nclass Toolbar extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    token: PropTypes.string,\n    pathname: PropTypes.string.isRequired,\n    content: PropTypes.shape({\n      '@type': PropTypes.string,\n      is_folderish: PropTypes.bool,\n      review_state: PropTypes.string,\n    }),\n    getTypes: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        addable: PropTypes.bool,\n        title: PropTypes.string,\n      }),\n    ),\n    listActions: PropTypes.func.isRequired,\n    inner: PropTypes.element.isRequired,\n    hideDefaultViewButtons: PropTypes.bool,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    actions: null,\n    token: null,\n    content: null,\n    hideDefaultViewButtons: false,\n    types: [],\n  };\n\n  state = {\n    expanded: cookie.load('toolbar_expanded') !== 'false',\n    showMenu: false,\n    menuStyle: {},\n    menuComponents: [],\n    loadedComponents: [],\n    hideToolbarBody: false,\n  };\n\n  toolbarWindow = React.createRef();\n\n  /**\n   * Component will mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.listActions(getBaseUrl(this.props.pathname));\n    this.props.getTypes(getBaseUrl(this.props.pathname));\n    this.props.setExpandedToolbar(this.state.expanded);\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.listActions(getBaseUrl(nextProps.pathname));\n      this.props.getTypes(getBaseUrl(nextProps.pathname));\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillUnmount\n   * @returns {undefined}\n   */\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  handleShrink = () => {\n    cookie.save('toolbar_expanded', !this.state.expanded, {\n      expires: new Date((2 ** 31 - 1) * 1000),\n      path: '/',\n    });\n    this.setState(\n      (state) => ({ expanded: !state.expanded }),\n      () => this.props.setExpandedToolbar(this.state.expanded),\n    );\n  };\n\n  closeMenu = () =>\n    this.setState(() => ({ showMenu: false, loadedComponents: [] }));\n\n  loadComponent = (type) => {\n    const { loadedComponents } = this.state;\n    if (!this.state.loadedComponents.includes(type)) {\n      this.setState({\n        loadedComponents: [...loadedComponents, type],\n        hideToolbarBody: toolbarComponents[type].hideToolbarBody || false,\n      });\n    }\n  };\n\n  unloadComponent = () => {\n    this.setState((state) => ({\n      loadedComponents: state.loadedComponents.slice(0, -1),\n      hideToolbarBody:\n        toolbarComponents[\n          state.loadedComponents[state.loadedComponents.length - 2]\n        ].hideToolbarBody || false,\n    }));\n  };\n\n  toggleMenu = (e, selector) => {\n    if (this.state.showMenu) {\n      this.closeMenu();\n      return;\n    }\n    // PersonalTools always shows at bottom\n    if (selector === 'personalTools') {\n      this.setState((state) => ({\n        showMenu: !state.showMenu,\n        menuStyle: { bottom: 0 },\n      }));\n    } else {\n      this.setState((state) => ({\n        showMenu: !state.showMenu,\n        menuStyle: { top: 0, overflow: 'initial' },\n      }));\n    }\n    this.loadComponent(selector);\n  };\n\n  handleClickOutside = (e) => {\n    if (this.pusher && doesNodeContainClick(this.pusher, e)) return;\n    this.closeMenu();\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const path = getBaseUrl(this.props.pathname);\n    const editAction = find(this.props.actions.object, { id: 'edit' });\n    const folderContentsAction = find(this.props.actions.object, {\n      id: 'folderContents',\n    });\n    const { expanded } = this.state;\n\n    return (\n      this.props.token && (\n        <>\n          <BodyClass\n            className={expanded ? 'has-toolbar' : 'has-toolbar-collapsed'}\n          />\n          <div\n            style={this.state.menuStyle}\n            className={\n              this.state.showMenu ? 'toolbar-content show' : 'toolbar-content'\n            }\n            ref={this.toolbarWindow}\n          >\n            {this.state.showMenu && (\n              // This sets the scroll locker in the body tag in mobile\n              <BodyClass className=\"has-toolbar-menu-open\" />\n            )}\n            <div\n              className=\"pusher-puller\"\n              ref={(node) => (this.pusher = node)}\n              style={{\n                transform: this.toolbarWindow.current\n                  ? `translateX(-${\n                      (this.state.loadedComponents.length - 1) *\n                      this.toolbarWindow.current.getBoundingClientRect().width\n                    }px)`\n                  : null,\n              }}\n            >\n              {this.state.loadedComponents.map((component, index) =>\n                (() => {\n                  const ToolbarComponent =\n                    toolbarComponents[component].component;\n                  const WrapperComponent = toolbarComponents[component].wrapper;\n                  const haveActions =\n                    toolbarComponents[component].hideToolbarBody;\n                  const title =\n                    toolbarComponents[component].wrapperTitle &&\n                    this.props.intl.formatMessage(\n                      toolbarComponents[component].wrapperTitle,\n                    );\n                  if (WrapperComponent) {\n                    return (\n                      <WrapperComponent\n                        componentName={component}\n                        componentTitle={title}\n                        pathname={this.props.pathname}\n                        loadComponent={this.loadComponent}\n                        unloadComponent={this.unloadComponent}\n                        componentIndex={index}\n                        theToolbar={this.toolbarWindow}\n                        key={`personalToolsComponent-${index}`}\n                        closeMenu={this.closeMenu}\n                        hasActions={haveActions}\n                      >\n                        <ToolbarComponent\n                          pathname={this.props.pathname}\n                          loadComponent={this.loadComponent}\n                          unloadComponent={this.unloadComponent}\n                          componentIndex={index}\n                          theToolbar={this.toolbarWindow}\n                          closeMenu={this.closeMenu}\n                          isToolbarEmbedded\n                        />\n                      </WrapperComponent>\n                    );\n                  } else {\n                    return (\n                      <ToolbarComponent\n                        pathname={this.props.pathname}\n                        loadComponent={this.loadComponent}\n                        unloadComponent={this.unloadComponent}\n                        componentIndex={index}\n                        theToolbar={this.toolbarWindow}\n                        key={`personalToolsComponent-${index}`}\n                        closeMenu={this.closeMenu}\n                        content={\n                          toolbarComponents[component].contentAsProps\n                            ? this.props.content\n                            : null\n                        }\n                      />\n                    );\n                  }\n                })(),\n              )}\n            </div>\n          </div>\n          <div className={this.state.expanded ? 'toolbar expanded' : 'toolbar'}>\n            <div className=\"toolbar-body\">\n              <div className=\"toolbar-actions\">\n                {this.props.hideDefaultViewButtons && this.props.inner && (\n                  <>{this.props.inner}</>\n                )}\n                {!this.props.hideDefaultViewButtons && (\n                  <>\n                    {editAction && (\n                      <Link\n                        aria-label={this.props.intl.formatMessage(\n                          messages.edit,\n                        )}\n                        className=\"edit\"\n                        to={`${path}/edit`}\n                      >\n                        <Icon name={penSVG} size=\"30px\" className=\"circled\" />\n                      </Link>\n                    )}\n                    {this.props.content &&\n                      this.props.content.is_folderish &&\n                      folderContentsAction &&\n                      !this.props.pathname.endsWith('/contents') && (\n                        <Link\n                          aria-label={this.props.intl.formatMessage(\n                            messages.contents,\n                          )}\n                          to={`${path}/contents`}\n                        >\n                          <Icon name={folderSVG} size=\"30px\" />\n                        </Link>\n                      )}\n                    {this.props.content &&\n                      this.props.content.is_folderish &&\n                      folderContentsAction &&\n                      this.props.pathname.endsWith('/contents') && (\n                        <Link\n                          to={`${path}`}\n                          aria-label={this.props.intl.formatMessage(\n                            messages.back,\n                          )}\n                        >\n                          <Icon\n                            name={clearSVG}\n                            className=\"contents circled\"\n                            size=\"30px\"\n                            title={this.props.intl.formatMessage(messages.back)}\n                          />\n                        </Link>\n                      )}\n                    {this.props.content &&\n                      ((this.props.content.is_folderish &&\n                        this.props.types.length > 0) ||\n                        (config.settings.isMultilingual &&\n                          this.props.content['@components'].translations)) && (\n                        <button\n                          className=\"add\"\n                          aria-label={this.props.intl.formatMessage(\n                            messages.add,\n                          )}\n                          onClick={(e) => this.toggleMenu(e, 'types')}\n                          tabIndex={0}\n                          id=\"toolbar-add\"\n                        >\n                          <Icon name={addSVG} size=\"30px\" />\n                        </button>\n                      )}\n                    <div className=\"toolbar-button-spacer\" />\n                    <button\n                      className=\"more\"\n                      aria-label={this.props.intl.formatMessage(messages.more)}\n                      onClick={(e) => this.toggleMenu(e, 'more')}\n                      tabIndex={0}\n                      id=\"toolbar-more\"\n                    >\n                      <Icon\n                        className=\"mobile hidden\"\n                        name={moreSVG}\n                        size=\"30px\"\n                      />\n                      {this.state.showMenu ? (\n                        <Icon\n                          className=\"mobile only\"\n                          name={clearSVG}\n                          size=\"30px\"\n                        />\n                      ) : (\n                        <Icon\n                          className=\"mobile only\"\n                          name={moreSVG}\n                          size=\"30px\"\n                        />\n                      )}\n                    </button>\n                  </>\n                )}\n              </div>\n              <div className=\"toolbar-bottom\">\n                <img className=\"minipastanaga\" src={pastanagaSmall} alt=\"\" />\n                {!this.props.hideDefaultViewButtons && (\n                  <button\n                    className=\"user\"\n                    aria-label={this.props.intl.formatMessage(\n                      messages.personalTools,\n                    )}\n                    onClick={(e) => this.toggleMenu(e, 'personalTools')}\n                    tabIndex={0}\n                    id=\"toolbar-personal\"\n                  >\n                    <Icon name={userSVG} size=\"30px\" />\n                  </button>\n                )}\n                <div className=\"divider\" />\n                <div className=\"pastanagalogo\">\n                  <img src={pastanagalogo} alt=\"\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"toolbar-handler\">\n              <button\n                aria-label={this.props.intl.formatMessage(\n                  messages.shrinkToolbar,\n                )}\n                className={cx({\n                  [this.props.content?.review_state]: this.props.content\n                    ?.review_state,\n                })}\n                onClick={this.handleShrink}\n              />\n            </div>\n          </div>\n          <div className=\"pusher\" />\n        </>\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      actions: state.actions.actions,\n      token: state.userSession.token,\n      content: state.content.data,\n      pathname: props.pathname,\n      types: filter(state.types.types, 'addable'),\n    }),\n    { getTypes, listActions, setExpandedToolbar },\n  ),\n)(Toolbar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { filter, find, isEmpty, map } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst Types = ({ types, pathname, content, currentLanguage }) => {\n  const { settings } = config;\n  return types.length > 0 ||\n    (settings.isMultilingual && content['@components'].translations) ? (\n    <div className=\"menu-more pastanaga-menu\">\n      {types.length > 0 && (\n        <>\n          <header>\n            <FormattedMessage id=\"Add Content\" defaultMessage=\"Add Content…\" />\n          </header>\n          <div className=\"pastanaga-menu-list\">\n            <ul>\n              {map(filter(types), (item) => {\n                // Strip the type for the item we want to add\n                const contentTypeToAdd = item['@id'].split('@types/')[1];\n                // If we are in the root or in /contents, we need to strip the preceeding / and /contents\n                const currentPath = pathname\n                  .replace(/\\/contents$/, '')\n                  .replace(/\\/$/, '');\n                // Finally build the route URL\n                const addContentTypeRoute = `${currentPath}/add?type=${contentTypeToAdd}`;\n                return (\n                  <li key={item['@id']}>\n                    <Link\n                      to={addContentTypeRoute}\n                      id={`toolbar-add-${item['@id']\n                        .split('@types/')[1]\n                        .toLowerCase()\n                        .replace(' ', '-')}`}\n                      className=\"item\"\n                      key={item.title}\n                    >\n                      <FormattedMessage id={item.title} />\n                    </Link>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </>\n      )}\n      {settings.isMultilingual &&\n        content['@components'].translations &&\n        (() => {\n          const translationsLeft = filter(\n            settings.supportedLanguages,\n            (lang) =>\n              !Boolean(\n                content['@components'].translations &&\n                  find(content['@components'].translations.items, {\n                    language: lang,\n                  }),\n              ) && currentLanguage !== lang,\n          );\n\n          return (\n            !isEmpty(translationsLeft) && (\n              <>\n                <header>\n                  <FormattedMessage\n                    id=\"Add Translation…\"\n                    defaultMessage=\"Add Translation…\"\n                  />\n                </header>\n                <div className=\"pastanaga-menu-list\">\n                  <ul>\n                    {map(translationsLeft, (lang) => (\n                      <li>\n                        <Link\n                          to={{\n                            pathname: `${pathname}/create-translation`,\n                            state: {\n                              type: content['@type'],\n                              translationOf: flattenToAppURL(content['@id']),\n                              language: lang,\n                            },\n                          }}\n                          className=\"item\"\n                        >\n                          <FormattedMessage\n                            id=\"Translate to {lang}\"\n                            defaultMessage=\"Translate to {lang}\"\n                            values={{\n                              lang,\n                            }}\n                          />\n                        </Link>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </>\n            )\n          );\n        })()}\n    </div>\n  ) : (\n    <span />\n  );\n};\n\nTypes.propTypes = {\n  pathname: PropTypes.string.isRequired,\n  types: PropTypes.arrayOf(\n    PropTypes.shape({\n      '@id': PropTypes.string,\n      addable: PropTypes.bool,\n      title: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default connect(\n  (state) => ({\n    types: filter(state.types.types, 'addable'),\n    currentLanguage: state.intl.locale,\n  }),\n  {},\n)(Types);\n","module.exports = __webpack_public_path__ + \"static/media/pastanaga-small.7bb0d7b7.svg\";","module.exports = __webpack_public_path__ + \"static/media/pastanaga.08f24832.svg\";","/*\n * UniversalLink\n * @module components/UniversalLink\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { flattenToAppURL, isInternalURL } from '@plone/volto/helpers/Url/Url';\nimport URLUtils from '@plone/volto/components/manage/AnchorPlugin/utils/URLUtils';\n\nconst UniversalLink = ({\n  href,\n  item,\n  openLinkInNewTab,\n  download = false,\n  children,\n  className = null,\n  title = null,\n  ...props\n}) => {\n  const token = useSelector((state) => state.userSession?.token);\n\n  let url = href;\n  if (!href) {\n    url = flattenToAppURL(item['@id']);\n    if (!token && item.remoteUrl) {\n      url = item.remoteUrl;\n    }\n  }\n\n  const isExternal = !isInternalURL(url);\n  const isDownload = (!isExternal && url.includes('@@download')) || download;\n\n  return isExternal ? (\n    <a\n      href={url}\n      title={title}\n      target={\n        !URLUtils.isMail(url) && !(openLinkInNewTab === false) ? '_blank' : null\n      }\n      rel=\"noopener noreferrer\"\n      className={className}\n      {...props}\n    >\n      {children}\n    </a>\n  ) : isDownload ? (\n    <a\n      href={flattenToAppURL(url)}\n      download\n      title={title}\n      className={className}\n      {...props}\n    >\n      {children}\n    </a>\n  ) : (\n    <Link\n      to={flattenToAppURL(url)}\n      target={openLinkInNewTab ?? false ? '_blank' : null}\n      title={title}\n      className={className}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n\nUniversalLink.propTypes = {\n  href: PropTypes.string,\n  openLinkInNewTab: PropTypes.bool,\n  download: PropTypes.bool,\n  className: PropTypes.string,\n  title: PropTypes.string,\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    remoteUrl: PropTypes.string, //of plone @type 'Link'\n  }),\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n};\n\nexport default UniversalLink;\n","/**\n * AlignWidget component.\n * To benefit from styling integration, use with a field named 'align'\n * @module components/manage/Widgets/AlignWidget\n */\n\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\n\nconst AlignWidget = (props) => {\n  const { id, onChange, value } = props;\n  return (\n    <FormFieldWrapper {...props} className=\"align-widget\">\n      <AlignBlock\n        align={value}\n        onChangeBlock={(block, { align }) => onChange(id, align)}\n        data={{ align: value }}\n        block={id}\n      />\n    </FormFieldWrapper>\n  );\n};\n\nexport default injectIntl(AlignWidget);\n","/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { isObject, intersection } from 'lodash';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport loadable from '@loadable/component';\n\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { getVocabulary } from '@plone/volto/actions';\n\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\n\nconst AsyncPaginate = loadable(() => import('react-select-async-paginate'));\nconst CreatableSelect = loadable(() => import('react-select/creatable'));\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\n/**\n * ArrayWidget component class.\n * @class ArrayWidget\n * @extends Component\n */\nclass ArrayWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    loading: PropTypes.bool,\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    ),\n    onChange: PropTypes.func.isRequired,\n    itemsTotal: PropTypes.number,\n    wrapped: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    loading: false,\n    value: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.search = this.search.bind(this);\n    this.loadOptions = this.loadOptions.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.vocabBaseUrl =\n      getVocabFromHint(props) ||\n      getVocabFromField(props) ||\n      getVocabFromItems(props);\n    this.state = {\n      search: '',\n      selectedOption: props.value\n        ? props.value.map((item) =>\n            isObject(item)\n              ? { label: item.title || item.token, value: item.token }\n              : { label: item, value: item },\n          )\n        : [],\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (\n      !this.props.items?.choices &&\n      !this.props.choices &&\n      this.vocabBaseUrl\n    ) {\n      this.props.getVocabulary(this.vocabBaseUrl);\n    }\n  }\n\n  /**\n   * Initiate search with new query\n   * @param {string} query Search query.\n   * @returns {undefined}\n   */\n  search(query) {\n    if (query.length > 1) {\n      this.props.getVocabulary(this.vocabBaseUrl, query);\n    }\n  }\n\n  /**\n   * Initiate search with new query\n   * @method loadOptions\n   * @param {string} search Search query.\n   * @param {string} previousOptions The previous options rendered.\n   * @param {string} additional Additional arguments to pass to the next loadOptions.\n   * @returns {undefined}\n   */\n  loadOptions(search, previousOptions, additional) {\n    let hasMore = this.props.itemsTotal > previousOptions.length;\n    if (hasMore) {\n      const offset = this.state.search !== search ? 0 : additional.offset;\n\n      this.props.getVocabulary(this.vocabBaseUrl, search, offset);\n      this.setState({ search });\n\n      return {\n        options:\n          intersection(previousOptions, this.props.choices).length ===\n          this.props.choices.length\n            ? []\n            : this.props.choices,\n        hasMore: hasMore,\n        additional: {\n          offset: offset === additional.offset ? offset + 25 : offset,\n        },\n      };\n    }\n    return null;\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.setState({ selectedOption });\n\n    this.props.onChange(\n      this.props.id,\n      selectedOption ? selectedOption.map((item) => item.value) : null,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { selectedOption } = this.state;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        {!this.props.items?.choices && this.vocabBaseUrl ? (\n          <AsyncPaginate\n            isDisabled={this.props.isDisabled}\n            className=\"react-select-container\"\n            classNamePrefix=\"react-select\"\n            options={this.props.choices || []}\n            styles={customSelectStyles}\n            theme={selectTheme}\n            components={{ DropdownIndicator, Option }}\n            isMulti\n            value={selectedOption || []}\n            loadOptions={this.loadOptions}\n            onChange={this.handleChange}\n            additional={{\n              offset: 25,\n            }}\n            placeholder={this.props.intl.formatMessage(messages.select)}\n            noOptionsMessage={() =>\n              this.props.intl.formatMessage(messages.no_options)\n            }\n          />\n        ) : (\n          <CreatableSelect\n            className=\"react-select-container\"\n            classNamePrefix=\"react-select\"\n            options={\n              this.props.choices\n                ? [\n                    ...this.props.choices.map((option) => ({\n                      value: option[0],\n                      label:\n                        // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n                        option[1] !== 'None' && option[1]\n                          ? option[1]\n                          : option[0],\n                    })),\n                    {\n                      label: this.props.intl.formatMessage(messages.no_value),\n                      value: 'no-value',\n                    },\n                  ]\n                : [\n                    {\n                      label: this.props.intl.formatMessage(messages.no_value),\n                      value: 'no-value',\n                    },\n                  ]\n            }\n            styles={customSelectStyles}\n            isDisabled={this.props.isDisabled}\n            theme={selectTheme}\n            components={{ DropdownIndicator, Option }}\n            value={selectedOption || []}\n            placeholder={this.props.intl.formatMessage(messages.select)}\n            onChange={this.handleChange}\n            isMulti\n          />\n        )}\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const ArrayWidgetComponent = ArrayWidget;\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => {\n      const vocabBaseUrl =\n        getVocabFromHint(props) ||\n        getVocabFromField(props) ||\n        getVocabFromItems(props);\n      const vocabState = state.vocabularies[vocabBaseUrl];\n      // If the schema already has the choices in it, then do not try to get the vocab,\n      // even if there is one\n      if (props.items?.choices) {\n        return {\n          choices: props.items.choices,\n        };\n      } else if (vocabState) {\n        return {\n          choices: vocabState.items,\n          itemsTotal: vocabState.itemsTotal,\n          loading: Boolean(vocabState.loading),\n        };\n      }\n      return {};\n    },\n    { getVocabulary },\n  ),\n)(ArrayWidget);\n","/**\n * CheckboxWidget component.\n * @module components/manage/Widgets/CheckboxWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox } from 'semantic-ui-react';\n\nimport { injectIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\n\n/**\n * CheckboxWidget component class.\n * @function CheckboxWidget\n * @returns {string} Markup of the component.\n */\nconst CheckboxWidget = (props) => {\n  const { id, title, value, onChange, isDisabled } = props;\n\n  return (\n    <FormFieldWrapper {...props} columns={1}>\n      <div className=\"wrapper\">\n        <Checkbox\n          name={`field-${id}`}\n          checked={value}\n          disabled={isDisabled}\n          onChange={(event, { checked }) => {\n            onChange(id, checked);\n          }}\n          label={<label htmlFor={`field-${id}`}>{title}</label>}\n        />\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nCheckboxWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.bool,\n  onChange: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nCheckboxWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: null,\n  onEdit: null,\n  onDelete: null,\n};\n\nexport default injectIntl(CheckboxWidget);\n","/**\n * EmailWidget component.\n * @module components/manage/Widgets/EmailWidget\n */\n\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Input } from 'semantic-ui-react';\n\n/** EmailWidget function component\n * @function EmailWidget\n * @returns {string} Markup of the component\n */\nconst EmailWidget = (props) => {\n  const { id, value, onChange, onBlur, onClick, minLength, maxLength } = props;\n  const inputId = `field-${id}`;\n\n  return (\n    <FormFieldWrapper {...props} className=\"email\">\n      <Input\n        id={inputId}\n        name={id}\n        type=\"email\"\n        value={value || ''}\n        onChange={({ target }) =>\n          onChange(id, target.value === '' ? undefined : target.value)\n        }\n        onBlur={({ target }) =>\n          onBlur(id, target.value === '' ? undefined : target.value)\n        }\n        onClick={() => onClick()}\n        minLength={minLength || null}\n        maxLength={maxLength || null}\n      />\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types\n * @property {Object} propTypes Property types.\n * @static\n */\nEmailWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  minLength: PropTypes.number,\n  maxLength: PropTypes.number,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nEmailWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  minLength: null,\n  maxLength: null,\n};\n\nexport default EmailWidget;\n","/**\n * FileWidget component.\n * @module components/manage/Widgets/FileWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Image, Dimmer } from 'semantic-ui-react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { injectIntl } from 'react-intl';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { defineMessages, useIntl } from 'react-intl';\n\nconst imageMimetypes = [\n  'image/png',\n  'image/jpeg',\n  'image/webp',\n  'image/jpg',\n  'image/gif',\n  'image/svg+xml',\n];\nconst Dropzone = loadable(() => import('react-dropzone'));\n\nconst messages = defineMessages({\n  releaseDrag: {\n    id: 'Drop files here ...',\n    defaultMessage: 'Drop files here ...',\n  },\n  editFile: {\n    id: 'Drop file here to replace the existing file',\n    defaultMessage: 'Drop file here to replace the existing file',\n  },\n  fileDrag: {\n    id: 'Drop file here to upload a new file',\n    defaultMessage: 'Drop file here to upload a new file',\n  },\n  replaceFile: {\n    id: 'Replace existing file',\n    defaultMessage: 'Replace existing file',\n  },\n  addNewFile: {\n    id: 'Choose a file',\n    defaultMessage: 'Choose a file',\n  },\n});\n\n/**\n * FileWidget component class.\n * @function FileWidget\n * @returns {string} Markup of the component.\n */\nconst FileWidget = (props) => {\n  const { id, value, onChange } = props;\n  const [fileType, setFileType] = React.useState(false);\n  const intl = useIntl();\n\n  React.useEffect(() => {\n    if (value && imageMimetypes.includes(value['content-type'])) {\n      setFileType(true);\n    }\n  }, [value]);\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  const onDrop = (files) => {\n    const file = files[0];\n    readAsDataURL(file).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      onChange(id, {\n        data: fields[3],\n        encoding: fields[2],\n        'content-type': fields[1],\n        filename: file.name,\n      });\n    });\n\n    let reader = new FileReader();\n    reader.onload = function () {\n      const fields = reader.result.match(/^data:(.*);(.*),(.*)$/);\n      if (imageMimetypes.includes(fields[1])) {\n        setFileType(true);\n        let imagePreview = document.getElementById(`field-${id}-image`);\n        imagePreview.src = reader.result;\n      } else {\n        setFileType(false);\n      }\n    };\n    reader.readAsDataURL(files[0]);\n  };\n\n  return (\n    <FormFieldWrapper {...props}>\n      <Dropzone onDrop={onDrop}>\n        {({ getRootProps, getInputProps, isDragActive }) => (\n          <div className=\"file-widget-dropzone\" {...getRootProps()}>\n            {isDragActive && <Dimmer active></Dimmer>}\n            {fileType ? (\n              <Image\n                className=\"image-preview\"\n                id={`field-${id}-image`}\n                size=\"small\"\n                src={\n                  value?.download\n                    ? `${flattenToAppURL(value.download)}?id=${Date.now()}`\n                    : null\n                }\n              />\n            ) : (\n              <div className=\"dropzone-placeholder\">\n                {isDragActive ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.releaseDrag)}\n                  </p>\n                ) : value ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.editFile)}\n                  </p>\n                ) : (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.fileDrag)}\n                  </p>\n                )}\n              </div>\n            )}\n\n            <label className=\"label-file-widget-input\">\n              {value\n                ? intl.formatMessage(messages.replaceFile)\n                : intl.formatMessage(messages.addNewFile)}\n            </label>\n            <input\n              {...getInputProps({\n                type: 'file',\n                style: { display: 'none' },\n              })}\n              id={`field-${id}`}\n              name={id}\n              type=\"file\"\n            />\n          </div>\n        )}\n      </Dropzone>\n      <div className=\"field-file-name\">\n        {value && value.filename}\n        {value && (\n          <Button\n            icon\n            basic\n            className=\"delete-button\"\n            aria-label=\"delete file\"\n            onClick={() => {\n              onChange(id, null);\n              setFileType(false);\n            }}\n          >\n            <Icon name={deleteSVG} size=\"20px\" />\n          </Button>\n        )}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFileWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.shape({\n    '@type': PropTypes.string,\n    title: PropTypes.string,\n  }),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nFileWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n};\n\nexport default injectIntl(FileWidget);\n","/**\n * FormFieldWrapper component.\n * @module components/manage/Widgets/FormFieldWrapper\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Grid, Icon as IconOld, Label } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport cx from 'classnames';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  edit: {\n    id: 'Edit',\n    defaultMessage: 'Edit',\n  },\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n});\n/**\n * FormFieldWrapper component class.\n * @class FormFieldWrapper\n * @extends Component\n */\nclass FormFieldWrapper extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    wrapped: PropTypes.bool,\n    columns: PropTypes.number,\n    draggable: PropTypes.bool,\n    isDisabled: PropTypes.bool,\n    onEdit: PropTypes.func,\n    className: PropTypes.string,\n    onDelete: PropTypes.func,\n    intl: PropTypes.object,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    error: [],\n    wrapped: true,\n    columns: 2,\n    onDelete: null,\n    intl: null,\n    isDisabled: null,\n    draggable: null,\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      title,\n      description,\n      fieldSet,\n      required,\n      error,\n      wrapped,\n      columns,\n      draggable,\n      onEdit,\n      className,\n      isDisabled,\n      onDelete,\n      intl,\n      noForInFieldLabel,\n    } = this.props;\n    const wdg = (\n      <>\n        {this.props.children}\n\n        {map(error, (message) => (\n          <Label key={message} basic color=\"red\" pointing>\n            {message}\n          </Label>\n        ))}\n      </>\n    );\n\n    return wrapped ? (\n      <Form.Field\n        inline\n        required={required}\n        error={error.length > 0}\n        className={cx(description ? 'help' : '', className)}\n      >\n        <Grid>\n          <Grid.Row stretched>\n            {columns === 2 && (\n              <Grid.Column width=\"4\">\n                <div className=\"wrapper\">\n                  <label\n                    id={`fieldset-${fieldSet}-field-label-${id}`}\n                    htmlFor={noForInFieldLabel ? null : `field-${id}`}\n                  >\n                    {draggable && onEdit && (\n                      <i\n                        aria-hidden=\"true\"\n                        className=\"grey bars icon drag handle\"\n                      />\n                    )}\n                    {title}\n                  </label>\n                </div>\n              </Grid.Column>\n            )}\n            <Grid.Column width={columns === 2 ? 8 : 12}>\n              {onEdit && !isDisabled && (\n                <div className=\"toolbar\" style={{ zIndex: '2' }}>\n                  <button\n                    aria-label={intl.formatMessage(messages.edit)}\n                    className=\"item ui noborder button\"\n                    onClick={(evt) => {\n                      evt.preventDefault();\n                      onEdit(id);\n                    }}\n                  >\n                    <IconOld name=\"write square\" size=\"large\" color=\"blue\" />\n                  </button>\n                  <button\n                    aria-label={intl.formatMessage(messages.delete)}\n                    className=\"item ui noborder button\"\n                    onClick={(evt) => {\n                      evt.preventDefault();\n                      onDelete(id);\n                    }}\n                  >\n                    <IconOld name=\"close\" size=\"large\" color=\"red\" />\n                  </button>\n                </div>\n              )}\n              {wdg}\n            </Grid.Column>\n          </Grid.Row>\n          {description && (\n            <Grid.Row stretched>\n              <Grid.Column stretched width=\"12\">\n                <p className=\"help\">{description}</p>\n              </Grid.Column>\n            </Grid.Row>\n          )}\n        </Grid>\n      </Form.Field>\n    ) : (\n      <>{wdg}</>\n    );\n  }\n}\n\nexport default injectIntl(FormFieldWrapper);\n","/**\n * NumberWidget component.\n * @module components/manage/Widgets/PassswordWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectIntl } from 'react-intl';\n\n/**\n * NumberWidget component class.\n * @function NumberWidget\n * @returns {string} Markup of the component.\n */\nconst NumberWidget = (props) => {\n  const {\n    id,\n    value,\n    onChange,\n    onBlur,\n    onClick,\n    defaultValue,\n    isDisabled,\n    maximum,\n    minimum,\n  } = props;\n\n  return (\n    <FormFieldWrapper {...props}>\n      <Input\n        id={`field-${id}`}\n        name={id}\n        type=\"number\"\n        disabled={isDisabled}\n        min={minimum || null}\n        max={maximum || null}\n        value={value || defaultValue}\n        onChange={({ target }) =>\n          onChange(id, target.value === '' ? undefined : target.value)\n        }\n        onBlur={({ target }) =>\n          onBlur(id, target.value === '' ? undefined : target.value)\n        }\n        onClick={() => onClick()}\n      />\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nNumberWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  maximum: PropTypes.number,\n  minimum: PropTypes.number,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nNumberWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n};\n\nexport default injectIntl(NumberWidget);\n","/**\n * ObjectBrowserWidget component.\n * @module components/manage/Widgets/ObjectBrowserWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { isEmpty, remove } from 'lodash';\nimport { connect } from 'react-redux';\nimport { Label, Popup, Button } from 'semantic-ui-react';\nimport {\n  flattenToAppURL,\n  isInternalURL,\n  isUrl,\n  normalizeUrl,\n  removeProtocol,\n} from '@plone/volto/helpers/Url/Url';\nimport { searchContent } from '@plone/volto/actions/search/search';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport FormFieldWrapper from '@plone/volto/components/manage/Widgets/FormFieldWrapper';\n\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport homeSVG from '@plone/volto/icons/home.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport blankSVG from '@plone/volto/icons/blank.svg';\n\nconst messages = defineMessages({\n  placeholder: {\n    id: 'No items selected',\n    defaultMessage: 'No items selected',\n  },\n  edit: {\n    id: 'Edit',\n    defaultMessage: 'Edit',\n  },\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n  openObjectBrowser: {\n    id: 'Open object browser',\n    defaultMessage: 'Open object browser',\n  },\n});\n\n/**\n * ObjectBrowserWidget component class.\n * @class ObjectBrowserWidget\n * @extends Component\n */\nexport class ObjectBrowserWidgetComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    mode: PropTypes.string, //link,image,multiple\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    value: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.object),\n      PropTypes.object,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    openObjectBrowser: PropTypes.func.isRequired,\n    allowExternals: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    error: [],\n    value: [],\n    mode: 'multiple',\n    allowExternals: false,\n  };\n\n  state = {\n    manualLinkInput: '',\n    validURL: false,\n  };\n\n  constructor(props) {\n    super(props);\n    this.selectedItemsRef = React.createRef();\n    this.placeholderRef = React.createRef();\n  }\n  renderLabel(item) {\n    const href = item['@id'];\n    return (\n      <Popup\n        key={flattenToAppURL(href)}\n        content={\n          <div style={{ display: 'flex' }}>\n            {isInternalURL(href) ? (\n              <Icon name={homeSVG} size=\"18px\" />\n            ) : (\n              <Icon name={blankSVG} size=\"18px\" />\n            )}\n            &nbsp;\n            {flattenToAppURL(href)}\n          </div>\n        }\n        trigger={\n          <Label>\n            {item.title}\n            {this.props.mode === 'multiple' && (\n              <Icon\n                name={clearSVG}\n                size=\"12px\"\n                className=\"right\"\n                onClick={(event) => {\n                  event.preventDefault();\n                  this.removeItem(item);\n                }}\n              />\n            )}\n          </Label>\n        }\n      />\n    );\n  }\n\n  removeItem = (item) => {\n    let value = [...this.props.value];\n    remove(value, function (_item) {\n      return _item['@id'] === item['@id'];\n    });\n    this.props.onChange(this.props.id, value);\n  };\n\n  onChange = (item) => {\n    let value = this.props.mode === 'multiple' ? [...this.props.value] : [];\n    value = value.filter((item) => item != null);\n    const maxSize =\n      this.props.widgetOptions?.pattern_options?.maximumSelectionSize || -1;\n    if (maxSize === 1 && value.length === 1) {\n      value = []; //enable replace of selected item with another value, if maxsize is 1\n    }\n    let exists = false;\n    let index = -1;\n    value.forEach((_item, _index) => {\n      if (flattenToAppURL(_item['@id']) === flattenToAppURL(item['@id'])) {\n        exists = true;\n        index = _index;\n      }\n    });\n    //find(value, {\n    //   '@id': flattenToAppURL(item['@id']),\n    // });\n    if (!exists) {\n      // add item\n      // Check if we want to filter the attributes of the selected item\n      let resultantItem = item;\n      if (this.props.selectedItemAttrs) {\n        const allowedItemKeys = [\n          ...this.props.selectedItemAttrs,\n          // Add the required attributes for the widget to work\n          '@id',\n          'title',\n        ];\n        resultantItem = Object.keys(item)\n          .filter((key) => allowedItemKeys.includes(key))\n          .reduce((obj, key) => {\n            obj[key] = item[key];\n            return obj;\n          }, {});\n      }\n      // Add required @id field, just in case\n      resultantItem = { ...resultantItem, '@id': item['@id'] };\n      value.push(resultantItem);\n      this.props.onChange(this.props.id, value);\n    } else {\n      //remove item\n      value.splice(index, 1);\n      this.props.onChange(this.props.id, value);\n    }\n  };\n\n  onManualLinkInput = (e) => {\n    this.setState({ manualLinkInput: e.target.value });\n    if (this.validateManualLink(e.target.value)) {\n      this.setState({ validURL: true });\n    } else {\n      this.setState({ validURL: false });\n    }\n  };\n\n  validateManualLink = (url) => {\n    if (this.props.allowExternals) {\n      return isUrl(url);\n    } else {\n      return isInternalURL(url);\n    }\n  };\n\n  onSubmitManualLink = () => {\n    if (this.validateManualLink(this.state.manualLinkInput)) {\n      if (isInternalURL(this.state.manualLinkInput)) {\n        const link = this.state.manualLinkInput;\n        // convert it into an internal on if possible\n        this.props\n          .searchContent(\n            '/',\n            {\n              'path.query': flattenToAppURL(this.state.manualLinkInput),\n              'path.depth': '0',\n              sort_on: 'getObjPositionInParent',\n              metadata_fields: '_all',\n              b_size: 1000,\n            },\n            `${this.props.block}-${this.props.mode}`,\n          )\n          .then((resp) => {\n            if (resp.items?.length > 0) {\n              this.onChange(resp.items[0]);\n            } else {\n              this.props.onChange(this.props.id, [\n                {\n                  '@id': normalizeUrl(link),\n                  title: removeProtocol(link),\n                },\n              ]);\n            }\n          });\n      } else {\n        this.props.onChange(this.props.id, [\n          {\n            '@id': normalizeUrl(this.state.manualLinkInput),\n            title: removeProtocol(this.state.manualLinkInput),\n          },\n        ]);\n      }\n      this.setState({ validURL: true, manualLinkInput: '' });\n    }\n  };\n\n  onKeyDownManualLink = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmitManualLink();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      // TODO: Do something on ESC key\n    }\n  };\n\n  showObjectBrowser = (ev) => {\n    ev.preventDefault();\n    this.props.openObjectBrowser({\n      mode: this.props.mode,\n      onSelectItem: (url, item) => {\n        this.onChange(item);\n      },\n      propDataName: 'value',\n      selectableTypes: this.props.widgetOptions?.pattern_options\n        ?.selectableTypes,\n      maximumSelectionSize: this.props.widgetOptions?.pattern_options\n        ?.maximumSelectionSize,\n    });\n  };\n\n  handleSelectedItemsRefClick = (e) => {\n    if (this.props.isDisabled) {\n      return;\n    }\n\n    if (\n      e.target.contains(this.selectedItemsRef.current) ||\n      e.target.contains(this.placeholderRef.current)\n    ) {\n      this.showObjectBrowser(e);\n    }\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      description,\n      fieldSet,\n      value,\n      mode,\n      onChange,\n      isDisabled,\n    } = this.props;\n\n    let icon =\n      mode === 'multiple' || value.length === 0 ? navTreeSVG : clearSVG;\n    let iconAction =\n      mode === 'multiple' || value.length === 0\n        ? this.showObjectBrowser\n        : (e) => {\n            e.preventDefault();\n            onChange(id, []);\n          };\n\n    let items = value ? value.filter((item) => item != null) : [];\n\n    return (\n      <FormFieldWrapper\n        {...this.props}\n        className={description ? 'help text' : 'text'}\n      >\n        <div\n          className=\"objectbrowser-field\"\n          aria-labelledby={`fieldset-${\n            fieldSet || 'default'\n          }-field-label-${id}`}\n        >\n          <div\n            className=\"selected-values\"\n            onClick={this.handleSelectedItemsRefClick}\n            onKeyDown={this.handleSelectedItemsRefClick}\n            role=\"searchbox\"\n            tabIndex={0}\n            ref={this.selectedItemsRef}\n          >\n            {items.map((item) => this.renderLabel(item))}\n\n            {items.length === 0 && this.props.mode === 'multiple' && (\n              <div className=\"placeholder\" ref={this.placeholderRef}>\n                {this.props.intl.formatMessage(messages.placeholder)}\n              </div>\n            )}\n            {this.props.allowExternals &&\n              items.length === 0 &&\n              this.props.mode !== 'multiple' && (\n                <input\n                  onKeyDown={this.onKeyDownManualLink}\n                  onChange={this.onManualLinkInput}\n                  value={this.state.manualLinkInput}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.placeholder,\n                  )}\n                />\n              )}\n          </div>\n          {this.state.manualLinkInput && isEmpty(items) && (\n            <Button.Group>\n              <Button\n                basic\n                className=\"cancel\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  this.setState({ manualLinkInput: '' });\n                }}\n              >\n                <Icon name={clearSVG} size=\"18px\" color=\"#e40166\" />\n              </Button>\n              <Button\n                basic\n                primary\n                disabled={!this.state.validURL}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  this.onSubmitManualLink();\n                }}\n              >\n                <Icon name={aheadSVG} size=\"18px\" />\n              </Button>\n            </Button.Group>\n          )}\n          {!this.state.manualLinkInput && (\n            <Button\n              aria-label={this.props.intl.formatMessage(\n                messages.openObjectBrowser,\n              )}\n              onClick={iconAction}\n              className=\"action\"\n              disabled={isDisabled}\n            >\n              <Icon name={icon} size=\"18px\" />\n            </Button>\n          )}\n        </div>\n      </FormFieldWrapper>\n    );\n  }\n}\n\nconst ObjectBrowserWidgetMode = (mode) =>\n  compose(\n    injectIntl,\n    withObjectBrowser,\n    connect(null, { searchContent }),\n  )((props) => <ObjectBrowserWidgetComponent {...props} mode={mode} />);\nexport { ObjectBrowserWidgetMode };\nexport default compose(\n  injectIntl,\n  withObjectBrowser,\n  connect(null, { searchContent }),\n)(ObjectBrowserWidgetComponent);\n","import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Accordion, Button, Segment } from 'semantic-ui-react';\nimport { DragDropList, FormFieldWrapper, Icon } from '@plone/volto/components';\nimport ObjectWidget from '@plone/volto/components/manage/Widgets/ObjectWidget';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport { v4 as uuid } from 'uuid';\n\nconst messages = defineMessages({\n  labelRemoveItem: {\n    id: 'Remove item',\n    defaultMessage: 'Remove item',\n  },\n  labelCollapseItem: {\n    id: 'Collapse item',\n    defaultMessage: 'Collapse item',\n  },\n  labelShowItem: {\n    id: 'Show item',\n    defaultMessage: 'Show item',\n  },\n  emptyObjectList: {\n    id: 'Empty object list',\n    defaultMessage: 'Empty object list',\n  },\n});\n\nconst ObjectListWidget = (props) => {\n  const {\n    block,\n    fieldSet,\n    id,\n    schema,\n    value = [],\n    onChange,\n    schemaExtender,\n  } = props;\n  const [activeColumn, setActiveColumn] = React.useState(0);\n  const intl = useIntl();\n\n  function handleChangeColumn(e, blockProps) {\n    const { index } = blockProps;\n    const newIndex = activeColumn === index ? -1 : index;\n\n    setActiveColumn(newIndex);\n  }\n  const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n\n  const topLayerShadow = '0 1px 1px rgba(0,0,0,0.15)';\n  const secondLayer = ', 0 10px 0 -5px #eee, 0 10px 1px -4px rgba(0,0,0,0.15)';\n  const thirdLayer = ', 0 20px 0 -10px #eee, 0 20px 1px -9px rgba(0,0,0,0.15)';\n\n  return (\n    <div className=\"objectlist-widget\">\n      <FormFieldWrapper {...props} noForInFieldLabel className=\"objectlist\">\n        <div className=\"add-item-button-wrapper\">\n          <Button\n            compact\n            icon\n            aria-label={objectSchema.addMessage || `Add ${objectSchema.title}`}\n            onClick={(e) => {\n              e.preventDefault();\n              onChange(id, [\n                ...value,\n                {\n                  '@id': uuid(),\n                },\n              ]);\n              setActiveColumn(value.length);\n            }}\n          >\n            <Icon name={addSVG} size=\"18px\" />\n            &nbsp;\n            {/* Custom addMessage in schema, else default to english */}\n            {objectSchema.addMessage || `Add ${objectSchema.title}`}\n          </Button>\n        </div>\n        {value.length === 0 && (\n          <input\n            aria-labelledby={`fieldset-${\n              fieldSet || 'default'\n            }-field-label-${id}`}\n            type=\"hidden\"\n            value={intl.formatMessage(messages.emptyObjectList)}\n          />\n        )}\n      </FormFieldWrapper>\n      <DragDropList\n        style={{\n          boxShadow: `${topLayerShadow}${value.length > 1 ? secondLayer : ''}${\n            value.length > 2 ? thirdLayer : ''\n          }`,\n        }}\n        forwardedAriaLabelledBy={`fieldset-${\n          fieldSet || 'default'\n        }-field-label-${id}`}\n        childList={value.map((o) => [o['@id'], o])}\n        onMoveItem={(result) => {\n          const { source, destination } = result;\n          if (!destination) {\n            return;\n          }\n\n          const first = value[source.index];\n          const second = value[destination.index];\n          value[destination.index] = first;\n          value[source.index] = second;\n\n          onChange(id, value);\n          return true;\n        }}\n      >\n        {({ child, childId, index, draginfo }) => {\n          return (\n            <div\n              ref={draginfo.innerRef}\n              {...draginfo.draggableProps}\n              key={childId}\n            >\n              <Accordion key={index} fluid styled>\n                <Accordion.Title\n                  active={activeColumn === index}\n                  index={index}\n                  onClick={handleChangeColumn}\n                  aria-label={`${\n                    activeColumn === index\n                      ? intl.formatMessage(messages.labelCollapseItem)\n                      : intl.formatMessage(messages.labelShowItem)\n                  } #${index + 1}`}\n                >\n                  <button\n                    style={{\n                      visibility: 'visible',\n                      display: 'inline-block',\n                    }}\n                    {...draginfo.dragHandleProps}\n                    className=\"drag handle\"\n                  >\n                    <Icon name={dragSVG} size=\"18px\" />\n                  </button>\n\n                  <div className=\"accordion-title-wrapper\">\n                    {`${objectSchema.title} #${index + 1}`}\n                  </div>\n                  <div className=\"accordion-tools\">\n                    <button\n                      aria-label={`${intl.formatMessage(\n                        messages.labelRemoveItem,\n                      )} #${index + 1}`}\n                      onClick={() => {\n                        onChange(\n                          id,\n                          value.filter((v, i) => i !== index),\n                        );\n                      }}\n                    >\n                      <Icon name={deleteSVG} size=\"20px\" color=\"#e40166\" />\n                    </button>\n                    {activeColumn === index ? (\n                      <Icon name={upSVG} size=\"20px\" />\n                    ) : (\n                      <Icon name={downSVG} size=\"20px\" />\n                    )}\n                  </div>\n                </Accordion.Title>\n                <Accordion.Content active={activeColumn === index}>\n                  <Segment>\n                    <ObjectWidget\n                      id={`${id}-${index}`}\n                      key={`ow-${id}-${index}`}\n                      block={block}\n                      schema={\n                        schemaExtender\n                          ? schemaExtender(schema, child)\n                          : objectSchema\n                      }\n                      value={child}\n                      onChange={(fi, fv) => {\n                        const newvalue = value.map((v, i) =>\n                          i !== index ? v : fv,\n                        );\n                        onChange(id, newvalue);\n                      }}\n                    />\n                  </Segment>\n                </Accordion.Content>\n              </Accordion>\n            </div>\n          );\n        }}\n      </DragDropList>\n    </div>\n  );\n};\nexport default ObjectListWidget;\n","/**\n * A generic widget for an object. If multiple\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab } from 'semantic-ui-react';\n\nimport Field from '@plone/volto/components/manage/Form/Field';\n\n/**\n * Renders a field set. Passes some of the values in the schema to the Field\n * component used inside. Shows the current value, the errors, the required\n * status of the fields inside.\n *\n * @param {object} data\n * @param {number} index\n * @param {object} schema\n * @param {object} value\n * @param {object} errors\n * @param {function} onChange\n * @param {string} id\n */\nconst FieldSet = ({\n  block,\n  data,\n  index,\n  schema,\n  value,\n  errors,\n  onChange,\n  onChangeBlock,\n  id,\n}) => {\n  return data.fields.map((field, idx) => {\n    const v = value?.[field] || schema.properties[field].defaultValue;\n    return (\n      <Field\n        {...schema.properties[field]}\n        id={`${field}-${idx}-${id}`}\n        fieldset={data.title.toLowerCase()}\n        block={block}\n        value={v}\n        objectvalue={value}\n        required={schema.required?.indexOf(field) !== -1}\n        onChange={(field2, fieldvalue) => {\n          return onChange(id, { ...value, [field]: fieldvalue });\n        }}\n        key={field}\n        error={errors?.[field]}\n        title={schema.properties[field].title}\n        onChangeBlock={onChangeBlock}\n      />\n    );\n  });\n};\n\n/**\n *\n * Provides an automatic form for complex JS objects, based on a schema\n *\n * Creates an object widget with the given onChange handler and an ID. If there\n * are multiple field sets, it renders a Tab component with multiple tab panes.\n * Each tab has the title of the fieldset it renders.\n *\n * @param {object} schema Schema, follows Plone dexterity serialized schema\n * @param {object} value Object value, a JS object\n * @param {function} onChange Callback for object changed\n * @param {object} errors A list errors\n * @param {string} id Field id\n */\nconst ObjectWidget = ({\n  block,\n  schema,\n  value, // not checked to not contain unknown fields\n  onChange,\n  errors = {},\n  id,\n  ...props\n}) => {\n  const createTab = React.useCallback(\n    (fieldset, index) => {\n      return {\n        menuItem: fieldset.title,\n        render: () => (\n          <Tab.Pane>\n            <FieldSet\n              block={block}\n              data={fieldset}\n              index={index}\n              schema={schema}\n              errors={errors}\n              value={value}\n              onChange={onChange}\n              id={id}\n            />\n          </Tab.Pane>\n        ),\n      };\n    },\n    [block, errors, id, onChange, schema, value],\n  );\n\n  return schema.fieldsets.length === 1 ? (\n    <>\n      <FieldSet\n        block={block}\n        data={schema.fieldsets[0]}\n        index={0}\n        schema={schema}\n        errors={errors}\n        value={value}\n        onChange={onChange}\n        id={id}\n      />\n    </>\n  ) : (\n    <Tab panes={schema.fieldsets.map(createTab)} /> // lazy loading\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nObjectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  schema: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  value: PropTypes.object,\n  onChange: PropTypes.func.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nObjectWidget.defaultProps = {\n  value: null,\n};\n\nexport default ObjectWidget;\n","/**\n * PasswordWidget component.\n * @module components/manage/Widgets/PassswordWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectIntl } from 'react-intl';\n\n/**\n * PasswordWidget component class.\n * @function PasswordWidget\n * @returns {string} Markup of the component.\n */\nconst PasswordWidget = (props) => {\n  const { id, value, onChange, onBlur, onClick, minLength, maxLength } = props;\n\n  return (\n    <FormFieldWrapper {...props}>\n      <Input\n        id={`field-${id}`}\n        name={id}\n        type=\"password\"\n        disabled={props.isDisabled}\n        value={value || ''}\n        onChange={({ target }) =>\n          onChange(id, target.value === '' ? undefined : target.value)\n        }\n        onBlur={({ target }) =>\n          onBlur(id, target.value === '' ? undefined : target.value)\n        }\n        onClick={() => onClick()}\n        minLength={minLength || null}\n        maxLength={maxLength || null}\n        autoComplete=\"off\"\n      />\n    </FormFieldWrapper>\n  );\n};\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nPasswordWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  minLength: PropTypes.number,\n  maxLength: PropTypes.number,\n  wrapped: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nPasswordWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  minLength: null,\n  maxLength: null,\n};\n\nexport default injectIntl(PasswordWidget);\n","/**\n * QuerystringWidget component.\n * @module components/manage/Widgets/QuerystringWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Form,\n  Grid,\n  Icon as OldIcon,\n  Input,\n  Label,\n} from 'semantic-ui-react';\nimport { filter, remove, toPairs, groupBy, isEmpty, map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getQuerystring } from '@plone/volto/actions';\nimport { Icon } from '@plone/volto/components';\nimport { format, parse } from 'date-fns';\nimport loadable from '@loadable/component';\n\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nconst Select = loadable(() => import('react-select'));\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  selectCriteria: {\n    id: 'Select criteria',\n    defaultMessage: 'Select criteria',\n  },\n});\n\n/**\n * QuerystringWidget component class.\n * @class QuerystringWidget\n * @extends Component\n */\nclass QuerystringWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    value: PropTypes.array,\n    focus: PropTypes.bool,\n    onChange: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    getQuerystring: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    error: [],\n    value: null,\n    onChange: null,\n    onEdit: null,\n    onDelete: null,\n    focus: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visual: false,\n    };\n    this.onChangeValue = this.onChangeValue.bind(this);\n    this.getWidget = this.getWidget.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    // Initialization of the query value since it's null from the schema, and it does not\n    // get a default value of []\n    if (this.props.value === null) {\n      this.props.onChange(this.props.id, []);\n    }\n    if (this.props.focus) {\n      this.node.focus();\n    }\n    this.props.getQuerystring();\n  }\n\n  /**\n   * Get correct widget\n   * @method getWidget\n   * @param {Object} row Row object.\n   * @param {number} index Row index.\n   * @returns {Object} Widget.\n   */\n  getWidget(row, index) {\n    const props = {\n      fluid: true,\n      value: row.v,\n      onChange: (data) => this.onChangeValue(index, data.target.value),\n    };\n    const values = this.props.indexes[row.i].values;\n\n    switch (this.props.indexes[row.i].operators[row.o].widget) {\n      case null:\n        return <span />;\n      case 'DateWidget':\n        return (\n          <Form.Field width={4}>\n            <Input\n              type=\"date\"\n              {...props}\n              value={format(parse(row.v), 'YYYY-MM-DD')}\n            />\n          </Form.Field>\n        );\n      case 'DateRangeWidget': // 2 date inputs\n        return (\n          <React.Fragment>\n            <Form.Field width={2}>\n              <Input\n                type=\"date\"\n                {...props}\n                value={format(parse(row.v[0]), 'YYYY-MM-DD')}\n                onChange={(data) =>\n                  this.onChangeValue(index, [data.target.value, row.v[1]])\n                }\n              />\n            </Form.Field>\n            <Form.Field width={2}>\n              <Input\n                type=\"date\"\n                {...props}\n                value={format(parse(row.v[1]), 'YYYY-MM-DD')}\n                onChange={(data) =>\n                  this.onChangeValue(index, [row.v[0], data.target.value])\n                }\n              />\n            </Form.Field>\n          </React.Fragment>\n        );\n      case 'RelativeDateWidget':\n        return (\n          <Form.Field width={4}>\n            <Input step={1} type=\"number\" {...props} />\n          </Form.Field>\n        );\n      case 'MultipleSelectionWidget':\n        return (\n          <Form.Field width={4}>\n            <Select\n              {...props}\n              className=\"react-select-container\"\n              classNamePrefix=\"react-select\"\n              options={\n                values\n                  ? map(toPairs(values), (value) => ({\n                      label: value[1].title,\n                      value: value[0],\n                    }))\n                  : []\n              }\n              styles={customSelectStyles}\n              theme={selectTheme}\n              components={{ DropdownIndicator, Option }}\n              onChange={(data) => {\n                this.onChangeValue(\n                  index,\n                  map(data, (item) => item.value),\n                );\n              }}\n              isMulti={true}\n              value={map(row.v, (value) => ({\n                label: values?.[value]?.title || value,\n                value,\n              }))}\n            />\n          </Form.Field>\n        );\n      case 'ReferenceWidget':\n      default:\n        return (\n          <Form.Field width={4}>\n            <Input {...props} />\n          </Form.Field>\n        );\n    }\n  }\n\n  /**\n   * Change value handler\n   * @method onChangeValue\n   * @param {Number} index Index of the row.\n   * @param {String|Array} value Value of the row.\n   * @returns {undefined}\n   */\n  onChangeValue(index, value) {\n    this.props.onChange(\n      this.props.id,\n      map(this.props.value, (row, i) =>\n        index === i\n          ? {\n              ...row,\n              v: value,\n            }\n          : row,\n      ),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      title,\n      required,\n      description,\n      error,\n      value,\n      onChange,\n      onEdit,\n      onDelete,\n      indexes,\n      intl,\n      draggable,\n      isDisabled,\n    } = this.props;\n\n    const schema = {\n      fieldsets: [\n        {\n          id: 'default',\n          title: intl.formatMessage(messages.default),\n          fields: ['title', 'id', 'description', 'required'],\n        },\n      ],\n      properties: {\n        id: {\n          type: 'string',\n          title: intl.formatMessage(messages.idTitle),\n          description: intl.formatMessage(messages.idDescription),\n        },\n        title: {\n          type: 'string',\n          title: intl.formatMessage(messages.title),\n        },\n        description: {\n          type: 'string',\n          widget: 'textarea',\n          title: intl.formatMessage(messages.description),\n        },\n        required: {\n          type: 'boolean',\n          title: intl.formatMessage(messages.required),\n        },\n      },\n      required: ['id', 'title'],\n    };\n\n    return (\n      <Form.Field\n        inline\n        required={required}\n        error={error.length > 0}\n        className={description ? 'help' : ''}\n      >\n        <Grid>\n          <Grid.Row stretched>\n            <Grid.Column width=\"4\">\n              <div className=\"wrapper\">\n                <label htmlFor={`field-${id}`}>\n                  {draggable && onEdit && (\n                    <i\n                      aria-hidden=\"true\"\n                      className=\"grey bars icon drag handle\"\n                    />\n                  )}\n                  {title}\n                </label>\n              </div>\n            </Grid.Column>\n            <Grid.Column width=\"8\">\n              {onEdit && !isDisabled && (\n                <div className=\"toolbar\">\n                  <button\n                    onClick={(evt) => {\n                      evt.preventDefault();\n                      onEdit(id, schema);\n                    }}\n                    className=\"item ui noborder button\"\n                  >\n                    <OldIcon name=\"write square\" size=\"large\" color=\"blue\" />\n                  </button>\n                  <button\n                    onClick={(evt) => {\n                      evt.preventDefault();\n                      onDelete(id);\n                    }}\n                    className=\"item ui noborder button\"\n                  >\n                    <Icon name={clearSVG} size=\"24px\" className=\"close\" />\n                  </button>\n                </div>\n              )}\n              {indexes &&\n                !isEmpty(indexes) &&\n                map(value, (row, index) => (\n                  <Form.Group key={index}>\n                    <Form.Field width={4}>\n                      <Select\n                        id={`field-${id}`}\n                        name={id}\n                        isDisabled={isDisabled}\n                        className=\"react-select-container\"\n                        classNamePrefix=\"react-select\"\n                        options={map(\n                          toPairs(\n                            groupBy(toPairs(indexes), (item) => item[1].group),\n                          ),\n                          (group) => ({\n                            label: group[0],\n                            options: map(\n                              filter(group[1], (item) => item[1].enabled),\n                              (field) => ({\n                                label: field[1].title,\n                                value: field[0],\n                              }),\n                            ),\n                          }),\n                        )}\n                        styles={customSelectStyles}\n                        theme={selectTheme}\n                        components={{ DropdownIndicator, Option }}\n                        value={{\n                          value: row.i,\n                          label: indexes[row.i].title,\n                        }}\n                        onChange={(data) =>\n                          onChange(\n                            id,\n                            map(value, (curRow, curIndex) =>\n                              curIndex === index\n                                ? {\n                                    i: data.value,\n                                    o: indexes[data.value].operations[0],\n                                    v: '',\n                                  }\n                                : curRow,\n                            ),\n                          )\n                        }\n                      />\n                    </Form.Field>\n                    <Form.Field width=\"3\">\n                      <Select\n                        id={`field-${id}`}\n                        name={id}\n                        isDisabled={isDisabled}\n                        className=\"react-select-container\"\n                        classNamePrefix=\"react-select\"\n                        options={map(\n                          indexes[row.i].operations,\n                          (operation) => ({\n                            value: operation,\n                            label: indexes[row.i].operators[operation].title,\n                          }),\n                        )}\n                        styles={customSelectStyles}\n                        theme={selectTheme}\n                        components={{ DropdownIndicator, Option }}\n                        value={{\n                          value: row.o,\n                          label: indexes[row.i].operators[row.o].title,\n                        }}\n                        onChange={(data) =>\n                          onChange(\n                            id,\n                            map(value, (curRow, curIndex) =>\n                              curIndex === index\n                                ? {\n                                    i: row.i,\n                                    o: data.value,\n                                    v: '',\n                                  }\n                                : curRow,\n                            ),\n                          )\n                        }\n                      />\n                    </Form.Field>\n                    {this.getWidget(row, index)}\n                    <Button\n                      onClick={(event) => {\n                        onChange(\n                          id,\n                          remove(value, (v, i) => i !== index),\n                        );\n                        event.preventDefault();\n                      }}\n                      style={{\n                        background: 'none',\n                        paddingRight: 0,\n                        paddingLeft: 0,\n                      }}\n                    >\n                      <Icon name={clearSVG} size=\"24px\" className=\"close\" />\n                    </Button>\n                  </Form.Group>\n                ))}\n              <Form.Group>\n                <Form.Field width={4}>\n                  <Select\n                    id={`field-${id}`}\n                    name={id}\n                    isDisabled={isDisabled}\n                    className=\"react-select-container\"\n                    classNamePrefix=\"react-select\"\n                    placeholder={this.props.intl.formatMessage(\n                      messages.selectCriteria,\n                    )}\n                    options={map(\n                      toPairs(\n                        groupBy(toPairs(indexes), (item) => item[1].group),\n                      ),\n                      (group) => ({\n                        label: group[0],\n                        options: map(\n                          filter(group[1], (item) => item[1].enabled),\n                          (field) => ({\n                            label: field[1].title,\n                            value: field[0],\n                          }),\n                        ),\n                      }),\n                    )}\n                    styles={customSelectStyles}\n                    theme={selectTheme}\n                    components={{ DropdownIndicator, Option }}\n                    value={null}\n                    onChange={(data) => {\n                      onChange(id, [\n                        ...(value || []),\n                        {\n                          i: data.value,\n                          o: indexes[data.value].operations[0],\n                          v: '',\n                        },\n                      ]);\n                    }}\n                  />\n                </Form.Field>\n              </Form.Group>\n              {map(error, (message) => (\n                <Label key={message} basic color=\"red\" pointing>\n                  {message}\n                </Label>\n              ))}\n            </Grid.Column>\n          </Grid.Row>\n          {description && (\n            <Grid.Row stretched>\n              <Grid.Column stretched width=\"12\">\n                <p className=\"help\">{description}</p>\n              </Grid.Column>\n            </Grid.Row>\n          )}\n        </Grid>\n      </Form.Field>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      indexes: state.querystring.indexes,\n    }),\n    { getQuerystring },\n  ),\n)(QuerystringWidget);\n","/**\n * ReferenceWidget component.\n * @module components/manage/Widgets/ReferenceWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Label, Dropdown, Popup, Icon } from 'semantic-ui-react';\nimport { compact, concat, fromPairs, map, values, uniqBy } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { resetSearchContent, searchContent } from '@plone/volto/actions';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nconst messages = defineMessages({\n  no_results_found: {\n    id: 'No results found.',\n    defaultMessage: 'No results found.',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n});\n\n/**\n * ReferenceWidget component class.\n * @class ReferenceWidget\n * @extends Component\n */\nclass ReferenceWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    multiple: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    value: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.object),\n      PropTypes.object,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    resetSearchContent: PropTypes.func.isRequired,\n    searchContent: PropTypes.func.isRequired,\n    search: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        title: PropTypes.string,\n        description: PropTypes.string,\n      }),\n    ),\n    wrapped: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    error: [],\n    search: [],\n    value: null,\n    multiple: true,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.onSearchChange = this.onSearchChange.bind(this);\n\n    this.state = {\n      choices: props.value\n        ? props.multiple\n          ? fromPairs(\n              map(props.value, (value) => [\n                value['@id'],\n                {\n                  key: value['@id'],\n                  text: flattenToAppURL(value['@id']),\n                  value: value['@id'],\n                  label: {\n                    content: value.title,\n                  },\n                  data: value,\n                },\n              ]),\n            )\n          : {\n              [props.value['@id']]: {\n                key: props.value['@id'],\n                text: flattenToAppURL(props.value),\n                value: props.value['@id'],\n                label: {\n                  content: props.value.title,\n                },\n                data: props.value,\n              },\n              novalue: {\n                key: 'novalue',\n                text: this.props.intl.formatMessage(messages.no_value),\n                value: 'novalue',\n                data: null,\n              },\n            }\n        : {},\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.resetSearchContent();\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState({\n      choices: {\n        ...fromPairs(\n          map(\n            uniqBy(\n              map(\n                compact(concat(nextProps.value, nextProps.search)),\n                (item) => ({\n                  ...item,\n                  '@id': flattenToAppURL(item['@id']),\n                }),\n              ),\n              '@id',\n            ),\n            (value) => [\n              value['@id'],\n              {\n                key: value['@id'],\n                text: flattenToAppURL(value['@id']),\n                value: value['@id'],\n                label: {\n                  content: value.title,\n                },\n                data: value,\n              },\n            ],\n          ),\n        ),\n        novalue: {\n          key: 'novalue',\n          text: this.props.intl.formatMessage(messages.no_value),\n          value: 'novalue',\n          data: null,\n        },\n      },\n    });\n  }\n\n  /**\n   * On search change handler\n   * @method onSearchChange\n   * @param {object} event Event object.\n   * @param {object} data Event data.\n   * @returns {undefined}\n   */\n\n  onSearchChange(event, data) {\n    if (data.searchQuery && data.searchQuery !== '') {\n      this.props.searchContent('', {\n        Title: `*${data.searchQuery}*`,\n      });\n    } else {\n      this.props.resetSearchContent();\n    }\n  }\n  renderLabel = (item, index, defaultProps) => {\n    return (\n      <Popup\n        key={item.value}\n        content={\n          <>\n            <Icon name=\"home\" /> {item.value}\n          </>\n        }\n        trigger={\n          defaultProps && (\n            <Label active={defaultProps.active}>\n              {item.label.content}\n              <Icon\n                name=\"delete\"\n                onClick={(event) => {\n                  defaultProps.onRemove(event, defaultProps);\n                }}\n              />\n            </Label>\n          )\n        }\n      />\n    );\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { id, title, value, multiple, onChange } = this.props;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <Dropdown\n          options={values(this.state.choices)}\n          placeholder={title}\n          search\n          selection\n          fluid\n          noResultsMessage={this.props.intl.formatMessage(\n            messages.no_results_found,\n          )}\n          multiple={multiple}\n          value={\n            multiple\n              ? value\n                ? map(value, (item) =>\n                    item && item['@id'] ? flattenToAppURL(item['@id']) : item,\n                  )\n                : []\n              : value\n              ? flattenToAppURL(value['@id'])\n              : ''\n          }\n          onChange={(event, data) => {\n            return onChange(\n              id,\n              multiple\n                ? map(data.value, (item) => this.state.choices[item].data)\n                : this.state.choices[data.value].data,\n            );\n          }}\n          onSearchChange={this.onSearchChange}\n          renderLabel={this.renderLabel}\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      search: state.search.items,\n    }),\n    { resetSearchContent, searchContent },\n  ),\n)(ReferenceWidget);\n","/**\n * SchemaWidget component.\n * @module components/manage/Widgets/SchemaWidget\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport PropTypes from 'prop-types';\nimport { concat, findIndex, isString, map, omit, slice, without } from 'lodash';\nimport move from 'lodash-move';\nimport { Confirm, Form, Grid, Icon, Message, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { getFieldsVocabulary } from '@plone/volto/helpers';\n\nimport {\n  Field,\n  ModalForm,\n  SchemaWidgetFieldset,\n} from '@plone/volto/components';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add',\n    defaultMessage: 'Add',\n  },\n  addField: {\n    id: 'Add field',\n    defaultMessage: 'Add field',\n  },\n  addFieldset: {\n    id: 'Add fieldset',\n    defaultMessage: 'Add fieldset',\n  },\n  parentFieldSet: {\n    id: 'Parent fieldset',\n    defaultMessage: 'Parent fieldset',\n  },\n  editField: {\n    id: 'Edit field',\n    defaultMessage: 'Edit field',\n  },\n  editFieldset: {\n    id: 'Edit fieldset',\n    defaultMessage: 'Edit fieldset',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  choices: {\n    id: 'Possible values',\n    defaultMessage: 'Possible values (Enter allowed choices one per line).',\n  },\n  string: {\n    id: 'String',\n    defaultMessage: 'String',\n  },\n  text: {\n    id: 'Text',\n    defaultMessage: 'Text',\n  },\n  richtext: {\n    id: 'Richtext',\n    defaultMessage: 'Richtext',\n  },\n  checkbox: {\n    id: 'Checkbox',\n    defaultMessage: 'Checkbox',\n  },\n  selection: {\n    id: 'Selection',\n    defaultMessage: 'Selection',\n  },\n  type: {\n    id: 'Type',\n    defaultMessage: 'Type',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  minLength: {\n    id: 'minLength',\n    defaultMessage: 'Minimum Length',\n  },\n  maxLength: {\n    id: 'maxLength',\n    defaultMessage: 'Maximum Length',\n  },\n  minimum: {\n    id: 'minimum',\n    defaultMessage: 'Start of the range',\n  },\n  maximum: {\n    id: 'maximum',\n    defaultMessage: 'End of the range (including the value itself)',\n  },\n  deleteFieldset: {\n    id: 'Are you sure you want to delete this fieldset including all fields?',\n    defaultMessage:\n      'Are you sure you want to delete this fieldset including all fields?',\n  },\n  deleteField: {\n    id: 'Are you sure you want to delete this field?',\n    defaultMessage: 'Are you sure you want to delete this field?',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n});\n\n/**\n * Makes a list of field types formated for select widget\n * @param {Object[]} listOfTypes array of strings\n * @param {*} intl\n * @returns {Object[]} example [['text', 'text']]\n */\nconst makeFieldTypes = (listOfTypes, intl) => {\n  const result = listOfTypes.map((type) => [type.title, type.title]);\n  return result;\n};\n\n/**\n * Makes a list of fieldset types formated for select widget\n * @param {Object[]} listOfTypes array of strings\n * @param {*} intl\n * @returns {Object[]} example [['default', 'default']]\n */\nconst makeFieldsetList = (listOfFieldsets, intl) => {\n  const result = listOfFieldsets.map((type) => [type.id, type.title]);\n  return result;\n};\n\n/**\n * schemaField used for modal form, when editing a field\n * - based on the factory a set of fields is presented\n * - fields can be moved to another fieldset\n * @param {string} factory - the kind of field\n * @param {Object} intl\n * @param {*} fieldsets\n * @return {Object} - schema\n */\nconst schemaField = (factory, intl, fieldsets) => ({\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'default',\n      fields: [\n        ...['title', 'description', 'parentFieldSet'],\n        ...((factory) => {\n          switch (factory) {\n            case 'Rich Text':\n              return ['maxLength'];\n            case 'URL':\n            case 'Password':\n            case 'Email':\n              return ['minLength', 'maxLength'];\n            case 'Integer':\n              return ['minimum', 'maximum'];\n            case 'Floating-point number':\n            case 'Date/Time':\n            case 'Date':\n            case 'File':\n            case 'File Upload':\n            case 'Image':\n            case 'Yes/No':\n            case 'JSONField':\n            case 'Relation Choice':\n            case 'Relation List':\n              return [];\n            case 'Multiple Choice':\n            case 'Choice':\n              return ['values'];\n            default:\n              return ['minLength', 'maxLength'];\n          }\n        })(factory),\n        ...['required'],\n      ],\n    },\n  ],\n  properties: {\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title),\n    },\n    description: {\n      type: 'string',\n      widget: 'textarea',\n      title: intl.formatMessage(messages.description),\n    },\n    parentFieldSet: {\n      type: 'string',\n      title: intl.formatMessage(messages.parentFieldSet),\n      choices: makeFieldsetList(fieldsets),\n    },\n    required: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.required),\n    },\n    ...((factory) => {\n      switch (factory) {\n        case 'Rich Text':\n          return {\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n        case 'URL':\n        case 'Password':\n        case 'Email':\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength),\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n        case 'Integer':\n          return {\n            minimum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minimum),\n            },\n            maximum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maximum),\n            },\n          };\n        case 'Floating-point number':\n        case 'Date/Time':\n        case 'Date':\n        case 'File':\n        case 'File Upload':\n        case 'Image':\n        case 'Yes/No':\n        case 'JSONField':\n        case 'Relation Choice':\n        case 'Relation List':\n          return {};\n        case 'Multiple Choice':\n        case 'Choice':\n          return {\n            values: {\n              type: 'string',\n              title: intl.formatMessage(messages.choices),\n              widget: 'textarea',\n            },\n          };\n        default:\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength),\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n      }\n    })(factory),\n  },\n  required: ['type', 'title'],\n});\n\n/**\n * schema for adding a new field\n * @param {Object} intl\n */\nconst fieldsetSchema = (intl) => ({\n  fieldsets: [\n    {\n      id: 'default',\n      title: intl.formatMessage(messages.default),\n      fields: ['title', 'id'],\n    },\n  ],\n  properties: {\n    id: {\n      type: 'string',\n      title: intl.formatMessage(messages.idTitle),\n      description: intl.formatMessage(messages.idDescription),\n    },\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title),\n    },\n  },\n  required: ['id', 'title'],\n});\n\n/**\n * 'plone.dexterity.schema.generated' is considered user created\n * @param {Object} field\n */\nconst isEditable = (field) =>\n  !field.behavior || field.behavior.includes('generated');\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n\n  // change background colour if dragging\n  background: isDragging ? 'white' : 'transparent',\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nconst getTabStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n});\n\nconst getFieldStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n});\n\n/**\n * will transform a string with new lines in an array for each item on a line\n * @param {string} textarea - has '\\r\\n' characters\n */\nconst formatTextareaToArray = (textarea) => {\n  const values =\n    textarea && textarea\n      ? textarea\n          .split(/(\\r\\n|\\n|\\r)/gm)\n          .map((elem) => elem.trim())\n          .filter((elem) => elem !== '')\n      : null;\n\n  return values ? { values } : {};\n};\n\nconst formatArrayToTextarea = (props) => {\n  if (props?.values) {\n    return props.values.join('\\n');\n  }\n  if (props?.choices) {\n    return props.choices.map((elem) => elem[0]).join('\\n');\n  }\n  if (props?.items?.choices) {\n    return props.items.choices.map((elem) => elem[0]).join('\\n');\n  }\n  return '';\n};\n\nconst formatTextareaToChoices = (textarea, multiple) => {\n  const choices =\n    textarea && textarea\n      ? textarea\n          .split(/(\\r\\n|\\n|\\r)/gm)\n          .map((elem) => elem.trim())\n          .filter((elem) => elem !== '')\n          .map((elem) => [elem, elem])\n      : null;\n\n  if (!multiple) {\n    return choices ? { choices } : {};\n  }\n\n  const items = choices ? { choices: choices } : {};\n  return items ? { items } : {};\n};\n\n/**\n * SchemaWidget component class.\n * @class SchemaWidget\n * @extends Component\n */\nclass SchemaWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    /**\n     * Id of the field\n     */\n    id: PropTypes.string.isRequired,\n    /**\n     * Title of the field\n     */\n    required: PropTypes.bool,\n    /**\n     * Value of the field\n     */\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * List of error messages\n     */\n    error: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * On change handler\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * Intl object\n     */\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    required: false,\n    value: {},\n    error: [],\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeDefaultValue = this.onChangeDefaultValue.bind(this);\n    this.onAddField = this.onAddField.bind(this);\n    this.onAddFieldset = this.onAddFieldset.bind(this);\n    this.onEditField = this.onEditField.bind(this);\n    this.onEditFieldset = this.onEditFieldset.bind(this);\n    this.onDeleteFieldset = this.onDeleteFieldset.bind(this);\n    this.onDeleteField = this.onDeleteField.bind(this);\n    this.onShowAddField = this.onShowAddField.bind(this);\n    this.onShowAddFieldset = this.onShowAddFieldset.bind(this);\n    this.onShowEditFieldset = this.onShowEditFieldset.bind(this);\n    this.onShowEditField = this.onShowEditField.bind(this);\n    this.onShowDeleteFieldset = this.onShowDeleteFieldset.bind(this);\n    this.onShowDeleteField = this.onShowDeleteField.bind(this);\n    this.onSetCurrentFieldset = this.onSetCurrentFieldset.bind(this);\n    this.onOrderField = this.onOrderField.bind(this);\n    this.onOrderFieldset = this.onOrderFieldset.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.state = {\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n      currentFieldset: 0,\n    };\n  }\n\n  /**\n   * Add field handler\n   * @method onAddField\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddField(values) {\n    const fieldId = values.title.trim().replace(' ', '_');\n    const currentFieldsetFields = this.props.value.fieldsets[\n      this.state.currentFieldset\n    ].fields;\n    const hasChangeNote = currentFieldsetFields.indexOf('changeNote') > -1;\n    const newFieldsetFields = hasChangeNote\n      ? [\n          ...currentFieldsetFields.slice(0, currentFieldsetFields.length - 1),\n          fieldId,\n          currentFieldsetFields[currentFieldsetFields.length - 1],\n        ]\n      : [...currentFieldsetFields, fieldId];\n\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: newFieldsetFields,\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: {\n        ...this.props.value.properties,\n        [fieldId]: {\n          title: values.title,\n          description: values.description,\n          id: fieldId,\n          ...((factory) => {\n            switch (factory) {\n              case 'Date/Time':\n                return {\n                  type: 'string',\n                  widget: 'datetime',\n                  factory,\n                };\n              case 'Date':\n                return {\n                  type: 'string',\n                  widget: 'date',\n                  factory,\n                };\n              case 'Email':\n                return {\n                  type: 'string',\n                  widget: 'email',\n                  factory,\n                };\n              case 'File':\n              case 'File Upload':\n                return {\n                  type: 'object',\n                  factory,\n                };\n              case 'Floating-point number':\n                return {\n                  type: 'number',\n                  factory,\n                };\n              case 'Integer':\n                return {\n                  type: 'integer',\n                  factory,\n                };\n              case 'Image':\n                return {\n                  type: 'object',\n                  factory,\n                };\n              case 'JSONField':\n                return {\n                  type: 'dict',\n                  widget: 'json',\n                  factory,\n                };\n              case 'Multiple Choice':\n                return {\n                  type: 'array',\n                  factory,\n                };\n              case 'Relation List':\n                return {\n                  type: 'array',\n                  factory,\n                };\n              case 'Choice':\n                return {\n                  type: 'string',\n                  choices: [],\n                  factory,\n                };\n              case 'Relation Choice':\n                return {\n                  type: 'string',\n                  factory,\n                };\n              case 'Password':\n                return {\n                  type: 'string',\n                  widget: 'password',\n                  factory,\n                };\n              case 'Rich Text':\n                return {\n                  type: 'string',\n                  widget: 'richtext',\n                  factory,\n                };\n              case 'URL':\n                return {\n                  type: 'string',\n                  widget: 'url',\n                  factory,\n                };\n              case 'Yes/No':\n                return {\n                  type: 'boolean',\n                  factory,\n                };\n              default:\n                return {\n                  type: 'string',\n                  factory,\n                };\n            }\n          })(values.factory),\n        },\n      },\n      required: values.required\n        ? [...this.props.value.required, fieldId]\n        : this.props.value.required,\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Add fieldset handler\n   * @method onAddFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddFieldset(values) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...this.props.value.fieldsets,\n        {\n          ...values,\n          fields: [],\n        },\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Edit fieldset handler\n   * @method onEditFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onEditFieldset(values) {\n    values.fields =\n      values.fields ||\n      this.props.value.fieldsets[this.state.editFieldset]?.fields ||\n      [];\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.editFieldset),\n        values,\n        ...slice(this.props.value.fieldsets, this.state.editFieldset + 1),\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Recreates the fieldset structure\n   * will move change name of the field if needed and\n   * change fieldset if changed\n   * @param {Object[]} fieldsets\n   * @param {string} parentFieldSet - id\n   * @param {number} currentFieldset - index\n   * @param {Object} oldfieldId\n   * @param {Object} newfieldId\n   * @returns {Object[]} fieldsets\n   */\n  editFieldset(\n    fieldsets,\n    parentFieldSet,\n    currentFieldset,\n    oldfieldId,\n    newfieldId,\n  ) {\n    const moveToFieldsetWithNewName = () => {\n      const newParentFieldsetIndex = fieldsets.findIndex(\n        (field) => field.id === parentFieldSet,\n      );\n      const indexOfChangeNote = fieldsets[\n        newParentFieldsetIndex\n      ].fields.indexOf('changeNote');\n      // remove from current fieldset\n      const fieldsetsWithoutField = [\n        ...slice(fieldsets, 0, currentFieldset),\n        {\n          ...fieldsets[currentFieldset],\n          fields: fieldsets[currentFieldset].fields.filter(\n            (fieldId) => fieldId !== oldfieldId,\n          ),\n        },\n        ...slice(fieldsets, currentFieldset + 1),\n      ];\n\n      const fieldsOfNewFieldset =\n        indexOfChangeNote > -1\n          ? [\n              ...fieldsetsWithoutField[newParentFieldsetIndex].fields.slice(\n                0,\n                indexOfChangeNote + 1,\n              ),\n              oldfieldId,\n              fieldsetsWithoutField[newParentFieldsetIndex].fields[\n                indexOfChangeNote\n              ],\n            ]\n          : [\n              ...fieldsetsWithoutField[newParentFieldsetIndex].fields,\n              oldfieldId,\n            ];\n\n      // add to new fieldset\n      const fieldsetsWithField = [\n        ...slice(fieldsetsWithoutField, 0, newParentFieldsetIndex),\n        {\n          ...fieldsetsWithoutField[newParentFieldsetIndex],\n          fields: fieldsOfNewFieldset,\n        },\n        ...slice(fieldsetsWithoutField, newParentFieldsetIndex + 1),\n      ];\n      return fieldsetsWithField;\n    };\n\n    const changeNameInFieldset = () => {\n      return [\n        ...slice(fieldsets, 0, currentFieldset),\n        {\n          ...fieldsets[currentFieldset],\n          fields: map(fieldsets[currentFieldset].fields, (field) =>\n            field === oldfieldId ? newfieldId : field,\n          ),\n        },\n        ...slice(fieldsets, currentFieldset + 1),\n      ];\n    };\n\n    const result =\n      parentFieldSet !== fieldsets[currentFieldset].id\n        ? moveToFieldsetWithNewName()\n        : changeNameInFieldset();\n    return result;\n  }\n\n  /**\n   * Edit field handler\n   * recreates the schema based on field changes (properties, name, fieldset)\n   * @method onEditField\n   * @param {Object} values Field values\n   * @returns {undefined}\n   */\n  onEditField(values) {\n    let formattedValues = { ...values };\n\n    const listOfProp = ['minLength', 'maxLength', 'minimum', 'maximum'];\n    listOfProp.forEach((prop) => {\n      formattedValues = {\n        ...formattedValues,\n        ...{ [prop]: values[prop] ? parseFloat(values[prop]) : null },\n      };\n    });\n\n    const multiple =\n      this.props.value.properties[this.state.editField.id]?.factory ===\n      'Multiple Choice';\n    const result = {\n      ...this.props.value,\n      fieldsets: formattedValues.parentFieldSet\n        ? this.editFieldset(\n            this.props.value.fieldsets,\n            formattedValues.parentFieldSet,\n            this.state.currentFieldset,\n            this.state.editField.id,\n            formattedValues.id,\n          )\n        : this.props.value.fieldsets,\n      properties: {\n        ...omit(this.props.value.properties, [this.state.editField.id]),\n        [formattedValues.id]: {\n          ...this.props.value.properties[this.state.editField.id],\n          ...omit(formattedValues, ['id', 'parentFieldSet']),\n          ...formatTextareaToArray(formattedValues.values),\n          ...formatTextareaToChoices(formattedValues.values, multiple),\n        },\n      },\n      required: formattedValues.required\n        ? concat(without(this.props.value.required, this.state.editField.id), [\n            formattedValues.id,\n          ])\n        : without(this.props.value.required, this.state.editField.id),\n    };\n\n    this.onChange(result);\n\n    this.onCancel();\n  }\n\n  /**\n   * Delete fieldset handler\n   * @method onDeleteFieldset\n   * @returns {undefined}\n   */\n  onDeleteFieldset() {\n    if (this.state.currentFieldset > this.props.value.fieldsets.length - 2) {\n      this.setState({\n        currentFieldset: this.state.currentFieldset - 1,\n      });\n    }\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.deleteFieldset),\n        ...slice(this.props.value.fieldsets, this.state.deleteFieldset + 1),\n      ],\n      properties: omit(\n        this.props.value.properties,\n        this.props.value.fieldsets[this.state.deleteFieldset].fields,\n      ),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Delete field handler\n   * @method onDeleteField\n   * @returns {undefined}\n   */\n  onDeleteField() {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: without(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            this.state.deleteField,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: omit(this.props.value.properties, [this.state.deleteField]),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {Object} value New schema\n   * @returns {undefined}\n   */\n  onChange(value) {\n    this.props.onChange(this.props.id, value);\n  }\n\n  /**\n   * Change default value handler\n   * @method onChangeDefaultValue\n   * @param {string} fieldId\n   * @param {string} fieldValue\n   */\n  onChangeDefaultValue(fieldId, fieldValue) {\n    // Default values can have irreversible consequence, thus skip it for now.\n    // const value = { default: fieldValue }\n    const value = {};\n\n    const fieldMerge = {\n      ...this.props.value.properties[fieldId],\n      ...value,\n    };\n    const propsMerge = {\n      ...this.props.value.properties,\n      ...{ [fieldId]: fieldMerge },\n    };\n\n    this.onChange({\n      ...this.props.value,\n      properties: propsMerge,\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.setState({\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n    });\n  }\n\n  /**\n   * Show add field handler\n   * @method onShowAddField\n   * @returns {undefined}\n   */\n  onShowAddField(event) {\n    this.setState({\n      addField: true,\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show add fieldset handler\n   * @method onShowAddFieldset\n   * @returns {undefined}\n   */\n  onShowAddFieldset(event) {\n    this.setState({\n      addFieldset: true,\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show edit fieldset handler\n   * @method onShowEditFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onShowEditFieldset(index) {\n    this.setState({\n      editFieldset: index,\n    });\n  }\n\n  /**\n   * Show edit field handler\n   * @method onShowEditField\n   * @param {string} id Id of field\n   * @param {Object} schema Schema of the field\n   * @returns {undefined}\n   */\n  onShowEditField(id, schema) {\n    return this.setState({\n      editField: {\n        id,\n      },\n    });\n  }\n\n  /**\n   * Show delete fieldset handler\n   * @method onShowDeleteFieldset\n   * @param {Number} index Index of fieldset\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteFieldset(index) {\n    this.setState({\n      deleteFieldset: index,\n    });\n  }\n\n  /**\n   * Show delete field handler\n   * @method onShowDeleteField\n   * @param {String} field Field to delete\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteField(field) {\n    this.setState({\n      deleteField: field,\n    });\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onSetCurrentFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onSetCurrentFieldset(index) {\n    this.setState({\n      currentFieldset: index,\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderField\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderField(index, delta) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: move(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            index,\n            delta,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderFieldset\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderFieldset(index, delta) {\n    const schema = {\n      ...this.props.value,\n      fieldsets: move(this.props.value.fieldsets, index, delta),\n    };\n    this.setState({\n      currentFieldset: findIndex(schema.fieldsets, {\n        id: schema.fieldsets[this.state.currentFieldset].id,\n      }),\n    });\n    this.onChange(schema);\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onDragEnd\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onDragEnd(result) {\n    if (\n      result.destination &&\n      result.destination.droppableId === 'fields-schema-edit'\n    ) {\n      this.onOrderField(result.source.index, result.destination.index);\n    }\n    if (\n      result.destination &&\n      result.destination.droppableId === 'tabs-schema-edit'\n    ) {\n      this.onOrderFieldset(result.source.index, result.destination.index);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { error } = this.props;\n    if (!this.props.value) {\n      return '';\n    }\n    const vocabularyFields = getFieldsVocabulary();\n    const nonUserCreatedFields = this.props.value.fieldsets[\n      this.state.currentFieldset\n    ].fields.filter(\n      (fieldId) =>\n        !isEditable(this.props.value.properties[fieldId]) &&\n        fieldId !== 'changeNote',\n    );\n    const hasChangeNote =\n      this.props.value.fieldsets[this.state.currentFieldset].fields.indexOf(\n        'changeNote',\n      ) > -1;\n    const userCreatedFieldsStartingIndex = nonUserCreatedFields.length;\n    const lastUserCreatedFieldsIndex = hasChangeNote\n      ? this.props.value.fieldsets[this.state.currentFieldset].fields.length - 1\n      : this.props.value.fieldsets[this.state.currentFieldset].fields.length;\n    // fields that were not created by the user, but are part of a behaviour\n    const makeNonUserFields = () =>\n      map(\n        this.props.value.fieldsets[this.state.currentFieldset].fields.slice(\n          0,\n          userCreatedFieldsStartingIndex,\n        ),\n        (field, index) => (\n          <div\n            style={{ background: '#c7d5d859' }}\n            key={`${field}-${this.state.currentFieldset}-${index}`}\n          >\n            <Field\n              {...this.props.value.properties[field]}\n              id={field}\n              required={this.props.value.required.indexOf(field) !== -1}\n              onEdit={this.onShowEditField}\n              draggable={false}\n              isDisabled={true}\n              order={index}\n              vocabularyFields={vocabularyFields}\n              onDelete={this.onShowDeleteField}\n              onChange={this.onChangeDefaultValue}\n              value={this.props.value.properties[field].default}\n            />\n          </div>\n        ),\n      );\n    // fields created by the user\n    const makeUserFields = () =>\n      map(\n        this.props.value.fieldsets[this.state.currentFieldset].fields.slice(\n          userCreatedFieldsStartingIndex,\n          lastUserCreatedFieldsIndex,\n        ),\n        (field, index) => (\n          <Draggable\n            draggableId={field}\n            index={userCreatedFieldsStartingIndex + index}\n            key={`${field}-${this.state.currentFieldset}-${index}`}\n          >\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.draggableProps.style,\n                )}\n              >\n                <Field\n                  {...this.props.value.properties[field]}\n                  id={field}\n                  required={this.props.value.required.indexOf(field) !== -1}\n                  onEdit={this.onShowEditField}\n                  draggable={true}\n                  isDisabled={false}\n                  order={index}\n                  onDelete={this.onShowDeleteField}\n                  onChange={this.onChangeDefaultValue}\n                  key={`${field}-${this.state.currentFieldset}-${index}`}\n                  value={this.props.value.properties[field].default}\n                />\n              </div>\n            )}\n          </Draggable>\n        ),\n      );\n\n    const canAddFields =\n      this.state.currentFieldset === 0 ||\n      !this.props.value.fieldsets[this.state.currentFieldset].behavior ||\n      this.props.value.fieldsets[this.state.currentFieldset].behavior.includes(\n        'generated',\n      );\n\n    return (\n      <div>\n        <Segment.Group\n          style={{\n            margin: '-1rem',\n          }}\n        >\n          {error.length > 0 &&\n            map(error, (err, index) => (\n              <Message\n                icon=\"warning\"\n                key={`${err}-${index}`}\n                negative\n                attached\n                header={this.props.intl.formatMessage(messages.error)}\n                content={err}\n              />\n            ))}\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"tabs-schema-edit\" direction=\"horizontal\">\n              {(provided, snapshot) => (\n                <div\n                  role=\"tablist\"\n                  className=\"ui pointing secondary attached tabular menu\"\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  style={getTabStyle(snapshot.isDraggingOver)}\n                >\n                  {map(this.props.value.fieldsets, (fieldset, index) => (\n                    <SchemaWidgetFieldset\n                      key={`${fieldset.id}-${this.state.currentFieldset}-${index}`}\n                      title={fieldset.title}\n                      order={index}\n                      active={index === this.state.currentFieldset}\n                      onClick={this.onSetCurrentFieldset}\n                      onShowEditFieldset={this.onShowEditFieldset}\n                      onShowDeleteFieldset={this.onShowDeleteFieldset}\n                      onOrderFieldset={this.onOrderFieldset}\n                      getItemStyle={getItemStyle}\n                      isDraggable={true}\n                      isDisabled={\n                        fieldset.behavior\n                          ? !fieldset.behavior.includes('generated')\n                          : false\n                      }\n                    />\n                  ))}\n                  <div className=\"item item-add\">\n                    <button\n                      aria-label={this.props.intl.formatMessage(messages.add)}\n                      className=\"item ui noborder button\"\n                      onClick={this.onShowAddFieldset}\n                    >\n                      <Icon name=\"plus\" size=\"large\" />\n                    </button>\n                  </div>\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n\n            {makeNonUserFields()}\n\n            <Droppable\n              droppableId=\"fields-schema-edit\"\n              direction=\"vertical\"\n              type=\"fixed\"\n            >\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  style={getFieldStyle(snapshot.isDraggingOver)}\n                >\n                  {makeUserFields()}\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n\n          {hasChangeNote ? (\n            <div style={{ background: '#c7d5d859' }}>\n              <Field\n                {...this.props.value.properties.changeNote}\n                id={'changeNote'}\n                required={\n                  this.props.value.required.indexOf('changeNote') !== -1\n                }\n                onEdit={this.onShowEditField}\n                draggable={false}\n                isDisabled={true}\n                order={\n                  this.props.value.fieldsets[this.state.currentFieldset]\n                    .length - 1\n                }\n                onDelete={this.onShowDeleteField}\n                onChange={this.onChangeDefaultValue}\n                key={'changeNote'}\n                value={this.props.value.properties.changeNote.default}\n              />\n            </div>\n          ) : null}\n\n          {canAddFields && (\n            <Form.Field inline>\n              <Grid>\n                <Grid.Row stretched>\n                  <Grid.Column width=\"12\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"addfield\">\n                        {this.props.intl.formatMessage(messages.addField)}\n                      </label>\n                    </div>\n                    <div className=\"toolbar\">\n                      <button\n                        aria-label={this.props.intl.formatMessage(messages.add)}\n                        id=\"addfield\"\n                        className=\"item ui noborder button\"\n                        onClick={this.onShowAddField}\n                      >\n                        <Icon name=\"plus\" color=\"blue\" size=\"large\" />\n                      </button>\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          )}\n        </Segment.Group>\n        {this.state.addField !== null && (\n          <ModalForm\n            onSubmit={this.onAddField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addField)}\n            formData={{\n              type: '',\n              id: '',\n              title: '',\n            }}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: ['factory', 'title', 'description', 'required'],\n                },\n              ],\n              properties: {\n                factory: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.type),\n                  choices: makeFieldTypes(vocabularyFields?.items),\n                },\n                title: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.title),\n                },\n                description: {\n                  type: 'string',\n                  widget: 'textarea',\n                  title: this.props.intl.formatMessage(messages.description),\n                },\n                required: {\n                  type: 'boolean',\n                  title: this.props.intl.formatMessage(messages.required),\n                },\n              },\n              required: ['type', 'title'],\n            }}\n          />\n        )}\n        {this.state.editField !== null && (\n          <ModalForm\n            onSubmit={this.onEditField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editField)}\n            formData={{\n              ...this.props.value.properties[this.state.editField.id],\n              id: this.state.editField.id,\n              required:\n                this.props.value.required.indexOf(this.state.editField.id) !==\n                -1,\n              parentFieldSet: this.props.value.fieldsets[\n                this.state.currentFieldset\n              ].id,\n              values: formatArrayToTextarea(\n                this.props.value.properties[this.state.editField.id],\n              ),\n            }}\n            schema={schemaField(\n              this.props.value.properties[this.state.editField.id].factory,\n              this.props.intl,\n              this.props.value.fieldsets.filter(\n                (fieldset) =>\n                  !fieldset.behavior ||\n                  fieldset.id === 'default' ||\n                  fieldset.behavior.includes('generated'),\n              ),\n            )}\n          />\n        )}\n        {this.state.addFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onAddFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addFieldset)}\n            formData={{\n              id: '',\n              title: '',\n            }}\n            schema={fieldsetSchema(this.props.intl)}\n          />\n        )}\n        {this.state.editFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onEditFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editFieldset)}\n            formData={{\n              id: this.props.value.fieldsets[this.state.editFieldset].id,\n              title: this.props.value.fieldsets[this.state.editFieldset].title,\n            }}\n            schema={fieldsetSchema(this.props.intl)}\n          />\n        )}\n        {this.state.deleteFieldset !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteFieldset)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteFieldset}\n          />\n        )}\n        {this.state.deleteField !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteField)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteField}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      value: isString(props.value) ? JSON.parse(props.value) : props.value,\n    }),\n    {},\n  ),\n)(SchemaWidget);\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/**\n * Schema widget fieldset.\n * @module components/manage/Widgets/SchemaWidgetFieldset\n */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { Icon } from 'semantic-ui-react';\n\n/**\n * Schema widget fieldset component.\n * @function SchemaWidgetFieldset\n * @returns {string} Markup of the component.\n */\nexport const SchemaWidgetFieldsetComponent = ({\n  // isDragging,\n  title,\n  order,\n  active,\n  onShowEditFieldset,\n  onShowDeleteFieldset,\n  onClick,\n  getItemStyle,\n  isDraggable,\n  isDisabled,\n}) => (\n  <Draggable draggableId={title} index={order} key={title}>\n    {(provided, snapshot) => (\n      <div\n        className={`item${active ? ' active' : ''}`}\n        onClick={() => onClick(order)}\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n      >\n        {isDraggable && (\n          <i\n            aria-hidden=\"true\"\n            className=\"grey bars icon drag handle\"\n            {...provided.dragHandleProps}\n          />\n        )}\n        {title}\n        {!isDisabled && (\n          <button\n            className=\"item ui noborder button\"\n            onClick={(event) => {\n              event.stopPropagation();\n              event.preventDefault();\n              onShowEditFieldset(order);\n            }}\n          >\n            <Icon name=\"write square\" size=\"large\" color=\"blue\" />\n          </button>\n        )}\n\n        {!isDisabled && (\n          <button\n            className=\"item ui noborder button\"\n            onClick={(event) => {\n              event.stopPropagation();\n              event.preventDefault();\n              onShowDeleteFieldset(order);\n            }}\n          >\n            <Icon name=\"close\" size=\"large\" color=\"red\" />\n          </button>\n        )}\n      </div>\n    )}\n  </Draggable>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSchemaWidgetFieldsetComponent.propTypes = {\n  order: PropTypes.number.isRequired,\n  active: PropTypes.bool.isRequired,\n  onOrderFieldset: PropTypes.func.isRequired,\n  onShowEditFieldset: PropTypes.func.isRequired,\n  onShowDeleteFieldset: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n  getItemStyle: PropTypes.func.isRequired,\n  isDraggable: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n};\n\nexport default SchemaWidgetFieldsetComponent;\n","import React from 'react';\nimport loadable from '@loadable/component';\n\nimport { Icon } from '@plone/volto/components';\n\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\n\nconst ReactSelect = loadable.lib(() => import('react-select'));\n\nexport const Option = (props) => {\n  return (\n    <ReactSelect>\n      {({ components }) => (\n        <components.Option {...props}>\n          <div>{props.label}</div>\n          {props.isFocused && !props.isSelected && (\n            <Icon name={checkSVG} size=\"24px\" color=\"#b8c6c8\" />\n          )}\n          {props.isSelected && (\n            <Icon name={checkSVG} size=\"24px\" color=\"#007bc1\" />\n          )}\n        </components.Option>\n      )}\n    </ReactSelect>\n  );\n};\n\nexport const DropdownIndicator = (props) => {\n  return (\n    <ReactSelect>\n      {({ components }) => (\n        <components.DropdownIndicator {...props}>\n          {props.selectProps.menuIsOpen ? (\n            <Icon name={upSVG} size=\"24px\" color=\"#007bc1\" />\n          ) : (\n            <Icon name={downSVG} size=\"24px\" color=\"#007bc1\" />\n          )}\n        </components.DropdownIndicator>\n      )}\n    </ReactSelect>\n  );\n};\n\nexport const Group = (props) => {\n  return (\n    <ReactSelect>\n      {({ components }) => <components.Group {...props}></components.Group>}\n    </ReactSelect>\n  );\n};\n\nexport const selectTheme = (theme) => ({\n  ...theme,\n  borderRadius: 0,\n  colors: {\n    ...theme.colors,\n    primary25: 'hotpink',\n    primary: '#b8c6c8',\n  },\n});\n\nexport const customSelectStyles = {\n  control: (styles, state) => ({\n    ...styles,\n    border: 'none',\n    borderBottom: '1px solid #c7d5d8',\n    boxShadow: 'none',\n    borderBottomStyle: state.menuIsOpen ? 'dotted' : 'solid',\n    minHeight: '60px',\n  }),\n  menu: (styles, state) => ({\n    ...styles,\n    top: null,\n    marginTop: 0,\n    boxShadow: 'none',\n    borderBottom: '1px solid #c7d5d8',\n    zIndex: 2,\n  }),\n  indicatorSeparator: (styles) => ({\n    ...styles,\n    width: null,\n  }),\n  valueContainer: (styles) => ({\n    ...styles,\n    paddingLeft: 0,\n  }),\n  dropdownIndicator: (styles) => ({\n    paddingRight: 0,\n  }),\n  option: (styles, state) => ({\n    ...styles,\n    backgroundColor: null,\n    minHeight: '50px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '12px 12px',\n    color: state.isSelected\n      ? '#007bc1'\n      : state.isFocused\n      ? '#4a4a4a'\n      : 'inherit',\n    ':active': {\n      backgroundColor: null,\n    },\n    svg: {\n      flex: '0 0 auto',\n    },\n  }),\n};\n","/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { map, find, isBoolean, isObject, intersection, isArray } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\n\nimport {\n  getBoolean,\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\n\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nconst Select = loadable(() => import('react-select'));\nconst AsyncPaginate = loadable(() => import('react-select-async-paginate'));\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  close: {\n    id: 'Close',\n    defaultMessage: 'Close',\n  },\n  choices: {\n    id: 'Choices',\n    defaultMessage: 'Choices',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\nfunction getDefaultValues(choices, value) {\n  if (!isObject(value) && isBoolean(value)) {\n    // We have a boolean value, which means we need to provide a \"No value\"\n    // option\n    const label = find(choices, (o) => getBoolean(o[0]) === value);\n    return label\n      ? {\n          label: label[1],\n          value,\n        }\n      : {};\n  }\n  if (!value || value.length === 0) return null;\n  if (value === 'no-value') {\n    return {\n      label: this.props.intl.formatMessage(messages.no_value),\n      value: 'no-value',\n    };\n  }\n  if (isObject(value)) {\n    return {\n      label: value.title !== 'None' && value.title ? value.title : value.token,\n      value: value.token,\n    };\n  }\n  if (isArray(value) && choices.length > 0) {\n    return value.map((v) => ({\n      label: find(choices, (o) => o[0] === v)?.[1] || v,\n      value: v,\n    }));\n  } else if (value && choices.length > 0) {\n    return { label: find(choices, (o) => o[0] === value)?.[1] || value, value };\n  } else {\n    return [];\n  }\n}\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nclass SelectWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    getVocabularyTokenTitle: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    loading: PropTypes.bool,\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    itemsTotal: PropTypes.number,\n    wrapped: PropTypes.bool,\n    noValueOption: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    loading: false,\n    value: null,\n    onChange: () => {},\n    onBlur: () => {},\n    onClick: () => {},\n    onEdit: null,\n    onDelete: null,\n    noValueOption: true,\n  };\n\n  state = {\n    selectedOption: this.props.value\n      ? { label: this.props.value.title, value: this.props.value.value }\n      : {},\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.choices && this.props.vocabBaseUrl) {\n      this.props.getVocabulary(this.props.vocabBaseUrl);\n    }\n  }\n\n  /**\n   * Initiate search with new query\n   * @method loadOptions\n   * @param {string} search Search query.\n   * @param {string} previousOptions The previous options rendered.\n   * @param {string} additional Additional arguments to pass to the next loadOptions.\n   * @returns {undefined}\n   */\n  loadOptions = (search, previousOptions, additional) => {\n    let hasMore = this.props.itemsTotal > previousOptions.length;\n    if (hasMore) {\n      const offset = this.state.search !== search ? 0 : additional.offset;\n      this.props.getVocabulary(this.props.vocabBaseUrl, search, offset);\n      this.setState({ search });\n\n      return {\n        options:\n          intersection(previousOptions, this.props.choices).length ===\n          this.props.choices.length\n            ? []\n            : this.props.choices,\n        hasMore: hasMore,\n        additional: {\n          offset: offset === additional.offset ? offset + 25 : offset,\n        },\n      };\n    }\n    return null;\n  };\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    this.props.onChange(this.props.id, selectedOption.value);\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { id, choices, value, onChange } = this.props;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        {this.props.vocabBaseUrl ? (\n          <>\n            <AsyncPaginate\n              isDisabled={this.props.isDisabled}\n              className=\"react-select-container\"\n              classNamePrefix=\"react-select\"\n              options={this.props.choices || []}\n              styles={customSelectStyles}\n              theme={selectTheme}\n              components={{ DropdownIndicator, Option }}\n              value={this.state.selectedOption}\n              loadOptions={this.loadOptions}\n              onChange={this.handleChange}\n              additional={{\n                offset: 25,\n              }}\n              placeholder={this.props.intl.formatMessage(messages.select)}\n              noOptionsMessage={() =>\n                this.props.intl.formatMessage(messages.no_options)\n              }\n            />\n          </>\n        ) : (\n          <Select\n            id={`field-${id}`}\n            key={this.props.choices}\n            name={id}\n            isDisabled={this.props.isDisabled}\n            className=\"react-select-container\"\n            classNamePrefix=\"react-select\"\n            isMulti={\n              this.props.isMulti\n                ? this.props.isMulti\n                : id === 'roles' || id === 'groups'\n            }\n            options={[\n              ...map(choices, (option) => ({\n                value: option[0],\n                label:\n                  // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n                  option[1] !== 'None' && option[1] ? option[1] : option[0],\n              })),\n              ...(this.props.noValueOption\n                ? [\n                    {\n                      label: this.props.intl.formatMessage(messages.no_value),\n                      value: 'no-value',\n                    },\n                  ]\n                : []),\n            ]}\n            styles={customSelectStyles}\n            theme={selectTheme}\n            components={{ DropdownIndicator, Option }}\n            defaultValue={getDefaultValues(choices, value)}\n            onChange={(data) => {\n              let dataValue = [];\n              if (Array.isArray(data)) {\n                for (let obj of data) {\n                  dataValue.push(obj.value);\n                }\n                return onChange(id, dataValue);\n              }\n              return onChange(\n                id,\n                data && data.value !== 'no-value' ? data.value : undefined,\n              );\n            }}\n          />\n        )}\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => {\n      const vocabBaseUrl = !props.choices\n        ? getVocabFromHint(props) ||\n          getVocabFromField(props) ||\n          getVocabFromItems(props)\n        : '';\n      const vocabState = state.vocabularies[vocabBaseUrl];\n\n      // If the schema already has the choices in it, then do not try to get the vocab,\n      // even if there is one\n      if (props.choices) {\n        return {\n          choices: props.choices,\n        };\n      } else if (vocabState) {\n        return {\n          vocabBaseUrl,\n          vocabState,\n          choices: vocabState.items,\n          itemsTotal: vocabState.itemsTotal,\n          loading: Boolean(vocabState.loading),\n        };\n        // There is a moment that vocabState is not there yet, so we need to pass the\n        // vocabBaseUrl to the component.\n      } else if (vocabBaseUrl) {\n        return {\n          vocabBaseUrl,\n        };\n      }\n      return {};\n    },\n    { getVocabulary, getVocabularyTokenTitle },\n  ),\n)(SelectWidget);\n","/**\n * TextWidget component.\n * @module components/manage/Widgets/TextWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\n\nimport { injectIntl } from 'react-intl';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\n\n/**\n * TextWidget component class.\n * @class TextWidget\n * @extends Component\n */\nclass TextWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    value: PropTypes.string,\n    focus: PropTypes.bool,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    icon: PropTypes.shape({\n      xmlns: PropTypes.string,\n      viewBox: PropTypes.string,\n      content: PropTypes.string,\n    }),\n    iconAction: PropTypes.func,\n    minLength: PropTypes.number,\n    maxLength: PropTypes.number,\n    wrapped: PropTypes.bool,\n    placeholder: PropTypes.string,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    error: [],\n    value: null,\n    onChange: () => {},\n    onBlur: () => {},\n    onClick: () => {},\n    onEdit: null,\n    onDelete: null,\n    focus: false,\n    icon: null,\n    iconAction: null,\n    minLength: null,\n    maxLength: null,\n  };\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.focus) {\n      this.node.focus();\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      value,\n      onChange,\n      onBlur,\n      onClick,\n      icon,\n      iconAction,\n      minLength,\n      maxLength,\n      placeholder,\n    } = this.props;\n\n    return (\n      <FormFieldWrapper {...this.props} className=\"text\">\n        <Input\n          id={`field-${id}`}\n          name={id}\n          value={value || ''}\n          disabled={this.props.isDisabled}\n          icon={icon || null}\n          placeholder={placeholder}\n          onChange={({ target }) =>\n            onChange(id, target.value === '' ? undefined : target.value)\n          }\n          ref={(node) => {\n            this.node = node;\n          }}\n          onBlur={({ target }) =>\n            onBlur(id, target.value === '' ? undefined : target.value)\n          }\n          onClick={() => onClick()}\n          minLength={minLength || null}\n          maxLength={maxLength || null}\n        />\n        {icon && iconAction && (\n          <button className={`field-${id}-action-button`} onClick={iconAction}>\n            <Icon name={icon} size=\"18px\" />\n          </button>\n        )}\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default injectIntl(TextWidget);\n","/**\n * TextareaWidget component.\n * @module components/manage/Widgets/TextareaWidget\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, TextArea } from 'semantic-ui-react';\n\nimport { injectIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\n\n/**\n * TextareaWidget component class.\n * @function TextareaWidget\n * @returns {string} Markup of the component.\n */\nconst TextareaWidget = (props) => {\n  const { id, maxLength, value, onChange, placeholder } = props;\n  const [lengthError, setlengthError] = useState('');\n\n  const onhandleChange = (id, value) => {\n    if (maxLength & value?.length) {\n      let remlength = maxLength - value.length;\n      if (remlength < 0) {\n        setlengthError(`You have exceed word limit by ${Math.abs(remlength)}`);\n      } else {\n        setlengthError('');\n      }\n    }\n    onChange(id, value);\n  };\n\n  return (\n    <FormFieldWrapper {...props} className=\"textarea\">\n      <TextArea\n        id={`field-${id}`}\n        name={id}\n        value={value || ''}\n        disabled={props.isDisabled}\n        placeholder={placeholder}\n        onChange={({ target }) =>\n          onhandleChange(id, target.value === '' ? undefined : target.value)\n        }\n      />\n      {lengthError.length > 0 && (\n        <Label key={lengthError} basic color=\"red\" pointing>\n          {lengthError}\n        </Label>\n      )}\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTextareaWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  maxLength: PropTypes.number,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  placeholder: PropTypes.string,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nTextareaWidget.defaultProps = {\n  description: null,\n  maxLength: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: null,\n  onEdit: null,\n  onDelete: null,\n};\n\nexport default injectIntl(TextareaWidget);\n","/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport loadable from '@loadable/component';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { getVocabulary } from '@plone/volto/actions';\n\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\n\nconst AsyncCreatable = loadable.lib(() =>\n  import('react-select/async-creatable'),\n);\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\n/**\n * TokenWidget component class.\n * @class TokenWidget\n * @extends Component\n */\nclass TokenWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(PropTypes.object),\n    loading: PropTypes.bool,\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func.isRequired,\n    itemsTotal: PropTypes.number,\n    wrapped: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    loading: false,\n    value: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.search = this.search.bind(this);\n    this.loadOptions = this.loadOptions.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.vocabBaseUrl =\n      getVocabFromHint(props) ||\n      getVocabFromField(props) ||\n      getVocabFromItems(props);\n    this.state = {\n      selectedOption: props.value\n        ? props.value.map((item) => ({ label: item, value: item }))\n        : [],\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getVocabulary(this.vocabBaseUrl);\n  }\n\n  /**\n   * Initiate search with new query\n   * @param {string} query Search query.\n   * @returns {undefined}\n   */\n  search(query) {\n    if (query.length > 1) {\n      this.props.getVocabulary(this.vocabBaseUrl, query);\n    }\n  }\n\n  /**\n   * Load options from the vocabulary endpoint\n   * @method loadOptions\n   * @param {string} search Search query.\n   * @param {string} previousOptions The previous options rendered.\n   * @param {string} additional Additional arguments to pass to the next loadOptions.\n   * @returns {undefined}\n   */\n  loadOptions(search) {\n    return this.props.getVocabulary(this.vocabBaseUrl, search).then((resolve) =>\n      this.props.choices.map((item) => ({\n        label: item.value,\n        value: item.value,\n      })),\n    );\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.setState({ selectedOption });\n    this.props.onChange(\n      this.props.id,\n      selectedOption ? selectedOption.map((item) => item.value) : null,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { selectedOption } = this.state;\n    return (\n      <FormFieldWrapper {...this.props}>\n        <AsyncCreatable>\n          {({ default: AsyncCreatableSelect }) => (\n            <AsyncCreatableSelect\n              isDisabled={this.props.isDisabled}\n              className=\"react-select-container\"\n              classNamePrefix=\"react-select\"\n              defaultOptions={this.props.choices || []}\n              styles={customSelectStyles}\n              theme={selectTheme}\n              components={{ DropdownIndicator, Option }}\n              isMulti\n              value={selectedOption || []}\n              loadOptions={this.loadOptions}\n              onChange={this.handleChange}\n              placeholder={this.props.intl.formatMessage(messages.select)}\n              noOptionsMessage={() =>\n                this.props.intl.formatMessage(messages.no_options)\n              }\n            />\n          )}\n        </AsyncCreatable>\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => {\n      const vocabBaseUrl =\n        getVocabFromHint(props) ||\n        getVocabFromField(props) ||\n        getVocabFromItems(props);\n      const vocabState = state.vocabularies[vocabBaseUrl];\n      if (vocabState) {\n        return {\n          choices: vocabState.items\n            ? vocabState.items.map((item) => ({\n                label: item.value,\n                value: item.value,\n              }))\n            : [],\n          itemsTotal: vocabState.itemsTotal,\n          loading: Boolean(vocabState.loading),\n        };\n      }\n      return {};\n    },\n    { getVocabulary },\n  ),\n)(TokenWidget);\n","/**\n * UrlWidget component.\n * @module components/manage/Widgets/UrlWidget\n */\n\nimport React, { useState } from 'react';\nimport { compose } from 'redux';\nimport PropTypes from 'prop-types';\nimport { Input, Button } from 'semantic-ui-react';\nimport { FormFieldWrapper, Icon } from '@plone/volto/components';\nimport {\n  addAppURL,\n  isInternalURL,\n  flattenToAppURL,\n} from '@plone/volto/helpers';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\nimport URLUtils from '@plone/volto/components/manage/AnchorPlugin/utils/URLUtils';\n\n/** UrlWidget function component\n * @function UrlWidget\n * @returns {string} Markup of the component\n */\nconst UrlWidget = (props) => {\n  const { id, onChange, onBlur, onClick, minLength, maxLength } = props;\n  const inputId = `field-${id}`;\n\n  const [value, setValue] = useState(props.value);\n  const [isInvalid, setIsInvalid] = useState(false);\n  /**\n   * Clear handler\n   * @method clear\n   * @param {Object} value Value\n   * @returns {undefined}\n   */\n  const clear = () => {\n    setValue('');\n    onChange(id, undefined);\n  };\n\n  const onChangeValue = (_value) => {\n    let newValue = _value;\n    if (newValue?.length > 0) {\n      if (isInvalid && URLUtils.isUrl(URLUtils.normalizeUrl(newValue))) {\n        setIsInvalid(false);\n      }\n\n      if (isInternalURL(newValue)) {\n        newValue = flattenToAppURL(newValue);\n      }\n    }\n\n    setValue(newValue);\n\n    newValue = isInternalURL(newValue) ? addAppURL(newValue) : newValue;\n\n    if (!isInternalURL(newValue) && newValue.length > 0) {\n      if (URLUtils.isMail(URLUtils.normaliseMail(newValue))) {\n        newValue = URLUtils.normaliseMail(newValue);\n      } else if (URLUtils.isTelephone(newValue)) {\n        newValue = URLUtils.normalizeTelephone(newValue);\n      } else {\n        newValue = URLUtils.normalizeUrl(newValue);\n        if (!URLUtils.isUrl(newValue)) {\n          setIsInvalid(true);\n        }\n      }\n    }\n\n    onChange(id, newValue === '' ? undefined : newValue);\n  };\n\n  return (\n    <FormFieldWrapper {...props} className=\"url wide\">\n      <div className=\"wrapper\">\n        <Input\n          id={inputId}\n          name={id}\n          type=\"url\"\n          value={value || ''}\n          onChange={({ target }) => onChangeValue(target.value)}\n          onBlur={({ target }) =>\n            onBlur(id, target.value === '' ? undefined : target.value)\n          }\n          onClick={() => onClick()}\n          minLength={minLength || null}\n          maxLength={maxLength || null}\n          error={isInvalid}\n        />\n        {value?.length > 0 ? (\n          <Button.Group>\n            <Button\n              basic\n              className=\"cancel\"\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                clear();\n              }}\n            >\n              <Icon name={clearSVG} size=\"30px\" />\n            </Button>\n          </Button.Group>\n        ) : (\n          <Button.Group>\n            <Button\n              basic\n              icon\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                props.openObjectBrowser({\n                  mode: 'link',\n                  overlay: true,\n                  onSelectItem: (url) => {\n                    onChangeValue(url);\n                  },\n                });\n              }}\n            >\n              <Icon name={navTreeSVG} size=\"24px\" />\n            </Button>\n          </Button.Group>\n        )}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types\n * @property {Object} propTypes Property types.\n * @static\n */\nUrlWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  minLength: PropTypes.number,\n  maxLength: PropTypes.number,\n  openObjectBrowser: PropTypes.func.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nUrlWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  minLength: null,\n  maxLength: null,\n};\n\nexport default compose(withObjectBrowser)(UrlWidget);\n","/**\n * WysiwygWidget container.\n * @module components/manage/WysiwygWidget/WysiwygWidget\n */\n\nimport React, { Component } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Editor from 'draft-js-plugins-editor';\nimport { stateFromHTML } from 'draft-js-import-html';\nimport { convertToRaw, EditorState } from 'draft-js';\nimport redraft from 'redraft';\nimport { Form, Label, TextArea } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport createInlineToolbarPlugin from 'draft-js-inline-toolbar-plugin';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport configureStore from 'redux-mock-store';\nimport { MemoryRouter } from 'react-router-dom';\nimport config from '@plone/volto/registry';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n});\n\n/**\n * WysiwygWidget container class.\n * @class WysiwygWidget\n * @extends Component\n */\nclass WysiwygWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    /**\n     * Id of the field\n     */\n    id: PropTypes.string.isRequired,\n    /**\n     * Title of the field\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Description of the field\n     */\n    description: PropTypes.string,\n    /**\n     * True if field is required\n     */\n    required: PropTypes.bool,\n    /**\n     * Value of the field\n     */\n    value: PropTypes.shape({\n      /**\n       * Content type of the value\n       */\n      'content-type': PropTypes.string,\n      /**\n       * Data of the value\n       */\n      data: PropTypes.string,\n      /**\n       * Encoding of the value\n       */\n      encoding: PropTypes.string,\n    }),\n    /**\n     * List of error messages\n     */\n    error: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * On change handler\n     */\n    onChange: PropTypes.func,\n    /**\n     * On delete handler\n     */\n    onDelete: PropTypes.func,\n    /**\n     * On edit handler\n     */\n    onEdit: PropTypes.func,\n    /**\n     * Wrapped form component\n     */\n    wrapped: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    value: {\n      'content-type': 'text/html',\n      data: '',\n      encoding: 'utf8',\n    },\n    error: [],\n    onEdit: null,\n    onDelete: null,\n    onChange: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygWidget\n   */\n  constructor(props) {\n    super(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.value && props.value.data) {\n        const contentState = stateFromHTML(props.value.data, {\n          customBlockFn: config.settings.FromHTMLCustomBlockFn,\n        });\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: config.settings.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = { editorState, inlineToolbarPlugin };\n    }\n\n    this.schema = {\n      fieldsets: [\n        {\n          id: 'default',\n          title: props.intl.formatMessage(messages.default),\n          fields: ['title', 'id', 'description', 'required'],\n        },\n      ],\n      properties: {\n        id: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.idTitle),\n          description: props.intl.formatMessage(messages.idDescription),\n        },\n        title: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.title),\n        },\n        description: {\n          type: 'string',\n          widget: 'textarea',\n          title: props.intl.formatMessage(messages.description),\n        },\n        required: {\n          type: 'boolean',\n          title: props.intl.formatMessage(messages.required),\n        },\n      },\n      required: ['id', 'title'],\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    const { settings } = config;\n    this.setState({ editorState });\n    const mockStore = configureStore();\n\n    this.props.onChange(this.props.id, {\n      'content-type': this.props.value\n        ? this.props.value['content-type']\n        : 'text/html',\n      encoding: this.props.value ? this.props.value.encoding : 'utf8',\n      data: ReactDOMServer.renderToStaticMarkup(\n        <Provider\n          store={mockStore({\n            userSession: {\n              token: this.props.token,\n            },\n          })}\n        >\n          <MemoryRouter>\n            {redraft(\n              convertToRaw(editorState.getCurrentContent()),\n              settings.ToHTMLRenderers,\n              settings.ToHTMLOptions,\n            )}\n          </MemoryRouter>\n        </Provider>,\n      ),\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      title,\n      description,\n      required,\n      value,\n      error,\n      fieldSet,\n    } = this.props;\n\n    if (__SERVER__) {\n      return (\n        <Form.Field\n          inline\n          required={required}\n          error={error.length > 0}\n          className={description ? 'help' : ''}\n          id={`${fieldSet || 'field'}-${id}`}\n        >\n          <div className=\"wrapper\">\n            <label htmlFor={`field-${id}`}>{title}</label>\n            <TextArea id={id} name={id} value={value ? value.data : ''} />\n            {description && <p className=\"help\">{description}</p>}\n            {map(error, (message) => (\n              <Label key={message} basic color=\"red\" pointing>\n                {message}\n              </Label>\n            ))}\n          </div>\n        </Form.Field>\n      );\n    }\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n    const { settings } = config;\n\n    return (\n      <FormFieldWrapper {...this.props} className=\"wysiwyg\">\n        <div style={{ boxSizing: 'initial' }}>\n          {this.props.onChange ? (\n            <>\n              <Editor\n                id={`field-${id}`}\n                readOnly={this.props.isDisabled}\n                onChange={this.onChange}\n                editorState={this.state.editorState}\n                plugins={[\n                  this.state.inlineToolbarPlugin,\n                  ...settings.richTextEditorPlugins,\n                ]}\n                blockRenderMap={settings.extendedBlockRenderMap}\n                blockStyleFn={settings.blockStyleFn}\n                customStyleMap={settings.customStyleMap}\n              />\n              {this.props.onChange && <InlineToolbar />}\n            </>\n          ) : (\n            <div className=\"DraftEditor-root\" />\n          )}\n        </div>\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      token: state.userSession.token,\n    }),\n    {},\n  ),\n)(WysiwygWidget);\n","/**\n * Workflow component.\n * @module components/manage/Workflow/Workflow\n */\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { uniqBy } from 'lodash';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport getWorkflowMapping from '@plone/volto/constants/Workflows';\nimport { Icon, Toast } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nimport {\n  getContent,\n  getWorkflow,\n  transitionWorkflow,\n} from '@plone/volto/actions';\n\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\n\nconst messages = defineMessages({\n  messageUpdated: {\n    id: 'Workflow updated.',\n    defaultMessage: 'Workflow updated.',\n  },\n  messageNoWorkflow: {\n    id: 'No workflow',\n    defaultMessage: 'No workflow',\n  },\n});\n\nconst SingleValue = injectLazyLibs('reactSelect')(({ children, ...props }) => {\n  const stateDecorator = {\n    marginLeft: '10px',\n    marginRight: '10px',\n    display: 'inline-block',\n    backgroundColor: props.selectProps.value.color || null,\n    content: ' ',\n    height: '10px',\n    width: '10px',\n    borderRadius: '50%',\n  };\n  const { SingleValue } = props.reactSelect.components;\n  return (\n    <SingleValue {...props}>\n      <span style={stateDecorator} />\n      {children}\n    </SingleValue>\n  );\n});\n\nconst Option = injectLazyLibs('reactSelect')((props) => {\n  const stateDecorator = {\n    marginLeft: '10px',\n    marginRight: '10px',\n    display: 'inline-block',\n    backgroundColor:\n      props.selectProps.value.value === props.data.value\n        ? props.selectProps.value.color\n        : null,\n    content: ' ',\n    height: '10px',\n    width: '10px',\n    borderRadius: '50%',\n    border:\n      props.selectProps.value.value !== props.data.value\n        ? `1px solid ${props.data.color}`\n        : null,\n  };\n\n  const { Option } = props['reactSelect'].components;\n  return (\n    <Option {...props}>\n      <span style={stateDecorator} />\n      <div style={{ marginRight: 'auto' }}>{props.label}</div>\n      {props.isFocused && !props.isSelected && (\n        <Icon name={checkSVG} size=\"24px\" color=\"#b8c6c8\" />\n      )}\n      {props.isSelected && <Icon name={checkSVG} size=\"24px\" color=\"#007bc1\" />}\n    </Option>\n  );\n});\n\nconst DropdownIndicator = injectLazyLibs('reactSelect')((props) => {\n  const { DropdownIndicator } = props.reactSelect.components;\n  return (\n    <DropdownIndicator {...props} data-testid=\"workflow-select-dropdown\">\n      {props.selectProps.menuIsOpen ? (\n        <Icon name={upSVG} size=\"24px\" color=\"#007bc1\" />\n      ) : (\n        <Icon name={downSVG} size=\"24px\" color=\"#007bc1\" />\n      )}\n    </DropdownIndicator>\n  );\n});\n\nconst selectTheme = (theme) => ({\n  ...theme,\n  borderRadius: 0,\n  colors: {\n    ...theme.colors,\n    primary25: 'hotpink',\n    primary: '#b8c6c8',\n  },\n});\n\nconst customSelectStyles = {\n  control: (styles, state) => ({\n    ...styles,\n    border: 'none',\n    borderBottom: '2px solid #b8c6c8',\n    boxShadow: 'none',\n    borderBottomStyle: state.menuIsOpen ? 'dotted' : 'solid',\n  }),\n  menu: (styles, state) => ({\n    ...styles,\n    top: null,\n    marginTop: 0,\n    boxShadow: 'none',\n    borderBottom: '2px solid #b8c6c8',\n  }),\n  indicatorSeparator: (styles) => ({\n    ...styles,\n    width: null,\n  }),\n  valueContainer: (styles) => ({\n    ...styles,\n  }),\n  option: (styles, state) => ({\n    ...styles,\n    backgroundColor: null,\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '14px 12px',\n    color: state.isSelected\n      ? '#007bc1'\n      : state.isFocused\n      ? '#4a4a4a'\n      : 'inherit',\n    ':active': {\n      backgroundColor: null,\n    },\n  }),\n};\n\n/**\n * Workflow container class.\n * @class Workflow\n * @extends Component\n */\nclass Workflow extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getContent: PropTypes.func.isRequired,\n    getWorkflow: PropTypes.func.isRequired,\n    transitionWorkflow: PropTypes.func.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    pathname: PropTypes.string.isRequired,\n    history: PropTypes.arrayOf(\n      PropTypes.shape({\n        review_state: PropTypes.string,\n      }),\n    ),\n    transitions: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    history: [],\n    transitions: [],\n  };\n\n  state = {\n    selectedOption: this.props.content.review_state\n      ? getWorkflowMapping(null, this.props.content.review_state)\n      : {},\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getWorkflow(this.props.pathname);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.getWorkflow(nextProps.pathname);\n    }\n    if (!this.props.loaded && nextProps.loaded) {\n      this.props.getWorkflow(nextProps.pathname);\n      this.props.getContent(nextProps.pathname);\n    }\n  }\n\n  /**\n   * On transition handler\n   * @method transition\n   * @param {string} event Event object\n   * @returns {undefined}\n   */\n  transition = (selectedOption) => {\n    this.props.transitionWorkflow(flattenToAppURL(selectedOption.url));\n    this.setState({ selectedOption });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.messageUpdated)}\n      />,\n    );\n  };\n\n  selectValue = (option) => {\n    const stateDecorator = {\n      marginLeft: '10px',\n      marginRight: '10px',\n      display: 'inline-block',\n      backgroundColor: option.color || null,\n      content: ' ',\n      height: '10px',\n      width: '10px',\n      borderRadius: '50%',\n    };\n    return (\n      <Fragment>\n        <span style={stateDecorator} />\n        <span className=\"Select-value-label\">{option.label}</span>\n      </Fragment>\n    );\n  };\n\n  optionRenderer = (option) => {\n    const stateDecorator = {\n      marginLeft: '10px',\n      marginRight: '10px',\n      display: 'inline-block',\n      backgroundColor:\n        this.state.selectedOption.value === option.value ? option.color : null,\n      content: ' ',\n      height: '10px',\n      width: '10px',\n      borderRadius: '50%',\n      border:\n        this.state.selectedOption.value !== option.value\n          ? `1px solid ${option.color}`\n          : null,\n    };\n\n    return (\n      <Fragment>\n        <span style={stateDecorator} />\n        <span style={{ marginRight: 'auto' }}>{option.label}</span>\n        <Icon name={checkSVG} size=\"24px\" />\n      </Fragment>\n    );\n  };\n\n  render() {\n    const { selectedOption } = this.state;\n    const { Placeholder } = this.props.reactSelect.components;\n    const Select = this.props.reactSelect.default;\n\n    return (\n      <Fragment>\n        <label htmlFor=\"state-select\">\n          <FormattedMessage id=\"State\" defaultMessage=\"State\" />\n        </label>\n        <Select\n          name=\"state-select\"\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          isDisabled={\n            !this.props.content.review_state ||\n            this.props.transitions.length === 0\n          }\n          options={uniqBy(\n            this.props.transitions.map((transition) =>\n              getWorkflowMapping(transition['@id']),\n            ),\n            'label',\n          ).concat(selectedOption)}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            DropdownIndicator,\n            Placeholder,\n            Option,\n            SingleValue,\n          }}\n          onChange={this.transition}\n          defaultValue={\n            this.props.content.review_state\n              ? selectedOption\n              : {\n                  label: this.props.intl.formatMessage(\n                    messages.messageNoWorkflow,\n                  ),\n                  value: 'noworkflow',\n                }\n          }\n          isSearchable={false}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  injectLazyLibs(['reactSelect']),\n  connect(\n    (state) => ({\n      loaded: state.workflow.transition.loaded,\n      content: state.content.data,\n      history: state.workflow.history,\n      transitions: state.workflow.transitions,\n    }),\n    { getContent, getWorkflow, transitionWorkflow },\n  ),\n)(Workflow);\n","/**\n * Anontools component.\n * @module components/theme/Anontools/Anontools\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Menu } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\nimport config from '@plone/volto/registry';\n\n/**\n * Anontools container class.\n * @class Anontools\n * @extends Component\n */\nexport class Anontools extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    token: PropTypes.string,\n    content: PropTypes.shape({\n      '@id': PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    token: null,\n    content: {\n      '@id': null,\n    },\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { settings } = config;\n    return (\n      !this.props.token && (\n        <Menu pointing secondary floated=\"right\">\n          <Menu.Item>\n            <Link\n              aria-label=\"login\"\n              to={`/login${\n                this.props.content\n                  ? `?return_url=${this.props.content['@id'].replace(\n                      settings.apiPath,\n                      '',\n                    )}`\n                  : ''\n              }`}\n            >\n              <FormattedMessage id=\"Log in\" defaultMessage=\"Log in\" />\n            </Link>\n          </Menu.Item>\n          <Menu.Item>\n            <Link aria-label=\"register\" to=\"/register\">\n              <FormattedMessage id=\"Register\" defaultMessage=\"Register\" />\n            </Link>\n          </Menu.Item>\n        </Menu>\n      )\n    );\n  }\n}\n\nexport default connect((state) => ({\n  token: state.userSession.token,\n  content: state.content.data,\n}))(Anontools);\n","/**\n * App container.\n * @module components/theme/App/App\n */\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { asyncConnect } from '@plone/volto/helpers';\nimport { Segment } from 'semantic-ui-react';\nimport { renderRoutes } from 'react-router-config';\nimport { Slide, ToastContainer, toast } from 'react-toastify';\nimport split from 'lodash/split';\nimport join from 'lodash/join';\nimport trim from 'lodash/trim';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\n\nimport Error from '@plone/volto/error';\n\nimport {\n  Breadcrumbs,\n  Footer,\n  Header,\n  Icon,\n  OutdatedBrowser,\n  AppExtras,\n  SkipLinks,\n} from '@plone/volto/components';\nimport { BodyClass, getBaseUrl, getView, isCmsUi } from '@plone/volto/helpers';\nimport {\n  getBreadcrumbs,\n  getContent,\n  getNavigation,\n  getTypes,\n  getWorkflow,\n} from '@plone/volto/actions';\n\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport MultilingualRedirector from '../MultilingualRedirector/MultilingualRedirector';\n\nimport * as Sentry from '@sentry/browser';\n\n/**\n * @export\n * @class App\n * @extends {Component}\n */\nclass App extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    pathname: PropTypes.string.isRequired,\n  };\n\n  state = {\n    hasError: false,\n    error: null,\n    errorInfo: null,\n  };\n\n  /**\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      if (this.state.hasError) {\n        this.setState({ hasError: false });\n      }\n    }\n  }\n\n  /**\n   * ComponentDidCatch\n   * @method ComponentDidCatch\n   * @param {string} error  The error\n   * @param {string} info The info\n   * @returns {undefined}\n   */\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true, error, errorInfo: info });\n    if (__CLIENT__) {\n      if (window?.env?.RAZZLE_SENTRY_DSN || __SENTRY__?.SENTRY_DSN) {\n        Sentry.captureException(error);\n      }\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { views } = config;\n    const path = getBaseUrl(this.props.pathname);\n    const action = getView(this.props.pathname);\n    const isCmsUI = isCmsUi(this.props.pathname);\n    const ConnectionRefusedView = views.errorViews.ECONNREFUSED;\n\n    return (\n      <Fragment>\n        <BodyClass className={`view-${action}view`} />\n\n        {/* Body class depending on content type */}\n        {this.props.content && this.props.content['@type'] && (\n          <BodyClass\n            className={`contenttype-${this.props.content['@type']\n              .replace(' ', '-')\n              .toLowerCase()}`}\n          />\n        )}\n\n        {/* Body class depending on sections */}\n        <BodyClass\n          className={cx({\n            [trim(join(split(this.props.pathname, '/'), ' section-'))]:\n              this.props.pathname !== '/',\n            siteroot: this.props.pathname === '/',\n            'is-authenticated': !!this.props.token,\n            'is-anonymous': !this.props.token,\n            'cms-ui': isCmsUI,\n            'public-ui': !isCmsUI,\n          })}\n        />\n        <SkipLinks />\n        <Header pathname={path} />\n        <Breadcrumbs pathname={path} />\n        <MultilingualRedirector pathname={this.props.pathname}>\n          <Segment basic className=\"content-area\">\n            <main>\n              <OutdatedBrowser />\n              {this.props.connectionRefused ? (\n                <ConnectionRefusedView />\n              ) : this.state.hasError ? (\n                <Error\n                  message={this.state.error.message}\n                  stackTrace={this.state.errorInfo.componentStack}\n                />\n              ) : (\n                renderRoutes(this.props.route.routes, {\n                  staticContext: this.props.staticContext,\n                })\n              )}\n            </main>\n          </Segment>\n        </MultilingualRedirector>\n        <Footer />\n        <ToastContainer\n          position={toast.POSITION.BOTTOM_CENTER}\n          hideProgressBar\n          transition={Slide}\n          autoClose={5000}\n          closeButton={\n            <Icon\n              className=\"toast-dismiss-action\"\n              name={clearSVG}\n              size=\"18px\"\n            />\n          }\n        />\n        <AppExtras {...this.props} />\n      </Fragment>\n    );\n  }\n}\n\nexport const __test__ = connect(\n  (state, props) => ({\n    pathname: props.location.pathname,\n    token: state.userSession.token,\n    content: state.content.data,\n    apiError: state.apierror.error,\n    connectionRefused: state.apierror.connectionRefused,\n  }),\n  {},\n)(App);\n\nexport default compose(\n  asyncConnect([\n    {\n      key: 'breadcrumbs',\n      promise: ({ location, store: { dispatch } }) =>\n        __SERVER__ && dispatch(getBreadcrumbs(getBaseUrl(location.pathname))),\n    },\n    {\n      key: 'content',\n      promise: ({ location, store: { dispatch } }) =>\n        __SERVER__ && dispatch(getContent(getBaseUrl(location.pathname))),\n    },\n    {\n      key: 'navigation',\n      promise: ({ location, store: { dispatch } }) =>\n        __SERVER__ &&\n        dispatch(\n          getNavigation(\n            getBaseUrl(location.pathname),\n            config.settings.navDepth,\n          ),\n        ),\n    },\n    {\n      key: 'types',\n      promise: ({ location, store: { dispatch } }) =>\n        __SERVER__ && dispatch(getTypes(getBaseUrl(location.pathname))),\n    },\n    {\n      key: 'workflow',\n      promise: ({ location, store: { dispatch } }) =>\n        __SERVER__ && dispatch(getWorkflow(getBaseUrl(location.pathname))),\n    },\n  ]),\n  connect(\n    (state, props) => ({\n      pathname: props.location.pathname,\n      token: state.userSession.token,\n      content: state.content.data,\n      apiError: state.apierror.error,\n      connectionRefused: state.apierror.connectionRefused,\n    }),\n    null,\n  ),\n)(App);\n","import React from 'react';\nimport { matchPath } from 'react-router';\nimport config from '@plone/volto/registry';\n\nconst AppExtras = (props) => {\n  const { settings } = config;\n  const { appExtras = [] } = settings;\n  const { pathname } = props;\n  const active = appExtras\n    .map((reg) => {\n      const match = matchPath(pathname, reg.match);\n      return match ? { reg, match } : null;\n    })\n    .filter((reg) => reg);\n\n  return active.map(({ reg: { component, props: extraProps }, match }, i) => {\n    const Insert = component;\n    return (\n      <Insert key={`appextra-${i}`} match={match} {...props} {...extraProps} />\n    );\n  });\n};\n\nexport default AppExtras;\n","/**\n * Avatar component.\n * @module components/theme/Avatar/Avatar\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { getInitials } from '@plone/volto/helpers';\n\nconst defaultSize = 30;\nconst defaultColor = 'Teal';\nconst defaultClassName = 'avatar circular';\n\nconst Avatar = ({ src, title, text, size, color, className }) => {\n  const radius = Math.round(size / 2);\n  return (\n    <div className={className} title={title}>\n      {src ? (\n        <img src={src} alt={title}></img>\n      ) : (\n        <svg width={size} height={size}>\n          <circle cx={radius} cy={radius} r={radius} fill={color} />\n          <text\n            x=\"50%\"\n            y=\"50%\"\n            textAnchor=\"middle\"\n            fill=\"white\"\n            fontSize={`${radius}px`}\n            fontFamily=\"Arial\"\n            dy=\".3em\"\n          >\n            {text || getInitials(title, 1)}\n          </text>\n        </svg>\n      )}\n    </div>\n  );\n};\n\nAvatar.propTypes = {\n  src: PropTypes.string,\n  title: PropTypes.string,\n  text: PropTypes.string,\n  size: PropTypes.number,\n  color: PropTypes.string,\n  className: PropTypes.string,\n};\n\nAvatar.defaultProps = {\n  src: null,\n  title: null,\n  text: null,\n  size: defaultSize,\n  color: defaultColor,\n  className: defaultClassName,\n};\n\nexport default Avatar;\n","/**\n * Breadcrumbs components.\n * @module components/theme/Breadcrumbs/Breadcrumbs\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Breadcrumb, Container, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { Icon } from '@plone/volto/components';\nimport { getBreadcrumbs } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nimport homeSVG from '@plone/volto/icons/home.svg';\n\nconst messages = defineMessages({\n  home: {\n    id: 'Home',\n    defaultMessage: 'Home',\n  },\n  breadcrumbs: {\n    id: 'Breadcrumbs',\n    defaultMessage: 'Breadcrumbs',\n  },\n});\n\n/**\n * Breadcrumbs container class.\n * @class Breadcrumbs\n * @extends Component\n */\nclass Breadcrumbs extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getBreadcrumbs: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    root: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getBreadcrumbs(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.getBreadcrumbs(getBaseUrl(nextProps.pathname));\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Segment\n        role=\"navigation\"\n        aria-label={this.props.intl.formatMessage(messages.breadcrumbs)}\n        className=\"breadcrumbs\"\n        secondary\n        vertical\n      >\n        <Container>\n          <Breadcrumb>\n            <Link\n              to={this.props.root || '/'}\n              className=\"section\"\n              title={this.props.intl.formatMessage(messages.home)}\n            >\n              <Icon name={homeSVG} size=\"18px\" />\n            </Link>\n            {this.props.items.map((item, index, items) => [\n              <Breadcrumb.Divider key={`divider-${item.url}`} />,\n              index < items.length - 1 ? (\n                <Link key={item.url} to={item.url} className=\"section\">\n                  {item.title}\n                </Link>\n              ) : (\n                <Breadcrumb.Section key={item.url} active>\n                  {item.title}\n                </Breadcrumb.Section>\n              ),\n            ])}\n          </Breadcrumb>\n        </Container>\n      </Segment>\n    );\n  }\n}\n\nexport const BreadcrumbsComponent = Breadcrumbs;\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      items: state.breadcrumbs.items,\n      root: state.breadcrumbs.root,\n    }),\n    { getBreadcrumbs },\n  ),\n)(Breadcrumbs);\n","/**\n * Comment edit modal.\n * @module components/theme/Comments/CommentEditModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { updateComment } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  editComment: {\n    id: 'Edit comment',\n    defaultMessage: 'Edit comment',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  comment: {\n    id: 'Comment',\n    defaultMessage: 'Comment',\n  },\n});\n\n/**\n * CommentEditModal class.\n * @class CommentEditModal\n * @extends Component\n */\nclass CommentEditModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateComment: PropTypes.func.isRequired,\n    id: PropTypes.string,\n    text: PropTypes.string,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    id: '',\n    text: '',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs CommentEditModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateComment(this.props.id, data.text);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          formData={{ text: this.props.text }}\n          title={this.props.intl.formatMessage(messages.editComment)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['text'],\n              },\n            ],\n            properties: {\n              text: {\n                title: this.props.intl.formatMessage(messages.comment),\n                type: 'string',\n                description: '',\n              },\n            },\n            required: ['text'],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.comments.update,\n    }),\n    { updateComment },\n  ),\n)(CommentEditModal);\n","/**\n * Comments components.\n * @module components/theme/Comments/Comments\n */\n\nimport {\n  addComment,\n  deleteComment,\n  listComments,\n  listMoreComments,\n} from '@plone/volto/actions';\nimport { Avatar, CommentEditModal, Form } from '@plone/volto/components';\nimport { flattenToAppURL, getBaseUrl, getColor } from '@plone/volto/helpers';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Button, Comment, Container, Icon } from 'semantic-ui-react';\n// import { Button, Grid, Segment, Container } from 'semantic-ui-react';\n\nconst messages = defineMessages({\n  comment: {\n    id: 'Comment',\n    defaultMessage: 'Comment',\n  },\n  comments: {\n    id: 'Comments',\n    defaultMessage: 'Comments',\n  },\n  commentDescription: {\n    id:\n      'You can add a comment by filling out the form below. Plain text formatting.',\n    defaultMessage:\n      'You can add a comment by filling out the form below. Plain text formatting.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n  edit: {\n    id: 'Edit',\n    defaultMessage: 'Edit',\n  },\n  reply: {\n    id: 'Reply',\n    defaultMessage: 'Reply',\n  },\n  hideReplies: {\n    id: 'Hide Replies',\n    defaultMessage: 'Hide Replies',\n  },\n  showReplies: {\n    id: 'Show Replies',\n    defaultMessage: 'Show Replies',\n  },\n  loadMoreComments: {\n    id: 'Load more',\n    defaultMessage: 'Load more...',\n  },\n});\n/**\n * Schema for the Form components to show an input field with it's label\n * @param {Object} intl\n */\nconst makeFormSchema = (intl) => ({\n  fieldsets: [\n    {\n      fields: ['comment'],\n      id: 'default',\n      title: intl.formatMessage(messages.default),\n    },\n  ],\n  properties: {\n    comment: {\n      title: intl.formatMessage(messages.comment),\n      type: 'string',\n      widget: 'textarea',\n    },\n  },\n  required: ['comment1'],\n});\n\n/**\n * Comments container class.\n * @class Comments\n * @extends Component\n */\nclass Comments extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    addComment: PropTypes.func.isRequired,\n    deleteComment: PropTypes.func.isRequired,\n    listComments: PropTypes.func.isRequired,\n    listMoreComments: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        author_name: PropTypes.string,\n        creation_date: PropTypes.string,\n        text: PropTypes.shape({\n          data: PropTypes.string,\n          'mime-type': PropTypes.string,\n        }),\n        is_deletable: PropTypes.bool,\n        is_editable: PropTypes.bool,\n      }),\n    ).isRequired,\n    addRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    deleteRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Comments\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n    this.onEdit = this.onEdit.bind(this);\n    this.onEditOk = this.onEditOk.bind(this);\n    this.onEditCancel = this.onEditCancel.bind(this);\n    this.setReplyTo = this.setReplyTo.bind(this);\n    this.loadMoreComments = this.loadMoreComments.bind(this);\n    this.state = {\n      showEdit: false,\n      editId: null,\n      editText: null,\n      replyTo: null,\n      collapsedComments: {},\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.listComments(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.pathname !== this.props.pathname ||\n      (this.props.addRequest.loading && nextProps.addRequest.loaded) ||\n      (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded)\n    ) {\n      this.props.listComments(getBaseUrl(nextProps.pathname));\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} formData Form data.\n   * @returns {undefined}\n   */\n  onSubmit(formData) {\n    this.props.addComment(\n      getBaseUrl(this.props.pathname),\n      formData.comment,\n      this.state.replyTo,\n    );\n    this.setState({ replyTo: null });\n  }\n\n  /**\n   * The id of the comment that will receive a reply\n   * @param {string} commentId\n   */\n  setReplyTo(commentId) {\n    this.setState({ replyTo: commentId });\n  }\n\n  /**\n   * Calls the action listMoreComments passing the received url for next array of comments\n   */\n  loadMoreComments() {\n    this.props.listMoreComments(this.props.next);\n  }\n\n  /**\n   * Delete handler\n   * @method onDelete\n   * @param {Object} event Event object.\n   * @param {string} value Delete value.\n   * @returns {undefined}\n   */\n  onDelete(value) {\n    this.props.deleteComment(value);\n  }\n\n  /**\n   * Will hide all replies to the specific comment\n   * including replies to any of the replies\n   * @param {string} commentId\n   */\n  hideReply(commentId) {\n    this.setState((prevState) => {\n      const hasComment = prevState.collapsedComments[commentId];\n      const { collapsedComments } = prevState;\n\n      return {\n        collapsedComments: {\n          ...collapsedComments,\n          [commentId]: !hasComment,\n        },\n      };\n    });\n  }\n\n  /**\n   * Edit handler\n   * @method onEdit\n   * @param {Object} event Event object.\n   * @param {string} value Delete value.\n   * @returns {undefined}\n   */\n  onEdit(value) {\n    this.setState({\n      showEdit: true,\n      editId: value.id,\n      editText: value.text,\n    });\n  }\n\n  /**\n   * On edit ok\n   * @method onEditOk\n   * @returns {undefined}\n   */\n  onEditOk() {\n    this.setState({\n      showEdit: false,\n      editId: null,\n      editText: null,\n    });\n    this.props.listComments(getBaseUrl(this.props.pathname));\n  }\n\n  /**\n   * On edit cancel\n   * @method onEditCancel\n   * @returns {undefined}\n   */\n  onEditCancel(ev) {\n    this.setState({\n      showEdit: false,\n      editId: null,\n      editText: null,\n      replyTo: null,\n    });\n  }\n\n  addRepliesAsChildrenToComments(items) {\n    let initialValue = {};\n    const allCommentsWithCildren = items.reduce((accumulator, item) => {\n      return {\n        [item.comment_id]: { comment: item, children: [] },\n        ...accumulator,\n      };\n    }, initialValue);\n\n    items.forEach((comment) => {\n      if (comment.in_reply_to) {\n        allCommentsWithCildren[comment.in_reply_to].children.push(comment);\n      }\n    });\n    return allCommentsWithCildren;\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { items } = this.props;\n    const { collapsedComments } = this.state;\n    // object with comment ids, to easily verify if any comment has children\n    const allCommentsWithCildren = this.addRepliesAsChildrenToComments(items);\n    // all comments that are not a reply will be shown in the first iteration\n    const allPrimaryComments = items.filter((comment) => !comment.in_reply_to);\n\n    // recursively makes comments with their replies nested\n    // each iteration will show replies to the specific comment using allCommentsWithCildren\n    const commentElement = (comment) => (\n      <Comment key={comment.comment_id}>\n        <Avatar\n          src={comment.author_image}\n          title={comment.author_name || 'Anonymous'}\n          color={getColor(comment.author_username)}\n        />\n        <Comment.Content>\n          <Comment.Author>{comment.author_name}</Comment.Author>\n          <Comment.Metadata>\n            <span>\n              {' '}\n              <span title={moment(comment.creation_date).format('LLLL')}>\n                {moment(comment.creation_date).fromNow()}\n              </span>\n            </span>\n          </Comment.Metadata>\n          <Comment.Text>\n            {' '}\n            {comment.text['mime-type'] === 'text/html' ? (\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: comment.text.data,\n                }}\n              />\n            ) : (\n              comment.text.data\n            )}\n          </Comment.Text>\n          <Comment.Actions>\n            <Comment.Action\n              as=\"a\"\n              aria-label={this.props.intl.formatMessage(messages.reply)}\n              onClick={() => this.setReplyTo(comment.comment_id)}\n            >\n              <FormattedMessage id=\"Reply\" defaultMessage=\"Reply\" />\n            </Comment.Action>\n            {comment.is_editable && (\n              <Comment.Action\n                onClick={() =>\n                  this.onEdit({\n                    id: flattenToAppURL(comment['@id']),\n                    text: comment.text.data,\n                  })\n                }\n                aria-label={this.props.intl.formatMessage(messages.edit)}\n                value={{\n                  id: flattenToAppURL(comment['@id']),\n                  text: comment.text.data,\n                }}\n              >\n                <FormattedMessage id=\"Edit\" defaultMessage=\"Edit\" />\n              </Comment.Action>\n            )}\n            {comment.is_deletable && (\n              <Comment.Action\n                aria-label={this.props.intl.formatMessage(messages.delete)}\n                onClick={() => this.onDelete(flattenToAppURL(comment['@id']))}\n                color=\"red\"\n              >\n                <Icon name=\"delete\" color=\"red\" />\n                <FormattedMessage\n                  id=\"Delete\"\n                  defaultMessage=\"Delete\"\n                  color=\"red\"\n                />\n              </Comment.Action>\n            )}\n            <Comment.Action\n              as=\"a\"\n              onClick={() => this.hideReply(comment.comment_id)}\n            >\n              {allCommentsWithCildren[comment.comment_id].children.length >\n              0 ? (\n                this.state.collapsedComments[comment.comment_id] ? (\n                  <>\n                    <Icon name=\"eye\" color=\"blue\" />\n                    <FormattedMessage\n                      id=\"Show Replies\"\n                      defaultMessage=\"Show Replies\"\n                    />\n                  </>\n                ) : (\n                  <>\n                    <Icon name=\"minus\" color=\"blue\" />\n                    <FormattedMessage\n                      id=\"Hide Replies\"\n                      defaultMessage=\"Hide Replies\"\n                    />\n                  </>\n                )\n              ) : null}\n            </Comment.Action>\n          </Comment.Actions>\n          <div id={`reply-place-${comment.comment_id}`}></div>\n        </Comment.Content>\n\n        {allCommentsWithCildren[comment.comment_id].children.length > 0\n          ? allCommentsWithCildren[comment.comment_id].children.map(\n              (child, index) => (\n                <Comment.Group\n                  collapsed={collapsedComments[comment.comment_id]}\n                  key={`group-${index}-${comment.comment_id}`}\n                >\n                  {commentElement(child)}\n                </Comment.Group>\n              ),\n            )\n          : null}\n      </Comment>\n    );\n\n    return (\n      <Container className=\"comments\">\n        <CommentEditModal\n          open={this.state.showEdit}\n          onCancel={this.onEditCancel}\n          onOk={this.onEditOk}\n          id={this.state.editId}\n          text={this.state.editText}\n        />\n        <div id=\"comment-add-id\">\n          <Form\n            onSubmit={this.onSubmit}\n            onCancel={this.onEditCancel}\n            submitLabel={this.props.intl.formatMessage(messages.comment)}\n            resetAfterSubmit\n            schema={makeFormSchema(this.props.intl)}\n          />\n        </div>\n\n        {/* all comments  */}\n        <Comment.Group threaded>\n          {allPrimaryComments.map((item) => commentElement(item))}\n        </Comment.Group>\n\n        {/* load more button */}\n        {this.props.items_total > this.props.items.length && (\n          <Button fluid basic color=\"blue\" onClick={this.loadMoreComments}>\n            <FormattedMessage id=\"Load more\" defaultMessage=\"Load more...\" />\n          </Button>\n        )}\n\n        {this.state.replyTo && (\n          <Portal\n            node={\n              document &&\n              document.getElementById(`reply-place-${this.state.replyTo}`)\n            }\n          >\n            <Form\n              onSubmit={this.onSubmit}\n              onCancel={this.onEditCancel}\n              submitLabel={this.props.intl.formatMessage(messages.comment)}\n              resetAfterSubmit\n              schema={makeFormSchema(this.props.intl)}\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      items: state.comments.items,\n      next: state.comments.next,\n      items_total: state.comments.items_total,\n      addRequest: state.comments.add,\n      deleteRequest: state.comments.delete,\n    }),\n    { addComment, deleteComment, listComments, listMoreComments },\n  ),\n)(Comments);\n","/**\n * Home container.\n * @module components/theme/ConnectionRefused/ConnectionRefused\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\n\nconst ConnectionRefused = () => (\n  <Container\n    className=\"view-wrapper\"\n    style={{\n      fontFamily: 'Helvetica, sans-serif',\n      fontSize: '20px',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }}\n  >\n    <h1 style={{ textAlign: 'center', lineHeight: '40px' }}>\n      <FormattedMessage\n        id=\"Connection refused\"\n        defaultMessage=\"Connection refused\"\n      />\n      {__DEVELOPMENT__ && (\n        <>\n          <br />\n          <a href={config.settings.apiPath}>{config.settings.apiPath}</a>\n        </>\n      )}\n    </h1>\n    {__DEVELOPMENT__ && (\n      <p\n        className=\"description\"\n        style={{\n          textAlign: 'center',\n          margin: '20px auto',\n          width: '475px',\n        }}\n      >\n        <FormattedMessage\n          id=\"The backend is not responding, please check if you have started Plone, check your project's configuration object apiPath (or if you are using the internal proxy, devProxyToApiPath) or the RAZZLE_API_PATH Volto's environment variable.\"\n          defaultMessage=\"The backend is not responding, please check if you have started Plone, check your project's configuration object apiPath (or if you are using the internal proxy, devProxyToApiPath) or the RAZZLE_API_PATH Volto's environment variable.\"\n        />\n      </p>\n    )}\n    {!__DEVELOPMENT__ && (\n      <>\n        <p\n          className=\"description\"\n          style={{\n            textAlign: 'center',\n            margin: '20px auto',\n            width: '475px',\n          }}\n        >\n          <FormattedMessage\n            id=\"We apologize for the inconvenience, but the backend of the site you are accessing is not available right now. Please, try again later.\"\n            defaultMessage=\"We apologize for the inconvenience, but the backend of the site you are accessing is not available right now. Please, try again later.\"\n          />\n        </p>\n\n        <p style={{ textAlign: 'center' }}>\n          <FormattedMessage id=\"Thank you.\" defaultMessage=\"Thank you.\" />\n        </p>\n      </>\n    )}\n  </Container>\n);\n\nexport default ConnectionRefused;\n","/**\n * Contact Form container.\n * @module components/theme/ContactForm/ContactForm\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Portal } from 'react-portal';\nimport { Container, Message, Icon } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Link, withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { Form, Toolbar, Toast } from '@plone/volto/components';\nimport { emailNotification } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nconst messages = defineMessages({\n  send: {\n    id: 'Send',\n    defaultMessage: 'Send',\n  },\n  contactForm: {\n    id: 'Contact form',\n    defaultMessage: 'Contact form',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  name: {\n    id: 'Name',\n    defaultMessage: 'Name',\n  },\n  from: {\n    id: 'From',\n    defaultMessage: 'From',\n  },\n  subject: {\n    id: 'Subject',\n    defaultMessage: 'Subject',\n  },\n  message: {\n    id: 'Message',\n    defaultMessage: 'Message',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  messageSent: {\n    id: 'Email sent',\n    defaultMessage: 'Email sent',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * ContactForm class.\n * @class ContactForm\n * @extends Component\n */\nexport class ContactFormComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    emailNotification: PropTypes.func.isRequired,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n    loading: null,\n    loaded: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.messageSent)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * On submit handler\n   * @method onSubmit\n   * @param {Object} data Data object.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.emailNotification(\n      data.from,\n      data.message,\n      data.name,\n      data.subject,\n    );\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"contact-form\">\n        <Container>\n          <Helmet title={this.props.intl.formatMessage(messages.contactForm)} />\n          {this.props.error && (\n            <Message\n              icon=\"warning\"\n              negative\n              attached\n              header={this.props.intl.formatMessage(messages.error)}\n              content={this.props.error.message}\n            />\n          )}\n          <Form\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            formData={{ blocksLayoutFieldname: {} }}\n            submitLabel={this.props.intl.formatMessage(messages.send)}\n            resetAfterSubmit\n            title={this.props.intl.formatMessage(messages.contactForm)}\n            loading={this.props.loading}\n            schema={{\n              fieldsets: [\n                {\n                  fields: ['name', 'from', 'subject', 'message'],\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                },\n              ],\n              properties: {\n                name: {\n                  title: this.props.intl.formatMessage(messages.name),\n                  type: 'string',\n                },\n                from: {\n                  title: this.props.intl.formatMessage(messages.from),\n                  type: 'email',\n                },\n                subject: {\n                  title: this.props.intl.formatMessage(messages.subject),\n                  type: 'string',\n                },\n                message: {\n                  title: this.props.intl.formatMessage(messages.message),\n                  type: 'string',\n                  widget: 'textarea',\n                },\n              },\n              required: ['from', 'message'],\n            }}\n          />\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                inner={\n                  <Link\n                    to={`${getBaseUrl(this.props.pathname)}`}\n                    className=\"item\"\n                  >\n                    <Icon\n                      name=\"arrow left\"\n                      size=\"big\"\n                      color=\"blue\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                }\n              />\n            </Portal>\n          )}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      loading: state.emailNotification.loading,\n      loaded: state.emailNotification.loaded,\n      error: state.emailNotification.error,\n      pathname: props.location.pathname,\n    }),\n    { emailNotification },\n  ),\n)(ContactFormComponent);\n","/**\n * Home container.\n * @module components/theme/CorsError/CorsError\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\n\n/**\n * Not found function.\n * @function CorsError\n * @returns {string} Markup of the not found page.\n */\nconst CorsError = () => (\n  <Container\n    className=\"view-wrapper\"\n    style={{\n      fontFamily: 'Helvetica, sans-serif',\n      fontSize: '20px',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }}\n  >\n    {__DEVELOPMENT__ && (\n      <>\n        <h1 style={{ textAlign: 'center', lineHeight: '40px' }}>\n          <FormattedMessage\n            id=\"There is a configuration problem on the backend\"\n            defaultMessage=\"There is a configuration problem on the backend\"\n          />\n          <br />\n          <a href={config.settings.apiPath}>{config.settings.apiPath}</a>\n        </h1>\n        <p\n          className=\"description\"\n          style={{\n            textAlign: 'center',\n            margin: '20px auto',\n            width: '475px',\n          }}\n        >\n          <FormattedMessage\n            id=\"The backend is responding, but the CORS headers are not configured properly and the browser has denied the access to the backend resources.\"\n            defaultMessage=\"The backend is responding, but the CORS headers are not configured properly and the browser has denied the access to the backend resources.\"\n          />\n        </p>\n      </>\n    )}\n    {!__DEVELOPMENT__ && (\n      <>\n        <p\n          className=\"description\"\n          style={{\n            textAlign: 'center',\n            margin: '20px auto',\n            width: '475px',\n          }}\n        >\n          <FormattedMessage\n            id=\"The backend server of your website is not anwering, we apologize for the inconvenience. Please try to re-load the page and try again. If the problem persists please contact the site administrators.\"\n            defaultMessage=\"The backend server of your website is not anwering, we apologize for the inconvenience. Please try to re-load the page and try again. If the problem persists please contact the site administrators.\"\n          />\n        </p>\n\n        <p style={{ textAlign: 'center' }}>\n          <FormattedMessage id=\"Thank you.\" defaultMessage=\"Thank you.\" />\n        </p>\n      </>\n    )}\n  </Container>\n);\n\nexport default CorsError;\n","/**\n * @module components/theme/Error/Error\n */\n\nimport React from 'react';\nimport config from '@plone/volto/registry';\n\n/**\n * Error function.\n * @function Error\n * @returns {string} Markup of the error page.\n */\nconst Error = (props) => {\n  const { views } = config;\n  const { error } = props;\n  let FoundView;\n  if (error.status === undefined) {\n    // For some reason, while development and if CORS is in place and the\n    // requested resource is 404, it returns undefined as status, then the\n    // next statement will fail\n    FoundView = views.errorViews.corsError;\n  } else {\n    FoundView = views.errorViews[error.status.toString()];\n  }\n  if (!FoundView) {\n    FoundView = views.errorViews['404']; // default to 404\n  }\n  return (\n    <div id=\"view\">\n      <FoundView {...props} />\n    </div>\n  );\n};\n\nexport default Error;\n","/**\n * Footer component.\n * @module components/theme/Footer/Footer\n */\n\nimport React from 'react';\nimport { Container, List, Segment } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  copyright: {\n    id: 'Copyright',\n    defaultMessage: 'Copyright',\n  },\n});\n\n/**\n * Component to display the footer.\n * @function Footer\n * @param {Object} intl Intl object\n * @returns {string} Markup of the component\n */\nconst Footer = ({ intl }) => (\n  <Segment\n    role=\"contentinfo\"\n    vertical\n    padded\n    inverted\n    color=\"grey\"\n    textAlign=\"center\"\n    id=\"footer\"\n  >\n    <Container>\n      <Segment basic inverted color=\"grey\" className=\"discreet\">\n        <FormattedMessage\n          id=\"The {plonecms} is {copyright} 2000-{current_year} by the {plonefoundation} and friends.\"\n          defaultMessage=\"The {plonecms} is {copyright} 2000-{current_year} by the {plonefoundation} and friends.\"\n          values={{\n            plonecms: (\n              <FormattedMessage\n                id=\"Plone{reg} Open Source CMS/WCM\"\n                defaultMessage=\"Plone{reg} Open Source CMS/WCM\"\n                values={{ reg: <sup>®</sup> }}\n              />\n            ),\n            copyright: (\n              <abbr title={intl.formatMessage(messages.copyright)}>©</abbr>\n            ),\n            current_year: new Date().getFullYear(),\n            plonefoundation: (\n              <a className=\"item\" href=\"http://plone.org/foundation\">\n                <FormattedMessage\n                  id=\"Plone Foundation\"\n                  defaultMessage=\"Plone Foundation\"\n                />\n              </a>\n            ),\n          }}\n        />{' '}\n        <FormattedMessage\n          id=\"Distributed under the {license}.\"\n          defaultMessage=\"Distributed under the {license}.\"\n          values={{\n            license: (\n              <a\n                className=\"item\"\n                href=\"http://creativecommons.org/licenses/GPL/2.0/\"\n              >\n                <FormattedMessage\n                  id=\"GNU GPL license\"\n                  defaultMessage=\"GNU GPL license\"\n                />\n              </a>\n            ),\n          }}\n        />\n      </Segment>\n      <List horizontal inverted>\n        {/* wrap in div for a11y reasons: listitem role cannot be on the <a> element directly */}\n        <div role=\"listitem\" className=\"item\">\n          <Link className=\"item\" to=\"/sitemap\">\n            <FormattedMessage id=\"Site Map\" defaultMessage=\"Site Map\" />\n          </Link>\n        </div>\n        <div role=\"listitem\" className=\"item\">\n          <Link className=\"item\" to=\"/accesibility-info\">\n            <FormattedMessage\n              id=\"Accessibility\"\n              defaultMessage=\"Accessibility\"\n            />\n          </Link>\n        </div>\n        <div role=\"listitem\" className=\"item\">\n          <Link className=\"item\" to=\"/contact-form\">\n            <FormattedMessage id=\"Contact\" defaultMessage=\"Contact\" />\n          </Link>\n        </div>\n        <div role=\"listitem\" className=\"item\">\n          <a className=\"item\" href=\"https://plone.com\">\n            <FormattedMessage\n              id=\"Powered by Plone & Python\"\n              defaultMessage=\"Powered by Plone & Python\"\n            />\n          </a>\n        </div>\n      </List>\n    </Container>\n  </Segment>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFooter.propTypes = {\n  /**\n   * i18n object\n   */\n};\n\nexport default injectIntl(Footer);\n","/**\n * @module components/theme/Forbidden/Forbidden\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport { withServerErrorCode } from '@plone/volto/helpers/Utils/Utils';\n\n/**\n * forbidden function.\n * @function Forbidden\n * @returns {string} Markup of the forbidden page.\n */\nconst Forbidden = () => (\n  <Container className=\"view-wrapper\">\n    <h1>\n      <FormattedMessage id=\"Forbidden\" defaultMessage=\"Forbidden\" />\n    </h1>\n    <p className=\"description\">\n      <FormattedMessage\n        id=\"We apologize for the inconvenience, but you don't have permissions on this resource.\"\n        defaultMessage=\"We apologize for the inconvenience, but you don't have permissions on this resource.\"\n      />\n    </p>\n  </Container>\n);\n\nexport default withServerErrorCode(403)(Forbidden);\n","/**\n * Header component.\n * @module components/theme/Header/Header\n */\n\nimport React, { Component } from 'react';\nimport { Container, Segment } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  Anontools,\n  LanguageSelector,\n  Logo,\n  Navigation,\n  SearchWidget,\n} from '@plone/volto/components';\n\n/**\n * Header component class.\n * @class Header\n * @extends Component\n */\nclass Header extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    token: PropTypes.string,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    token: null,\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Segment basic className=\"header-wrapper\" role=\"banner\">\n        <Container>\n          <div className=\"header\">\n            <div className=\"logo-nav-wrapper\">\n              <div className=\"logo\">\n                <Logo />\n              </div>\n              <Navigation pathname={this.props.pathname} />\n            </div>\n            <div className=\"tools-search-wrapper\">\n              <LanguageSelector />\n              {!this.props.token && (\n                <div className=\"tools\">\n                  <Anontools />\n                </div>\n              )}\n              <div className=\"search\">\n                <SearchWidget pathname={this.props.pathname} />\n              </div>\n            </div>\n          </div>\n        </Container>\n      </Segment>\n    );\n  }\n}\n\nexport default connect((state) => ({\n  token: state.userSession.token,\n}))(Header);\n","/**\n * Icon component.\n * @module components/theme/Icon/Icon\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst defaultSize = '36px';\n\n/**\n * Component to display an SVG as Icon.\n * @function Field\n * @param {Object} props Component properties.\n * @param {string} props.name Name source object.\n * @param {string} props.size Size of the Icon (in px).\n * @param {string} props.color Color of the Icon.\n * @param {string} props.className className to add to the component.\n * @param {string} props.title Title (a11y).\n * @returns {string} Markup of the component.\n *\n * Use:\n * drop icon to the icons folder (\"src/icons\")\n * import svg into the file\n * import this Icon component\n * add icon component with name = your imported svg\n *\n * Reasoning:\n * add a11y title to SVGs\n * load svg via webpack for optimization\n * Zero conf Inlined SVGs, as it is the best option when working with SVG\n * see razzle.config.js\n *\n * for further reference see {@link https://kitconcept.com/blog/pastanaga-icon-system/ | here}\n */\nconst Icon = ({ name, size, color, className, title, onClick }) => (\n  <svg\n    xmlns={name.attributes && name.attributes.xmlns}\n    viewBox={name.attributes && name.attributes.viewBox}\n    style={{ height: size, width: 'auto', fill: color || 'currentColor' }}\n    className={className ? `icon ${className}` : 'icon'}\n    onClick={onClick}\n    dangerouslySetInnerHTML={{\n      __html: title ? `<title>${title}</title>${name.content}` : name.content,\n    }}\n  />\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nIcon.propTypes = {\n  name: PropTypes.shape({\n    xmlns: PropTypes.string,\n    viewBox: PropTypes.string,\n    content: PropTypes.string,\n  }).isRequired,\n  size: PropTypes.string,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  title: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nIcon.defaultProps = {\n  size: defaultSize,\n  color: null,\n  className: null,\n  title: null,\n  onClick: null,\n};\n\nexport default Icon;\n","/**\n * Language selector component.\n * @module components/LanguageSelector/LanguageSelector\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport cookie from 'react-cookie';\nimport { useSelector, useDispatch } from 'react-redux';\nimport cx from 'classnames';\nimport { find, map } from 'lodash';\nimport { updateIntl } from 'react-intl-redux';\nimport langmap from 'langmap';\nimport { Helmet } from '@plone/volto/helpers';\n\nimport config from '@plone/volto/registry';\n\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nlet locales = {};\n\nif (config.settings) {\n  config.settings.supportedLanguages.forEach((lang) => {\n    import('~/../locales/' + lang + '.json').then((locale) => {\n      locales = { ...locales, [lang]: locale.default };\n    });\n  });\n}\n\nconst LanguageSelector = (props) => {\n  const dispatch = useDispatch();\n  const currentLang = useSelector((state) => state.intl.locale);\n  const translations = useSelector(\n    (state) => state.content.data?.['@components']?.translations?.items,\n  );\n\n  function changeLanguage(language) {\n    cookie.save('I18N_LANGUAGE', language, {\n      expires: new Date((2 ** 31 - 1) * 1000),\n      path: '/',\n    });\n\n    dispatch(\n      updateIntl({\n        locale: language,\n        messages: locales[language],\n      }),\n    );\n  }\n  const { settings } = config;\n\n  return settings.isMultilingual ? (\n    <div className=\"language-selector\">\n      {map(settings.supportedLanguages, (lang) => {\n        const translation = find(translations, { language: lang });\n        return (\n          <Link\n            className={cx({ selected: lang === currentLang })}\n            to={translation ? flattenToAppURL(translation['@id']) : `/${lang}`}\n            title={langmap[lang].nativeName}\n            onClick={() => {\n              props.onClickAction();\n              changeLanguage(lang);\n            }}\n            key={`language-selector-${lang}`}\n          >\n            {langmap[lang].nativeName}&nbsp;\n          </Link>\n        );\n      })}\n    </div>\n  ) : (\n    <Helmet>\n      <html lang={settings.defaultLanguage} />\n    </Helmet>\n  );\n};\n\nLanguageSelector.propTypes = {\n  onClickAction: PropTypes.func,\n};\n\nLanguageSelector.defaultProps = {\n  onClickAction: () => {},\n};\n\nexport default LanguageSelector;\n","/**\n * Login container.\n * @module components/theme/Login/Login\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport {\n  Container,\n  Button,\n  Form,\n  Input,\n  Segment,\n  Grid,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport qs from 'query-string';\nimport { withRouter } from 'react-router-dom';\n\nimport { Icon } from '@plone/volto/components';\nimport { getNavigation, login } from '@plone/volto/actions';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  login: {\n    id: 'Log in',\n    defaultMessage: 'Log in',\n  },\n  loginName: {\n    id: 'Login Name',\n    defaultMessage: 'Login Name',\n  },\n  Login: {\n    id: 'Login',\n    defaultMessage: 'Login',\n  },\n  password: {\n    id: 'Password',\n    defaultMessage: 'Password',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  loginFailed: {\n    id: 'Login Failed',\n    defaultMessage: 'Login Failed',\n  },\n  loginFailedContent: {\n    id:\n      'Both email address and password are case sensitive, check that caps lock is not enabled.',\n    defaultMessage:\n      'Both email address and password are case sensitive, check that caps lock is not enabled.',\n  },\n});\n\n/**\n * Login class.\n * @class Login\n * @extends Component\n */\nclass Login extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    login: PropTypes.func.isRequired,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    token: PropTypes.string, // eslint-disable-line react/no-unused-prop-types\n    returnUrl: PropTypes.string,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n    loading: null,\n    token: null,\n    returnUrl: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onLogin = this.onLogin.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.token) {\n      this.props.history.push(this.props.returnUrl || '/');\n      if (toast.isActive('loginFailed')) {\n        toast.dismiss('loginFailed');\n      }\n    }\n    if (nextProps.error) {\n      if (!toast.isActive('loginFailed')) {\n        toast.error(\n          <Toast\n            error\n            title={this.props.intl.formatMessage(messages.loginFailed)}\n            content={this.props.intl.formatMessage(messages.loginFailedContent)}\n          />,\n          { autoClose: false, toastId: 'loginFailed' },\n        );\n      }\n    }\n  }\n\n  UNSAFE_componentWillMount() {\n    const { settings } = config;\n    if (settings.isMultilingual) {\n      this.props.getNavigation(`/${this.props.lang}`, settings.navDepth);\n    } else {\n      this.props.getNavigation('/', settings.navDepth);\n    }\n  }\n\n  componentWillUnmount() {\n    const { settings } = config;\n    if (settings.isMultilingual) {\n      this.props.getNavigation(`/${this.props.lang}`, settings.navDepth);\n    } else {\n      this.props.getNavigation('/', settings.navDepth);\n    }\n\n    if (toast.isActive('loginFailed')) {\n      toast.dismiss('loginFailed');\n    }\n  }\n\n  /**\n   * On login handler\n   * @method onLogin\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onLogin(event) {\n    this.props.login(\n      document.getElementsByName('login')[0].value,\n      document.getElementsByName('password')[0].value,\n    );\n    event.preventDefault();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-login\">\n        <Helmet title={this.props.intl.formatMessage(messages.Login)} />\n        <Container text>\n          <Form method=\"post\" onSubmit={this.onLogin}>\n            <Segment.Group raised>\n              <Segment className=\"primary\">\n                <FormattedMessage id=\"Log In\" defaultMessage=\"Login Name\" />\n              </Segment>\n              <Segment secondary>\n                <FormattedMessage\n                  id=\"Sign in to start session\"\n                  defaultMessage=\"Sign in to start session\"\n                />\n              </Segment>\n              <Segment className=\"form\">\n                <Form.Field inline className=\"help\">\n                  <Grid>\n                    <Grid.Row stretched>\n                      <Grid.Column width=\"4\">\n                        <div className=\"wrapper\">\n                          <label htmlFor=\"login\">\n                            <FormattedMessage\n                              id=\"Login Name\"\n                              defaultMessage=\"Login Name\"\n                            />\n                          </label>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column width=\"8\">\n                        {/* eslint-disable jsx-a11y/no-autofocus */}\n                        <Input\n                          id=\"login\"\n                          name=\"login\"\n                          placeholder={this.props.intl.formatMessage(\n                            messages.loginName,\n                          )}\n                          autoFocus\n                        />\n                      </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row stretched>\n                      <Grid.Column stretched width=\"12\">\n                        <p className=\"help\">\n                          <FormattedMessage\n                            id=\"If you you do not have an account here, head over to the {registrationform}.\"\n                            defaultMessage=\"If you you do not have an account here, head over to the {registrationform}.\"\n                            values={{\n                              registrationform: (\n                                /* eslint-disable jsx-a11y/tabindex-no-positive */\n                                <Link to=\"/register\" tabIndex={1}>\n                                  <FormattedMessage\n                                    id=\"registration form\"\n                                    defaultMessage=\"registration form\"\n                                  />\n                                </Link>\n                              ),\n                            }}\n                          />\n                        </p>\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Form.Field>\n                <Form.Field inline className=\"help\">\n                  <Grid>\n                    <Grid.Row stretched>\n                      <Grid.Column stretched width=\"4\">\n                        <div className=\"wrapper\">\n                          <label htmlFor=\"password\">\n                            <FormattedMessage\n                              id=\"Password\"\n                              defaultMessage=\"Password\"\n                            />\n                          </label>\n                        </div>\n                      </Grid.Column>\n                      <Grid.Column stretched width=\"8\">\n                        <Input\n                          type=\"password\"\n                          id=\"password\"\n                          name=\"password\"\n                          placeholder={this.props.intl.formatMessage(\n                            messages.password,\n                          )}\n                          tabIndex={0}\n                        />\n                      </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row stretched>\n                      <Grid.Column stretched width=\"12\">\n                        <p className=\"help\">\n                          <FormattedMessage\n                            id=\"If you have forgotten your password, {forgotpassword}\"\n                            defaultMessage=\"If you have forgotten your password, {forgotpassword}\"\n                            values={{\n                              forgotpassword: (\n                                <Link to=\"/password-reset\">\n                                  <FormattedMessage\n                                    id=\"we can send you a new one\"\n                                    defaultMessage=\"we can send you a new one\"\n                                  />\n                                </Link>\n                              ),\n                            }}\n                          />\n                        </p>\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Form.Field>\n              </Segment>\n              <Segment className=\"actions\" clearing>\n                <Button\n                  basic\n                  primary\n                  floated=\"right\"\n                  type=\"submit\"\n                  id=\"login-form-submit\"\n                  aria-label={this.props.intl.formatMessage(messages.login)}\n                  title={this.props.intl.formatMessage(messages.login)}\n                  loading={this.props.loading}\n                >\n                  <Icon className=\"circled\" name={aheadSVG} size=\"30px\" />\n                </Button>\n\n                <Button\n                  basic\n                  secondary\n                  id=\"login-form-cancel\"\n                  as={Link}\n                  to=\"/\"\n                  aria-label={this.props.intl.formatMessage(messages.cancel)}\n                  title={this.props.intl.formatMessage(messages.cancel)}\n                  floated=\"right\"\n                >\n                  <Icon className=\"circled\" name={clearSVG} size=\"30px\" />\n                </Button>\n              </Segment>\n            </Segment.Group>\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      lang: state.intl.locale,\n      error: state.userSession.login.error,\n      loading: state.userSession.login.loading,\n      token: state.userSession.token,\n      returnUrl:\n        qs.parse(props.location.search).return_url ||\n        props.location.pathname\n          .replace(/\\/login$/, '')\n          .replace(/\\/logout$/, '') ||\n        '/',\n    }),\n    { login, getNavigation },\n  ),\n)(Login);\n","/**\n * Logo component.\n * @module components/theme/Logo/Logo\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Image } from 'semantic-ui-react';\nimport { useSelector } from 'react-redux';\nimport config from '@plone/volto/registry';\n\nimport LogoImage from '@plone/volto/components/theme/Logo/Logo.svg';\n\nconst messages = defineMessages({\n  site: {\n    id: 'Site',\n    defaultMessage: 'Site',\n  },\n  plonesite: {\n    id: 'Plone Site',\n    defaultMessage: 'Plone Site',\n  },\n});\n\n/**\n * Logo component class.\n * @function Logo\n * @param {Object} intl Intl object\n * @returns {string} Markup of the component.\n */\nconst Logo = () => {\n  const { settings } = config;\n  const lang = useSelector((state) => state.intl.locale);\n  const intl = useIntl();\n\n  return (\n    <Link\n      to={settings.isMultilingual ? `/${lang}` : '/'}\n      title={intl.formatMessage(messages.site)}\n    >\n      <Image\n        src={LogoImage}\n        alt={intl.formatMessage(messages.plonesite)}\n        title={intl.formatMessage(messages.plonesite)}\n        height={64}\n      />\n    </Link>\n  );\n};\n\nexport default Logo;\n","module.exports = __webpack_public_path__ + \"static/media/Logo.d003c694.svg\";","/**\n * Login container.\n * @module components/theme/Logout/Logout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport qs from 'query-string';\n\nimport { Login } from '@plone/volto/components';\nimport { logout, purgeMessages } from '@plone/volto/actions';\n\n/**\n * Logout class.\n * @class Logout\n * @extends Component\n */\nclass Logout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    logout: PropTypes.func.isRequired,\n    purgeMessages: PropTypes.func.isRequired,\n    query: PropTypes.shape({\n      return_url: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    query: null,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.logout();\n    this.props.purgeMessages();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return <Login location={{ query: this.props.location.query }} />;\n  }\n}\n\nexport default connect(\n  (state, props) => ({\n    query: qs.parse(props.location.search),\n  }),\n  { logout, purgeMessages },\n)(Logout);\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { updateIntl } from 'react-intl-redux';\nimport cookie from 'react-cookie';\nimport config from '@plone/volto/registry';\n\nlet locales = {};\n\nif (config.settings) {\n  config.settings.supportedLanguages.forEach((lang) => {\n    import('~/../locales/' + lang + '.json').then((locale) => {\n      locales = { ...locales, [lang]: locale.default };\n    });\n  });\n}\n\nconst MultilingualRedirector = (props) => {\n  const { settings } = config;\n  const { pathname, children } = props;\n  const currentLanguage =\n    cookie.load('I18N_LANGUAGE') || settings.defaultLanguage;\n  const redirectToLanguage = settings.supportedLanguages.includes(\n    currentLanguage,\n  )\n    ? currentLanguage\n    : settings.defaultLanguage;\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    // ToDo: Add means to support language negotiation (with config)\n    // const detectedLang = (navigator.language || navigator.userLanguage).substring(0, 2);\n    if (settings.isMultilingual && pathname === '/') {\n      dispatch(\n        updateIntl({\n          locale: redirectToLanguage,\n          messages: locales[redirectToLanguage],\n        }),\n      );\n    }\n  }, [pathname, dispatch, redirectToLanguage, settings.isMultilingual]);\n\n  return pathname === '/' && settings.isMultilingual ? (\n    <Redirect to={`/${redirectToLanguage}`} />\n  ) : (\n    <>{children}</>\n  );\n};\n\nexport default MultilingualRedirector;\n","/**\n * Navigation components.\n * @module components/theme/Navigation/Navigation\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { NavLink } from 'react-router-dom';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Menu } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nimport { getNavigation } from '@plone/volto/actions';\n\nconst messages = defineMessages({\n  closeMobileMenu: {\n    id: 'Close menu',\n    defaultMessage: 'Close menu',\n  },\n  openMobileMenu: {\n    id: 'Open menu',\n    defaultMessage: 'Open menu',\n  },\n});\n\n/**\n * Navigation container class.\n * @class Navigation\n * @extends Component\n */\nclass Navigation extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getNavigation: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    lang: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Navigation\n   */\n  constructor(props) {\n    super(props);\n    this.toggleMobileMenu = this.toggleMobileMenu.bind(this);\n    this.closeMobileMenu = this.closeMobileMenu.bind(this);\n    this.state = {\n      isMobileMenuOpen: false,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    const { settings } = config;\n    this.props.getNavigation(\n      getBaseUrl(this.props.pathname),\n      settings.navDepth,\n    );\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { settings } = config;\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.getNavigation(\n        getBaseUrl(nextProps.pathname),\n        settings.navDepth,\n      );\n    }\n  }\n\n  /**\n   * Toggle mobile menu's open state\n   * @method toggleMobileMenu\n   * @returns {undefined}\n   */\n  toggleMobileMenu() {\n    this.setState({ isMobileMenuOpen: !this.state.isMobileMenuOpen });\n  }\n\n  /**\n   * Close mobile menu\n   * @method closeMobileMenu\n   * @returns {undefined}\n   */\n  closeMobileMenu() {\n    if (!this.state.isMobileMenuOpen) {\n      return;\n    }\n    this.setState({ isMobileMenuOpen: false });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { settings } = config;\n    const { lang } = this.props;\n\n    return (\n      <nav className=\"navigation\" id=\"navigation\">\n        <div className=\"hamburger-wrapper mobile tablet only\">\n          <button\n            className={cx('hamburger hamburger--collapse', {\n              'is-active': this.state.isMobileMenuOpen,\n            })}\n            aria-label={\n              this.state.isMobileMenuOpen\n                ? this.props.intl.formatMessage(messages.closeMobileMenu, {\n                    type: this.props.type,\n                  })\n                : this.props.intl.formatMessage(messages.openMobileMenu, {\n                    type: this.props.type,\n                  })\n            }\n            title={\n              this.state.isMobileMenuOpen\n                ? this.props.intl.formatMessage(messages.closeMobileMenu, {\n                    type: this.props.type,\n                  })\n                : this.props.intl.formatMessage(messages.openMobileMenu, {\n                    type: this.props.type,\n                  })\n            }\n            type=\"button\"\n            onClick={this.toggleMobileMenu}\n          >\n            <span className=\"hamburger-box\">\n              <span className=\"hamburger-inner\" />\n            </span>\n          </button>\n        </div>\n        <Menu\n          stackable\n          pointing\n          secondary\n          className={\n            this.state.isMobileMenuOpen\n              ? 'open'\n              : 'computer large screen widescreen only'\n          }\n          onClick={this.closeMobileMenu}\n        >\n          {this.props.items.map((item) => (\n            <NavLink\n              to={item.url === '' ? '/' : item.url}\n              key={item.url}\n              className=\"item\"\n              activeClassName=\"active\"\n              exact={\n                settings.isMultilingual\n                  ? item.url === `/${lang}`\n                  : item.url === ''\n              }\n            >\n              {item.title}\n            </NavLink>\n          ))}\n        </Menu>\n      </nav>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      items: state.navigation.items,\n      lang: state.intl.locale,\n    }),\n    { getNavigation },\n  ),\n)(Navigation);\n","/**\n * Home container.\n * @module components/theme/NotFound/NotFound\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport { withServerErrorCode } from '@plone/volto/helpers/Utils/Utils';\n\n/**\n * Not found function.\n * @function NotFound\n * @returns {string} Markup of the not found page.\n */\nconst NotFound = () => (\n  <Container className=\"view-wrapper\">\n    <h1>\n      <FormattedMessage\n        id=\"This page does not seem to exist…\"\n        defaultMessage=\"This page does not seem to exist…\"\n      />\n    </h1>\n    <p className=\"description\">\n      <FormattedMessage\n        id=\"We apologize for the inconvenience, but the page you were trying to access is not at this address. You can use the links below to help you find what you are looking for.\"\n        defaultMessage=\"We apologize for the inconvenience, but the page you were trying to access is not at this address. You can use the links below to help you find what you are looking for.\"\n      />\n    </p>\n    <p>\n      <FormattedMessage\n        id=\"If you are certain you have the correct web address but are encountering an error, please contact the {site_admin}.\"\n        defaultMessage=\"If you are certain you have the correct web address but are encountering an error, please contact the {site_admin}.\"\n        values={{\n          site_admin: (\n            <Link to=\"/contact-form\">\n              <FormattedMessage\n                id=\"Site Administration\"\n                defaultMessage=\"Site Administration\"\n              />\n            </Link>\n          ),\n        }}\n      />\n    </p>\n    <p>\n      <FormattedMessage id=\"Thank you.\" defaultMessage=\"Thank you.\" />\n    </p>\n  </Container>\n);\n\nexport default withServerErrorCode(404)(NotFound);\n","import React from 'react';\nimport { Message, Container } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport config from '@plone/volto/registry';\n\nconst OutdatedBrowser = () => {\n  const { settings } = config;\n  const browserdetect = useSelector((state) => state.browserdetect);\n  return (\n    settings.notSupportedBrowsers.includes(browserdetect?.name) && (\n      <Container style={{ marginBottom: '20px' }}>\n        <Message negative>\n          <Message.Header>\n            <FormattedMessage\n              id=\"You are using an outdated browser\"\n              defaultMessage=\"You are using an outdated browser\"\n            />\n          </Message.Header>\n          <p>\n            <FormattedMessage\n              id=\"deprecated_browser_notice_message\"\n              defaultMessage=\"You are using {browsername} {browserversion} which is deprecated by its vendor. That means that it does not get security updates and it is not ready for current modern web features, which deteriorates the user experience. Please upgrade to a modern browser.\"\n              values={{\n                browsername: browserdetect.name,\n                browserversion: browserdetect.version,\n              }}\n            />\n          </p>\n        </Message>\n      </Container>\n    )\n  );\n};\n\nexport default OutdatedBrowser;\n","/**\n * Pagination component.\n * @module components/theme/Pagination/Pagination\n */\n\nimport React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { Icon } from '@plone/volto/components';\nimport PropTypes from 'prop-types';\nimport { map } from 'lodash';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport leftChevron from '@plone/volto/icons/left-key.svg';\nimport rightChevron from '@plone/volto/icons/right-key.svg';\n\n/**\n * Component to display pagination.\n * @function Pagination\n * @param {number} current Current page\n * @param {number} total Total amount of pages\n * @param {number} pageSize Current page size\n * @param {Array} pageSizes Available page sizes\n * @param {function} onChangePage On page change handler\n * @param {function} onChangePageSize On page size change handler\n * @returns {string} Markup of the component.\n */\nconst Pagination = ({\n  current,\n  total,\n  pageSize,\n  pageSizes,\n  onChangePage,\n  onChangePageSize,\n}) => (\n  <Menu secondary attached>\n    <Menu.Menu>\n      {current > 0 && (\n        <Menu.Item\n          value={current - 1}\n          icon={<Icon name={leftChevron} size=\"23px\" />}\n          className=\"chevron-left-icon\"\n          onClick={onChangePage}\n        />\n      )}\n      {current > 2 && (\n        <Menu.Item value={0} onClick={onChangePage}>\n          1\n        </Menu.Item>\n      )}\n      {current > 3 && <Menu.Item disabled>...</Menu.Item>}\n      {current > 1 && (\n        <Menu.Item value={current - 2} onClick={onChangePage}>\n          {current - 1}\n        </Menu.Item>\n      )}\n      {current > 0 && (\n        <Menu.Item value={current - 1} onClick={onChangePage}>\n          {current}\n        </Menu.Item>\n      )}\n      {total > 1 && (\n        <Menu.Item value={current} active onClick={onChangePage}>\n          {current + 1}\n        </Menu.Item>\n      )}\n      {total > current + 1 && (\n        <Menu.Item value={current + 1} onClick={onChangePage}>\n          {current + 2}\n        </Menu.Item>\n      )}\n      {total > current + 2 && (\n        <Menu.Item value={current + 2} onClick={onChangePage}>\n          {current + 3}\n        </Menu.Item>\n      )}\n      {total > current + 4 && <Menu.Item disabled>...</Menu.Item>}\n      {total > current + 3 && (\n        <Menu.Item value={total - 1} onClick={onChangePage}>\n          {total}\n        </Menu.Item>\n      )}\n      {current < total - 1 && (\n        <Menu.Item\n          value={current + 1}\n          icon={<Icon name={rightChevron} size=\"23px\" />}\n          className=\"chevron-right-icon\"\n          onClick={onChangePage}\n        />\n      )}\n    </Menu.Menu>\n    {pageSize && (\n      <Menu.Menu position=\"right\">\n        <Menu.Item>\n          <FormattedMessage id=\"Show\" defaultMessage=\"Show\" />:\n        </Menu.Item>\n        {map(pageSizes, (size) => (\n          <Menu.Item\n            key={size}\n            value={size}\n            active={size === pageSize}\n            onClick={onChangePageSize}\n          >\n            {size}\n          </Menu.Item>\n        ))}\n      </Menu.Menu>\n    )}\n  </Menu>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nPagination.propTypes = {\n  /**\n   * Current page\n   */\n  current: PropTypes.number.isRequired,\n  /**\n   * Total number of pages\n   */\n  total: PropTypes.number.isRequired,\n  /**\n   * Number of items per page\n   */\n  pageSize: PropTypes.number,\n  /**\n   * Page sizes to choose from\n   */\n  pageSizes: PropTypes.arrayOf(PropTypes.number),\n  /**\n   * Handler called when changing the page\n   */\n  onChangePage: PropTypes.func.isRequired,\n  /**\n   * Handler called when changing the pagesize\n   */\n  onChangePageSize: PropTypes.func,\n};\n\n/**\n * Default props.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nPagination.defaultProps = {\n  pageSize: null,\n  pageSizes: [],\n  onChangePageSize: null,\n};\n\nexport default injectIntl(Pagination);\n","/**\n * PasswordReset component.\n * @module components/theme/PasswordReset/PasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { Form } from '@plone/volto/components';\nimport { setInitialPassword } from '@plone/volto/actions';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Set your password',\n    defaultMessage: 'Set your password',\n  },\n  description: {\n    id: 'Please fill out the form below to set your password.',\n    defaultMessage: 'Please fill out the form below to set your password.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  fullnameTitle: {\n    id: 'Full Name',\n    defaultMessage: 'Full Name',\n  },\n  fullnameDescription: {\n    id: 'Enter full name, e.g. John Smith.',\n    defaultMessage: 'Enter full name, e.g. John Smith.',\n  },\n  emailTitle: {\n    id: 'My email address is',\n    defaultMessage: 'My email address is',\n  },\n  emailDescription: {\n    id: 'Enter your email address for verification.',\n    defaultMessage: 'Enter your email address for verification.',\n  },\n  passwordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  passwordDescription: {\n    id: 'Enter your new password. Minimum 5 characters.',\n    defaultMessage: 'Enter your new password. Minimum 5 characters.',\n  },\n  passwordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  passwordsDoNotMatch: {\n    id: 'Passwords do not match.',\n    defaultMessage: 'Passwords do not match.',\n  },\n  mailDoNotMatch: {\n    id: 'E-mail addresses do not match.',\n    defaultMessage: 'E-mail addresses do not match.',\n  },\n  passwordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  setMyPassword: {\n    id: 'Set my password',\n    defaultMessage: 'Set my password',\n  },\n  successRedirectToLoginTitle: {\n    id: 'Account activation completed',\n    defaultMessage: 'Account activation completed',\n  },\n  successRedirectToLoginBody: {\n    id:\n      'Your password has been set successfully. You may now {link} with your new password.',\n    defaultMessage:\n      'Your password has been set successfully. You may now {link} with your new password.',\n  },\n  passwordReset: {\n    id: 'Password reset',\n    defaultMessage: 'Password reset',\n  },\n});\n\n/**\n * PasswordReset class.\n * @class PasswordReset\n * @extends Component\n */\nclass PasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    token: PropTypes.string.isRequired,\n    setInitialPassword: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n      isSuccessful: false,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {}\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({ isSuccessful: true });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.password === data.passwordRepeat) {\n      this.props.setInitialPassword(\n        data.email,\n        this.props.token,\n        data.password,\n      );\n      this.setState({\n        error: null,\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.props.intl.formatMessage(messages.passwordsDoNotMatch),\n        },\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return (\n        <Container>\n          <h1 className=\"documentFirstHeading\">\n            <FormattedMessage\n              id=\"Account activation completed\"\n              defaultMessage=\"Account activation completed\"\n            />\n          </h1>\n          <p className=\"description\">\n            <FormattedMessage\n              id=\"Your password has been set successfully. You may now {link} with your new password.\"\n              defaultMessage=\"Your password has been set successfully. You may now {link} with your new password.\"\n              values={{\n                link: (\n                  <Link to=\"/login\">\n                    {this.props.intl.formatMessage({ id: 'Log In' })}\n                  </Link>\n                ),\n              }}\n            />\n          </p>\n        </Container>\n      );\n    }\n    if (this.props.token) {\n      return (\n        <div id=\"page-password-reset\">\n          <Helmet\n            title={this.props.intl.formatMessage(messages.passwordReset)}\n          />\n          <Container>\n            <Form\n              title={this.props.intl.formatMessage(messages.title)}\n              description={this.props.intl.formatMessage(messages.description)}\n              onSubmit={this.onSubmit}\n              onCancel={this.onCancel}\n              error={this.state.error || this.props.error}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: this.props.intl.formatMessage(messages.default),\n                    fields: ['email', 'password', 'passwordRepeat'],\n                  },\n                ],\n                properties: {\n                  email: {\n                    type: 'string',\n                    title: this.props.intl.formatMessage(messages.emailTitle),\n                    description: this.props.intl.formatMessage(\n                      messages.emailDescription,\n                    ),\n                  },\n                  password: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                  passwordRepeat: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordRepeatDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordRepeatTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                },\n                submitLabel: this.props.intl.formatMessage(\n                  messages.setMyPassword,\n                ),\n                required: ['fullname', 'password', 'passwordRepeat'],\n              }}\n            />\n          </Container>\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      loading: state.users.initial.loading,\n      loaded: state.users.initial.loaded,\n      error: state.users.initial.error,\n      token: props.match.params.token,\n    }),\n    { setInitialPassword },\n  ),\n)(PasswordReset);\n","/**\n * RequestPasswordReset component.\n * @module components/theme/RequestPasswordReset/RequestPasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { Form } from '@plone/volto/components';\nimport { resetPassword } from '@plone/volto/actions';\n\nconst messages = defineMessages({\n  title: {\n    id: 'box_forgot_password_option',\n    defaultMessage: 'Forgot your password?',\n  },\n  description: {\n    id: 'description_lost_password',\n    defaultMessage:\n      'For security reasons, we store your password encrypted, and cannot mail it to you. If you would like to reset your password, fill out the form below and we will send you an email at the address you gave when you registered to start the process of resetting your password.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  emailTitle: {\n    id: 'label_my_email_address_is',\n    defaultMessage: 'My email address is',\n  },\n  sendEmail: {\n    id: 'Start password reset',\n    defaultMessage: 'Start password reset',\n  },\n  emailrequired: {\n    id: 'Your email is required for reset your password.',\n    defaultMessage: 'Your email is required for reset your password.',\n  },\n  passwordReset: {\n    id: 'Password reset',\n    defaultMessage: 'Password reset',\n  },\n});\n\n/**\n * RequestPasswordReset class.\n * @class RequestPasswordReset\n * @extends Component\n */\nclass RequestPasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    resetPassword: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n      isSuccessful: false,\n    };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {}\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({ isSuccessful: true });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.email) {\n      this.props.resetPassword(data.email);\n      this.setState({\n        error: null,\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.props.intl.formatMessage(messages.emailrequired),\n        },\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return (\n        <Container>\n          <h1 className=\"documentFirstHeading\">\n            <FormattedMessage\n              id=\"heading_sent_password\"\n              defaultMessage=\"Password reset confirmation sent\"\n            />\n          </h1>\n          <p className=\"description\">\n            <FormattedMessage\n              id=\"description_sent_password\"\n              defaultMessage=\"Your password reset request has been mailed. It should arrive in your mailbox shortly. When you receive the message, visit the address it contains to reset your password.\"\n            />\n          </p>\n        </Container>\n      );\n    }\n\n    return (\n      <div id=\"page-password-reset\">\n        <Helmet title={this.props.intl.formatMessage(messages.passwordReset)} />\n        <Container>\n          <Form\n            title={this.props.intl.formatMessage(messages.title)}\n            description={this.props.intl.formatMessage(messages.description)}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            error={this.state.error || this.props.error}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: ['email'],\n                },\n              ],\n              properties: {\n                email: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.emailTitle),\n                },\n              },\n              submitLabel: this.props.intl.formatMessage(messages.sendEmail),\n              required: ['email'],\n            }}\n          />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state) => ({\n      loading: state.users.reset.loading,\n      loaded: state.users.reset.loaded,\n      error: state.users.reset.error,\n    }),\n    { resetPassword },\n  ),\n)(RequestPasswordReset);\n","/**\n * Register container.\n * @module components/theme/Register/Register\n */\n\nimport React, { Component } from 'react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { Form, Toast } from '@plone/volto/components';\nimport { createUser } from '@plone/volto/actions';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Registration form',\n    defaultMessage: 'Registration form',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  fullnameTitle: {\n    id: 'Full Name',\n    defaultMessage: 'Full Name',\n  },\n  fullnameDescription: {\n    id: 'Enter full name, e.g. John Smith.',\n    defaultMessage: 'Enter full name, e.g. John Smith.',\n  },\n  emailTitle: {\n    id: 'E-mail',\n    defaultMessage: 'E-mail',\n  },\n  emailDescription: {\n    id:\n      'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n    defaultMessage:\n      'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n  },\n  successRegisterCompletedTitle: {\n    id: 'Account Registration Completed',\n    defaultMessage: 'Account Registration Completed',\n  },\n  successRegisterCompletedBody: {\n    id:\n      'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n    defaultMessage:\n      'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n  },\n  register: {\n    id: 'Register',\n    defaultMessage: 'Register',\n  },\n});\n\n/**\n * Register class.\n * @class Register\n * @extends Component\n */\nclass Register extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createUser: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(\n            messages.successRegisterCompletedTitle,\n          )}\n          content={this.props.intl.formatMessage(\n            messages.successRegisterCompletedBody,\n          )}\n        />,\n      );\n      this.props.history.push('/login');\n    }\n  }\n\n  /**\n   * On submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.createUser({\n      fullname: data.fullname,\n      email: data.email,\n      password: data.password,\n    });\n    this.setState({\n      error: null,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-register\">\n        <Helmet title={this.props.intl.formatMessage(messages.register)} />\n        <Form\n          onSubmit={this.onSubmit}\n          title={this.props.intl.formatMessage(messages.title)}\n          error={this.state.error || this.props.error}\n          loading={this.props.loading}\n          submitLabel={this.props.intl.formatMessage(messages.register)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['fullname', 'email'],\n              },\n            ],\n            properties: {\n              fullname: {\n                type: 'string',\n                title: this.props.intl.formatMessage(messages.fullnameTitle),\n                description: this.props.intl.formatMessage(\n                  messages.fullnameDescription,\n                ),\n              },\n              email: {\n                type: 'string',\n                title: this.props.intl.formatMessage(messages.emailTitle),\n                description: this.props.intl.formatMessage(\n                  messages.emailDescription,\n                ),\n              },\n            },\n            required: ['fullname', 'email'],\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state) => ({\n      loading: state.users.create.loading,\n      loaded: state.users.create.loaded,\n      error: state.users.create.error,\n    }),\n    { createUser },\n  ),\n)(Register);\n","/**\n * Search component.\n * @module components/theme/Search/Search\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { asyncConnect } from '@plone/volto/helpers';\nimport { FormattedMessage } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { Container, Pagination, Button, Header } from 'semantic-ui-react';\nimport qs from 'query-string';\nimport classNames from 'classnames';\n\nimport config from '@plone/volto/registry';\nimport { Helmet } from '@plone/volto/helpers';\nimport { searchContent } from '@plone/volto/actions';\nimport { SearchTags, Toolbar, Icon } from '@plone/volto/components';\n\nimport paginationLeftSVG from '@plone/volto/icons/left-key.svg';\nimport paginationRightSVG from '@plone/volto/icons/right-key.svg';\n\n/**\n * Search class.\n * @class SearchComponent\n * @extends Component\n */\nclass Search extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    searchContent: PropTypes.func.isRequired,\n    searchableText: PropTypes.string,\n    subject: PropTypes.string,\n    path: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        title: PropTypes.string,\n        description: PropTypes.string,\n      }),\n    ),\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    items: [],\n    searchableText: null,\n    subject: null,\n    path: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { currentPage: 1, isClient: false, active: 'relevance' };\n  }\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.doSearch();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps = (nextProps) => {\n    if (this.props.location.search !== nextProps.location.search) {\n      this.doSearch();\n    }\n  };\n\n  /**\n   * Search based on the given searchableText, subject and path.\n   * @method doSearch\n   * @param {string} searchableText The searchable text string\n   * @param {string} subject The subject (tag)\n   * @param {string} path The path to restrict the search to\n   * @returns {undefined}\n   */\n\n  doSearch = () => {\n    const options = qs.parse(this.props.history.location.search);\n    this.setState({ currentPage: 1 });\n    options['use_site_search_settings'] = 1;\n    this.props.searchContent('', options);\n  };\n\n  handleQueryPaginationChange = (e, { activePage }) => {\n    const { settings } = config;\n    window.scrollTo(0, 0);\n    let options = qs.parse(this.props.history.location.search);\n    options['use_site_search_settings'] = 1;\n\n    this.setState({ currentPage: activePage }, () => {\n      this.props.searchContent('', {\n        ...options,\n        b_start: (this.state.currentPage - 1) * settings.defaultPageSize,\n      });\n    });\n  };\n\n  onSortChange = (event, sort_order) => {\n    let options = qs.parse(this.props.history.location.search);\n    options.sort_on = event.target.name;\n    options.sort_order = sort_order || 'ascending';\n    if (event.target.name === 'relevance') {\n      delete options.sort_on;\n      delete options.sort_order;\n    }\n    let searchParams = qs.stringify(options);\n    this.setState({ currentPage: 1, active: event.target.name }, () => {\n      // eslint-disable-next-line no-restricted-globals\n      this.props.history.replace({\n        search: searchParams,\n      });\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { settings } = config;\n    return (\n      <Container id=\"page-search\">\n        <Helmet title=\"Search\" />\n        <div className=\"container\">\n          <article id=\"content\">\n            <header>\n              <h1 className=\"documentFirstHeading\">\n                {this.props.searchableText ? (\n                  <FormattedMessage\n                    id=\"Search results for {term}\"\n                    defaultMessage=\"Search results for {term}\"\n                    values={{\n                      term: <q>{this.props.searchableText}</q>,\n                    }}\n                  />\n                ) : (\n                  <FormattedMessage\n                    id=\"Search results\"\n                    defaultMessage=\"Search results\"\n                  />\n                )}\n              </h1>\n\n              <SearchTags />\n\n              {this.props.search?.items_total > 0 ? (\n                <div className=\"items_total\">\n                  {this.props.search.items_total}{' '}\n                  <FormattedMessage\n                    id=\"results found\"\n                    defaultMessage=\"results\"\n                  />\n                  <Header>\n                    <Header.Content className=\"header-content\">\n                      <div className=\"sort-by\">\n                        <FormattedMessage\n                          id=\"Sort By:\"\n                          defaultMessage=\"Sort by:\"\n                        />\n                      </div>\n                      <Button\n                        onClick={(event) => {\n                          this.onSortChange(event);\n                        }}\n                        name=\"relevance\"\n                        size=\"tiny\"\n                        className={classNames('button-sort', {\n                          'button-active': this.state.active === 'relevance',\n                        })}\n                      >\n                        <FormattedMessage\n                          id=\"Relevance\"\n                          defaultMessage=\"Relevance\"\n                        />\n                      </Button>\n                      <Button\n                        onClick={(event) => {\n                          this.onSortChange(event);\n                        }}\n                        name=\"sortable_title\"\n                        size=\"tiny\"\n                        className={classNames('button-sort', {\n                          'button-active':\n                            this.state.active === 'sortable_title',\n                        })}\n                      >\n                        <FormattedMessage\n                          id=\"Alphabetically\"\n                          defaultMessage=\"Alphabetically\"\n                        />\n                      </Button>\n                      <Button\n                        onClick={(event) => {\n                          this.onSortChange(event, 'reverse');\n                        }}\n                        name=\"effective\"\n                        size=\"tiny\"\n                        className={classNames('button-sort', {\n                          'button-active': this.state.active === 'effective',\n                        })}\n                      >\n                        <FormattedMessage\n                          id=\"Date (newest first)\"\n                          defaultMessage=\"Date (newest first)\"\n                        />\n                      </Button>\n                    </Header.Content>\n                  </Header>\n                </div>\n              ) : (\n                <div>\n                  <FormattedMessage\n                    id=\"No results found\"\n                    defaultMessage=\"No results found\"\n                  />\n                </div>\n              )}\n            </header>\n            <section id=\"content-core\">\n              {this.props.items.map((item) => (\n                <article className=\"tileItem\" key={item['@id']}>\n                  <h2 className=\"tileHeadline\">\n                    <Link\n                      to={item['@id']}\n                      className=\"summary url\"\n                      title={item['@type']}\n                    >\n                      {item.title}\n                    </Link>\n                  </h2>\n                  {item.description && (\n                    <div className=\"tileBody\">\n                      <span className=\"description\">{item.description}</span>\n                    </div>\n                  )}\n                  <div className=\"tileFooter\">\n                    <Link to={item['@id']}>\n                      <FormattedMessage\n                        id=\"Read More…\"\n                        defaultMessage=\"Read More…\"\n                      />\n                    </Link>\n                  </div>\n                  <div className=\"visualClear\" />\n                </article>\n              ))}\n\n              {this.props.search?.batching && (\n                <div className=\"search-footer\">\n                  <Pagination\n                    activePage={this.state.currentPage}\n                    totalPages={Math.ceil(\n                      this.props.search.items_total / settings.defaultPageSize,\n                    )}\n                    onPageChange={this.handleQueryPaginationChange}\n                    firstItem={null}\n                    lastItem={null}\n                    prevItem={{\n                      content: <Icon name={paginationLeftSVG} size=\"18px\" />,\n                      icon: true,\n                      'aria-disabled': !this.props.search.batching.prev,\n                      className: !this.props.search.batching.prev\n                        ? 'disabled'\n                        : null,\n                    }}\n                    nextItem={{\n                      content: <Icon name={paginationRightSVG} size=\"18px\" />,\n                      icon: true,\n                      'aria-disabled': !this.props.search.batching.next,\n                      className: !this.props.search.batching.next\n                        ? 'disabled'\n                        : null,\n                    }}\n                  />\n                </div>\n              )}\n            </section>\n          </article>\n        </div>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={<span />}\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport const __test__ = connect(\n  (state, props) => ({\n    items: state.search.items,\n    searchableText: qs.parse(props.history.location.search).SearchableText,\n    pathname: props.history.location.pathname,\n  }),\n  { searchContent },\n)(Search);\n\nexport default compose(\n  connect(\n    (state, props) => ({\n      items: state.search.items,\n      searchableText: qs.parse(props.history.location.search).SearchableText,\n      pathname: props.location.pathname,\n    }),\n    { searchContent },\n  ),\n  asyncConnect([\n    {\n      key: 'search',\n      promise: ({ location, store: { dispatch } }) =>\n        dispatch(\n          searchContent('', {\n            ...qs.parse(location.search),\n            use_site_search_settings: 1,\n          }),\n        ),\n    },\n  ]),\n)(Search);\n","/**\n * Search tags components.\n * @module components/theme/Search/SearchTags\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { getVocabulary } from '@plone/volto/actions';\n\nconst vocabulary = 'plone.app.vocabularies.Keywords';\n\n/**\n * Search tags container class.\n * @class SearchTags\n * @extends Component\n */\nclass SearchTags extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getVocabulary: PropTypes.func.isRequired,\n    terms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.getVocabulary(vocabulary);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.terms && this.props.terms.length > 0 ? (\n      <div>\n        {this.props.terms.map((term) => (\n          <Link\n            className=\"ui label\"\n            to={`/search?Subject=${term.title}`}\n            key={term.title}\n          >\n            {term.title}\n          </Link>\n        ))}\n      </div>\n    ) : (\n      <span />\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    terms:\n      state.vocabularies[vocabulary] && state.vocabularies[vocabulary].terms\n        ? state.vocabularies[vocabulary].terms\n        : [],\n  }),\n  { getVocabulary },\n)(SearchTags);\n","/**\n * Search widget component.\n * @module components/theme/SearchWidget/SearchWidget\n */\n\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Form, Input } from 'semantic-ui-react';\nimport { compose } from 'redux';\nimport { PropTypes } from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { Icon } from '@plone/volto/components';\nimport zoomSVG from '@plone/volto/icons/zoom.svg';\n\nconst messages = defineMessages({\n  search: {\n    id: 'Search',\n    defaultMessage: 'Search',\n  },\n  searchSite: {\n    id: 'Search Site',\n    defaultMessage: 'Search Site',\n  },\n});\n\n/**\n * SearchWidget component class.\n * @class SearchWidget\n * @extends Component\n */\nclass SearchWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeText = this.onChangeText.bind(this);\n    this.onChangeSection = this.onChangeSection.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      text: '',\n      section: false,\n    };\n  }\n\n  /**\n   * On change text\n   * @method onChangeText\n   * @param {object} event Event object.\n   * @param {string} value Text value.\n   * @returns {undefined}\n   */\n  onChangeText(event, { value }) {\n    this.setState({\n      text: value,\n    });\n  }\n\n  /**\n   * On change section\n   * @method onChangeSection\n   * @param {object} event Event object.\n   * @param {bool} checked Section checked.\n   * @returns {undefined}\n   */\n  onChangeSection(event, { checked }) {\n    this.setState({\n      section: checked,\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {event} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    const section = this.state.section ? `&path=${this.props.pathname}` : '';\n    this.props.history.push(\n      `/search?SearchableText=${this.state.text}${section}`,\n    );\n    event.preventDefault();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Form action=\"/search\" onSubmit={this.onSubmit}>\n        <Form.Field className=\"searchbox\">\n          <Input\n            aria-label={this.props.intl.formatMessage(messages.search)}\n            onChange={this.onChangeText}\n            name=\"SearchableText\"\n            value={this.state.text}\n            transparent\n            autoComplete=\"off\"\n            placeholder={this.props.intl.formatMessage(messages.searchSite)}\n            title={this.props.intl.formatMessage(messages.search)}\n          />\n          <button aria-label={this.props.intl.formatMessage(messages.search)}>\n            <Icon name={zoomSVG} size=\"18px\" />\n          </button>\n        </Form.Field>\n      </Form>\n    );\n  }\n}\n\nexport default compose(withRouter, injectIntl)(SearchWidget);\n","/**\n * Login container.\n * @module components/theme/Sitemap/Sitemap\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Link } from 'react-router-dom';\nimport config from '@plone/volto/registry';\n\nimport { getNavigation } from '@plone/volto/actions';\n\nconst messages = defineMessages({\n  Sitemap: {\n    id: 'Sitemap',\n    defaultMessage: 'Sitemap',\n  },\n});\n/**\n * Sitemap class.\n * @class Sitemap\n * @extends Component\n */\nclass Sitemap extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getNavigation: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    const { settings } = config;\n    if (settings.isMultilingual) {\n      this.props.getNavigation(`/${this.props.lang}`, 4);\n    } else {\n      this.props.getNavigation('/', 4);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n  renderItems = (items) => {\n    return (\n      <ul>\n        {items.map((item) => (\n          <li\n            key={item.url}\n            className={item.items?.length > 0 ? 'with-children' : ''}\n          >\n            <Link to={item.url}>{item.title}</Link>\n            {item.items && this.renderItems(item.items)}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n  render() {\n    const { items } = this.props;\n    return (\n      <div id=\"page-sitemap\">\n        <Helmet title={this.props.intl.formatMessage(messages.Sitemap)} />\n        <Container className=\"view-wrapper\">\n          <h1>{this.props.intl.formatMessage(messages.Sitemap)} </h1>\n          {items && this.renderItems(items)}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      items: state.navigation.items,\n      lang: state.intl.locale,\n    }),\n    { getNavigation },\n  ),\n)(Sitemap);\n","import React from 'react';\nimport { useIntl, defineMessages } from 'react-intl';\n\nconst messages = defineMessages({\n  mainView: {\n    id: 'skiplink-main-content',\n    defaultMessage: 'Skip to main content',\n  },\n  navigation: {\n    id: 'skiplink-navigation',\n    defaultMessage: 'Skip to navigation',\n  },\n  footer: {\n    id: 'skiplink-footer',\n    defaultMessage: 'Skip to footer',\n  },\n});\n\nconst SkipLinks = () => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"skiplinks-wrapper\">\n      <a className=\"skiplink\" href=\"#view\">\n        {intl.formatMessage(messages.mainView)}\n      </a>\n      <a className=\"skiplink\" href=\"#navigation\">\n        {intl.formatMessage(messages.navigation)}\n      </a>\n      <a className=\"skiplink\" href=\"#footer\">\n        {intl.formatMessage(messages.footer)}\n      </a>\n    </div>\n  );\n};\n\nexport default SkipLinks;\n","/**\n * Social sharing component.\n * @module components/theme/SocialSharing/SocialSharing\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Container } from 'semantic-ui-react';\nimport { FacebookShareButton, TwitterShareButton } from 'react-share';\n\n/**\n * Social sharing component class.\n * @function SocialSharing\n * @param {string} url Url to share.\n * @param {string} title Title of the content.\n * @param {string} description Description of the content.\n * @returns {string} Markup of the component.\n */\nconst SocialSharing = ({ url, title, description }) => (\n  <Container style={{ clear: 'both' }}>\n    <br />\n    <FacebookShareButton url={url} quote={title}>\n      <Button color=\"facebook\" size=\"mini\">\n        Facebook\n      </Button>\n    </FacebookShareButton>\n    <TwitterShareButton url={url} title={title} description={description}>\n      <Button color=\"twitter\" size=\"mini\">\n        Twitter\n      </Button>\n    </TwitterShareButton>\n    <br />\n    <br />\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSocialSharing.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default SocialSharing;\n","/**\n * Tags component.\n * @module components/theme/Tags/Tags\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Container } from 'semantic-ui-react';\n\n/**\n * Tags component class.\n * @function Tags\n * @param {array} tags Array of tags.\n * @returns {string} Markup of the component.\n */\nconst Tags = ({ tags }) =>\n  tags && tags.length > 0 ? (\n    <Container className=\"tags\">\n      {tags.map((tag) => (\n        <Link className=\"ui label\" to={`/search?Subject=${tag}`} key={tag}>\n          {tag}\n        </Link>\n      ))}\n    </Container>\n  ) : (\n    <span />\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTags.propTypes = {\n  tags: PropTypes.arrayOf(PropTypes.string),\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nTags.defaultProps = {\n  tags: null,\n};\n\nexport default Tags;\n","/**\n * Title component.\n * @module components/theme/Title/Title\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to display a title.\n * @function Field\n * @param {Object} props Component properties.\n * @param {string} props.title Title.\n * @returns {string} Markup of the component.\n */\nconst Title = ({ title }) => <h1 className=\"documentFirstHeading\">{title}</h1>;\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTitle.propTypes = {\n  /**\n   * The title\n   */\n  title: PropTypes.string.isRequired,\n};\n\nexport default Title;\n","/**\n * @module components/theme/Unauthorized/Unauthorized\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { withServerErrorCode } from '@plone/volto/helpers/Utils/Utils';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\n/**\n * unauthorized function.\n * @function Unauthorized\n * @returns {string} Markup of the unauthorized page.\n */\nconst Unauthorized = () => {\n  const error_message = useSelector((state) => state.apierror.message);\n  let location = useLocation();\n\n  return (\n    <Container className=\"view-wrapper\">\n      <h1>\n        <FormattedMessage id=\"Unauthorized\" defaultMessage=\"Unauthorized\" />\n      </h1>\n      <h3>{error_message}</h3>\n      <p className=\"description\">\n        <FormattedMessage\n          id=\"You are trying to access a protected resource, please {login} first.\"\n          defaultMessage=\"You are trying to access a protected resource, please {login} first.\"\n          values={{\n            login: (\n              <Link to={`${getBaseUrl(location.pathname)}/login`}>\n                <FormattedMessage id=\"log in\" defaultMessage=\"log in\" />\n              </Link>\n            ),\n          }}\n        />\n      </p>\n      <p>\n        <FormattedMessage\n          id=\"If you are certain you have the correct web address but are encountering an error, please contact the {site_admin}.\"\n          defaultMessage=\"If you are certain you have the correct web address but are encountering an error, please contact the {site_admin}.\"\n          values={{\n            site_admin: (\n              <Link to=\"/contact-form\">\n                <FormattedMessage\n                  id=\"Site Administration\"\n                  defaultMessage=\"Site Administration\"\n                />\n              </Link>\n            ),\n          }}\n        />\n      </p>\n      <p>\n        <FormattedMessage id=\"Thank you.\" defaultMessage=\"Thank you.\" />\n      </p>\n    </Container>\n  );\n};\n\nexport default withServerErrorCode(401)(Unauthorized);\n","/**\n * Album view component.\n * @module components/theme/View/AlbumView\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Container, Image, GridColumn, Segment } from 'semantic-ui-react';\nimport { Button, Modal, Grid } from 'semantic-ui-react';\nimport { Icon } from '@plone/volto/components';\n\nimport openSVG from '@plone/volto/icons/open.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\n/**\n * Album view component class.\n * @function AlbumView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nclass AlbumView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      openIndex: undefined,\n    };\n\n    this.closeModal = this.closeModal.bind(this);\n    this.nextImage = this.nextImage.bind(this);\n    this.prevImage = this.prevImage.bind(this);\n  }\n\n  closeModal() {\n    this.setState({\n      openIndex: -1,\n    });\n  }\n\n  nextImage() {\n    const openIndex =\n      (this.state.openIndex + 1) % this.props.content.items.length;\n    this.setState({\n      openIndex,\n    });\n  }\n\n  prevImage() {\n    const openIndex =\n      (this.state.openIndex - 1) % this.props.content.items.length;\n    this.setState({\n      openIndex,\n    });\n  }\n\n  render() {\n    const { content } = this.props;\n    return (\n      <Container className=\"view-wrapper\">\n        <article id=\"content\">\n          <header>\n            <h1 className=\"documentFirstHeading\">{content.title}</h1>\n            {content.description && (\n              <p className=\"documentDescription\">{content.description}</p>\n            )}\n          </header>\n          <section id=\"content-core\">\n            <Grid doubling stackable columns={4}>\n              {content.items &&\n                content.items.map((item, index) => (\n                  <React.Fragment key={item.url}>\n                    {item.image && (\n                      <Modal\n                        className=\"gallery\"\n                        onClose={this.closeModal}\n                        open={this.state.openIndex === index}\n                        trigger={\n                          <Grid.Column>\n                            <Segment className=\"imageborder\">\n                              <Image\n                                verticalAlign=\"middle\"\n                                alt={\n                                  item.image_caption\n                                    ? item.image_caption\n                                    : item.title\n                                }\n                                src={flattenToAppURL(\n                                  item.image.scales.preview.download,\n                                )}\n                                onClick={() => {\n                                  this.setState({\n                                    openIndex: index,\n                                  });\n                                }}\n                              />\n                            </Segment>\n                          </Grid.Column>\n                        }\n                        closeIcon\n                      >\n                        <Modal.Header>\n                          <Grid>\n                            <Grid.Row>\n                              <GridColumn width={10}>{item.title}</GridColumn>\n                              <GridColumn width={2} textAlign=\"right\">\n                                <Link\n                                  to={item.url}\n                                  title={item['@type']}\n                                  onClick={this.closeModal}\n                                >\n                                  <Icon size=\"30px\" fitted name={openSVG} />\n                                </Link>\n                              </GridColumn>\n                            </Grid.Row>\n                          </Grid>\n                        </Modal.Header>\n                        <Grid centered verticalAlign=\"middle\">\n                          <Grid.Row>\n                            <Grid.Column width={2} textAlign=\"center\">\n                              <Button\n                                className=\"gallery noborder\"\n                                onClick={this.nextImage}\n                                style={{ margin: 0 }}\n                              >\n                                <Icon\n                                  name={backSVG}\n                                  className=\"circled\"\n                                  size=\"30px\"\n                                  style={{ margin: 0 }}\n                                />\n                              </Button>\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                              <Modal.Content image>\n                                <Image\n                                  wrapped\n                                  alt={\n                                    item.image_caption\n                                      ? item.image_caption\n                                      : item.title\n                                  }\n                                  src={item.image.scales.large.download}\n                                />\n                                <Modal.Description>\n                                  <p>{item.description}</p>\n                                </Modal.Description>\n                              </Modal.Content>\n                            </Grid.Column>\n                            <Grid.Column width={2} textAlign=\"center\">\n                              <Button\n                                onClick={this.nextImage}\n                                className=\"gallery noborder\"\n                                style={{ margin: 0 }}\n                              >\n                                <Icon\n                                  name={aheadSVG}\n                                  className=\"circled\"\n                                  size=\"30px\"\n                                  style={{ margin: 0 }}\n                                />\n                              </Button>\n                            </Grid.Column>\n                          </Grid.Row>\n                        </Grid>\n                      </Modal>\n                    )}\n                  </React.Fragment>\n                ))}\n            </Grid>\n          </section>\n        </article>\n      </Container>\n    );\n  }\n}\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nAlbumView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Child items of the object\n     */\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        /**\n         * Title of the item\n         */\n        title: PropTypes.string,\n        /**\n         * Description of the item\n         */\n        description: PropTypes.string,\n        /**\n         * Url of the item\n         */\n        url: PropTypes.string,\n        /**\n         * Image of the item\n         */\n        image: PropTypes.object,\n        /**\n         * Image caption of the item\n         */\n        image_caption: PropTypes.string,\n        /**\n         * Type of the item\n         */\n        '@type': PropTypes.string,\n      }),\n    ),\n  }).isRequired,\n};\n\nexport default AlbumView;\n","/**\n * Document view component.\n * @module components/theme/View/DefaultView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { Container, Image } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport config from '@plone/volto/registry';\n\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n  getBaseUrl,\n} from '@plone/volto/helpers';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n});\n\n/**\n * Component to display the default view.\n * @function DefaultView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst DefaultView = ({ content, intl, location }) => {\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n\n  return hasBlocksData(content) ? (\n    <div id=\"page-document\" className=\"ui container\">\n      {map(content[blocksLayoutFieldname].items, (block) => {\n        const Block =\n          config.blocks.blocksConfig[\n            content[blocksFieldname]?.[block]?.['@type']\n          ]?.['view'] || null;\n        return Block !== null ? (\n          <Block\n            key={block}\n            id={block}\n            properties={content}\n            data={content[blocksFieldname][block]}\n            path={getBaseUrl(location?.pathname || '')}\n          />\n        ) : (\n          <div key={block}>\n            {intl.formatMessage(messages.unknownBlock, {\n              block: content[blocksFieldname]?.[block]?.['@type'],\n            })}\n          </div>\n        );\n      })}\n    </div>\n  ) : (\n    <Container id=\"page-document\">\n      <h1 className=\"documentFirstHeading\">{content.title}</h1>\n      {content.description && (\n        <p className=\"documentDescription\">{content.description}</p>\n      )}\n      {content.image && (\n        <Image\n          className=\"document-image\"\n          src={content.image.scales.thumb.download}\n          floated=\"right\"\n        />\n      )}\n      {content.remoteUrl && (\n        <span>\n          The link address is:\n          <a href={content.remoteUrl}>{content.remoteUrl}</a>\n        </span>\n      )}\n      {content.text && (\n        <div\n          dangerouslySetInnerHTML={{\n            __html: content.text.data,\n          }}\n        />\n      )}\n    </Container>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDefaultView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default injectIntl(DefaultView);\n","/**\n * File view component.\n * @module components/theme/View/FileView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container } from 'semantic-ui-react';\n\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\n/**\n * File view component class.\n * @function FileView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst FileView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    <h1 className=\"documentFirstHeading\">\n      {content.title}\n      {content.subtitle && ` - ${content.subtitle}`}\n    </h1>\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    {content.file?.download && (\n      <a href={flattenToAppURL(content.file.download)}>\n        {content.file.filename}\n      </a>\n    )}\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFileView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    file: PropTypes.shape({\n      download: PropTypes.string,\n      filename: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default FileView;\n","/**\n * Image view component.\n * @module components/theme/View/ImageView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\nimport prettybytes from 'pretty-bytes';\n\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\n/**\n * Image view component class.\n * @function ImageView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst ImageView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    <h1 className=\"documentFirstHeading\">\n      {content.title}\n      {content.subtitle && ` - ${content.subtitle}`}\n    </h1>\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    {content?.image?.download && (\n      <a href={flattenToAppURL(content.image.download)}>\n        <img\n          alt={content.title}\n          src={flattenToAppURL(content.image.scales.preview.download)}\n        />\n        <figcaption>\n          <FormattedMessage\n            id=\"Size: {size}\"\n            defaultMessage=\"Size: {size}\"\n            values={{ size: prettybytes(content.image.size) }}\n          />\n          &nbsp; &mdash; &nbsp;\n          <FormattedMessage\n            id=\"Click to download full sized image\"\n            defaultMessage=\"Click to download full sized image\"\n          />\n        </figcaption>\n      </a>\n    )}\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nImageView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.shape({\n      scales: PropTypes.shape({\n        preview: PropTypes.shape({\n          download: PropTypes.string,\n        }),\n      }),\n    }),\n  }).isRequired,\n};\n\nexport default ImageView;\n","/**\n * Link View.\n * @module components/theme/View/LinkView\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { isInternalURL, flattenToAppURL } from '@plone/volto/helpers';\nimport { Link } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport URLUtils from '@plone/volto/components/manage/AnchorPlugin/utils/URLUtils';\n\n/**\n * View container class.\n * @class View\n * @extends Component\n */\nclass LinkView extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    content: PropTypes.shape({\n      title: PropTypes.string,\n      description: PropTypes.string,\n      remoteUrl: PropTypes.string,\n    }),\n    token: PropTypes.string,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    content: null,\n    token: null,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    if (!this.props.token) {\n      const { remoteUrl } = this.props.content;\n      if (isInternalURL(remoteUrl)) {\n        this.props.history.replace(flattenToAppURL(remoteUrl));\n      } else if (!__SERVER__) {\n        window.location.href = flattenToAppURL(remoteUrl);\n      }\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { remoteUrl } = this.props.content;\n    return (\n      <Container id=\"page-document\">\n        <h1 className=\"documentFirstHeading\">{this.props.content.title}</h1>\n        {this.props.content.description && (\n          <p className=\"documentDescription\">\n            {this.props.content.description}\n          </p>\n        )}\n        {remoteUrl && (\n          <span>\n            The link address is:\n            {isInternalURL(remoteUrl) ? (\n              <Link to={flattenToAppURL(remoteUrl)}>\n                {flattenToAppURL(remoteUrl)}\n              </Link>\n            ) : (\n              <>\n                {URLUtils.isMail('mailto:' + remoteUrl) ? (\n                  <a\n                    href={URLUtils.normaliseMail(remoteUrl)}\n                    rel=\"noopener noreferrer\"\n                  >\n                    {remoteUrl}\n                  </a>\n                ) : (\n                  <>\n                    {URLUtils.isTelephone(remoteUrl) ? (\n                      <a\n                        href={URLUtils.normalizeTelephone(remoteUrl)}\n                        rel=\"noopener noreferrer\"\n                      >\n                        {remoteUrl}\n                      </a>\n                    ) : (\n                      <a\n                        href={remoteUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        {remoteUrl}\n                      </a>\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </span>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default LinkView;\n","/**\n * Document view component.\n * @module components/theme/View/ListingView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Segment, Container, Image } from 'semantic-ui-react';\n\n/**\n * List view component class.\n * @function ListingView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst ListingView = ({ content }) => (\n  <Container id=\"page-home\">\n    <section id=\"content-core\">\n      {content.items.map((item) => (\n        <Segment key={item.url} className=\"listing-item\">\n          <Container>\n            <h2>\n              <Link to={item.url} title={item['@type']}>\n                {item.title}\n              </Link>\n            </h2>\n            {item.description && <p>{item.description}</p>}\n          </Container>\n          {item.image && (\n            <Image\n              size=\"small\"\n              alt={item.image_caption ? item.image_caption : item.title}\n              src={item.image.scales.thumb.download}\n            />\n          )}\n        </Segment>\n      ))}\n    </section>\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nListingView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        description: PropTypes.string,\n        review_state: PropTypes.string,\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ),\n  }).isRequired,\n};\n\nexport default ListingView;\n","/**\n * NewsItemView view component.\n * @module components/theme/View/NewsItemView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Image } from 'semantic-ui-react';\n\nimport { flattenToAppURL, flattenHTMLToAppURL } from '@plone/volto/helpers';\n\n/**\n * NewsItemView view component class.\n * @function NewsItemView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst NewsItemView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    {content.title && (\n      <h1 className=\"documentFirstHeading\">\n        {content.title}\n        {content.subtitle && ` - ${content.subtitle}`}\n      </h1>\n    )}\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    {content.image && (\n      <Image\n        className=\"documentImage\"\n        alt={content.title}\n        title={content.title}\n        src={\n          content.image['content-type'] === 'image/svg+xml'\n            ? flattenToAppURL(content.image.download)\n            : flattenToAppURL(content.image.scales.mini.download)\n        }\n        floated=\"right\"\n      />\n    )}\n    {content.text && (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: flattenHTMLToAppURL(content.text.data),\n        }}\n      />\n    )}\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nNewsItemView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    text: PropTypes.shape({\n      data: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default NewsItemView;\n","import React from 'react';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { map } from 'lodash';\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n} from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n});\n\nconst RenderBlocks = (props) => {\n  const { location, intl, content, metadata } = props;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  const blocksConfig = props.blocksConfig || config.blocks.blocksConfig;\n  const CustomTag = `${props.as || 'div'}`;\n\n  return hasBlocksData(content) ? (\n    <CustomTag>\n      {map(content[blocksLayoutFieldname].items, (block) => {\n        const Block =\n          blocksConfig[content[blocksFieldname]?.[block]?.['@type']]?.view;\n        return Block ? (\n          <Block\n            key={block}\n            id={block}\n            metadata={metadata}\n            properties={content}\n            data={content[blocksFieldname][block]}\n            path={getBaseUrl(location?.pathname || '')}\n            blocksConfig={blocksConfig}\n          />\n        ) : (\n          <div key={block}>\n            {intl.formatMessage(messages.unknownBlock, {\n              block: content[blocksFieldname]?.[block]?.['@type'],\n            })}\n          </div>\n        );\n      })}\n    </CustomTag>\n  ) : (\n    ''\n  );\n};\n\nexport default injectIntl(RenderBlocks);\n","/**\n * Summary view component.\n * @module components/theme/View/SummaryView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Container, Image } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Summary view component class.\n * @function SummaryView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst SummaryView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    <article id=\"content\">\n      <header>\n        <h1 className=\"documentFirstHeading\">{content.title}</h1>\n        {content.description && (\n          <p className=\"documentDescription\">{content.description}</p>\n        )}\n      </header>\n      <section id=\"content-core\">\n        {content.items.map((item) => (\n          <article key={item.url}>\n            <h2>\n              <Link to={item.url} title={item['@type']}>\n                {item.title}\n              </Link>\n            </h2>\n            {item.image && (\n              <Image\n                clearing\n                floated=\"right\"\n                alt={item.image_caption ? item.image_caption : item.title}\n                src={item.image.scales.thumb.download}\n              />\n            )}\n            {item.description && <p>{item.description}</p>}\n            <p>\n              <Link to={item.url}>\n                <FormattedMessage id=\"Read More…\" defaultMessage=\"Read More…\" />\n              </Link>\n            </p>\n          </article>\n        ))}\n      </section>\n    </article>\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSummaryView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Child items of the object\n     */\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        /**\n         * Title of the item\n         */\n        title: PropTypes.string,\n        /**\n         * Description of the item\n         */\n        description: PropTypes.string,\n        /**\n         * Url of the item\n         */\n        url: PropTypes.string,\n        /**\n         * Image of the item\n         */\n        image: PropTypes.object,\n        /**\n         * Image caption of the item\n         */\n        image_caption: PropTypes.string,\n        /**\n         * Type of the item\n         */\n        '@type': PropTypes.string,\n      }),\n    ),\n  }).isRequired,\n};\n\nexport default SummaryView;\n","/**\n * Tabular view component.\n * @module components/theme/View/TabularView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Container, Table } from 'semantic-ui-react';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Tabular view component class.\n * @function TabularView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst TabularView = ({ content }) => (\n  <Container className=\"view-wrapper\">\n    <article id=\"content\">\n      <header>\n        <h1 className=\"documentFirstHeading\">{content.title}</h1>\n        {content.description && (\n          <p className=\"documentDescription\">{content.description}</p>\n        )}\n      </header>\n      <section id=\"content-core\">\n        <Table celled padded>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>\n                <FormattedMessage id=\"Title\" defaultMessage=\"Title\" />\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n                <FormattedMessage\n                  id=\"Description\"\n                  defaultMessage=\"Description\"\n                />\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n                <FormattedMessage id=\"Type\" defaultMessage=\"Type\" />\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n                <FormattedMessage id=\"State\" defaultMessage=\"State\" />\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {content.items.map((item) => (\n              <Table.Row key={item.url}>\n                <Table.Cell>\n                  <Link\n                    to={item.url}\n                    className=\"summary url\"\n                    title={item['@type']}\n                  >\n                    {item.title}\n                  </Link>\n                </Table.Cell>\n                <Table.Cell>{item.description}</Table.Cell>\n                <Table.Cell>{item['@type']}</Table.Cell>\n                <Table.Cell>{item.review_state}</Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </section>\n    </article>\n  </Container>\n);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nTabularView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Child items of the object\n     */\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        /**\n         * Title of the item\n         */\n        title: PropTypes.string,\n        /**\n         * Description of the item\n         */\n        description: PropTypes.string,\n        /**\n         * Url of the item\n         */\n        url: PropTypes.string,\n        /**\n         * Review state of the item\n         */\n        review_state: PropTypes.string,\n        /**\n         * Type of the item\n         */\n        '@type': PropTypes.string,\n      }),\n    ),\n  }).isRequired,\n};\n\nexport default TabularView;\n","/**\n * View container.\n * @module components/theme/View/View\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Portal } from 'react-portal';\nimport { injectIntl } from 'react-intl';\nimport { Helmet } from '@plone/volto/helpers';\nimport qs from 'query-string';\nimport config from '@plone/volto/registry';\n\nimport { Comments, Tags, Toolbar } from '@plone/volto/components';\nimport { listActions, getContent } from '@plone/volto/actions';\nimport {\n  BodyClass,\n  getBaseUrl,\n  getLayoutFieldname,\n} from '@plone/volto/helpers';\n\n/**\n * View container class.\n * @class View\n * @extends Component\n */\nclass View extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    listActions: PropTypes.func.isRequired,\n    /**\n     * Action to get the content\n     */\n    getContent: PropTypes.func.isRequired,\n    /**\n     * Pathname of the object\n     */\n    pathname: PropTypes.string.isRequired,\n    location: PropTypes.shape({\n      search: PropTypes.string,\n      pathname: PropTypes.string,\n    }).isRequired,\n    /**\n     * Version id of the object\n     */\n    versionId: PropTypes.string,\n    /**\n     * Content of the object\n     */\n    content: PropTypes.shape({\n      /**\n       * Layout of the object\n       */\n      layout: PropTypes.string,\n      /**\n       * Allow discussion of the object\n       */\n      allow_discussion: PropTypes.bool,\n      /**\n       * Title of the object\n       */\n      title: PropTypes.string,\n      /**\n       * Description of the object\n       */\n      description: PropTypes.string,\n      /**\n       * Type of the object\n       */\n      '@type': PropTypes.string,\n      /**\n       * Subjects of the object\n       */\n      subjects: PropTypes.arrayOf(PropTypes.string),\n      is_folderish: PropTypes.bool,\n    }),\n    error: PropTypes.shape({\n      /**\n       * Error type\n       */\n      status: PropTypes.number,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    actions: null,\n    content: null,\n    versionId: null,\n    error: null,\n  };\n\n  state = {\n    hasObjectButtons: null,\n    isClient: false,\n  };\n\n  /**\n   * Component will mount\n   * @method componentWillMount\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillMount() {\n    this.props.listActions(getBaseUrl(this.props.pathname));\n    this.props.getContent(\n      getBaseUrl(this.props.pathname),\n      this.props.versionId,\n    );\n  }\n\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.pathname !== this.props.pathname) {\n      this.props.listActions(getBaseUrl(nextProps.pathname));\n      this.props.getContent(\n        getBaseUrl(nextProps.pathname),\n        this.props.versionId,\n      );\n    }\n\n    if (nextProps.actions.object_buttons) {\n      const objectButtons = nextProps.actions.object_buttons;\n      this.setState({\n        hasObjectButtons: !!objectButtons.length,\n      });\n    }\n  }\n\n  /**\n   * Default fallback view\n   * @method getViewDefault\n   * @returns {string} Markup for component.\n   */\n  getViewDefault = () => config.views.defaultView;\n\n  /**\n   * Get view by content type\n   * @method getViewByType\n   * @returns {string} Markup for component.\n   */\n  getViewByType = () =>\n    config.views.contentTypesViews[this.props.content['@type']] || null;\n\n  /**\n   * Get view by content layout property\n   * @method getViewByLayout\n   * @returns {string} Markup for component.\n   */\n  getViewByLayout = () =>\n    config.views.layoutViews[\n      this.props.content[getLayoutFieldname(this.props.content)]\n    ] || null;\n\n  /**\n   * Cleans the component displayName (specially for connected components)\n   * which have the Connect(componentDisplayName)\n   * @method cleanViewName\n   * @param  {string} dirtyDisplayName The displayName\n   * @returns {string} Clean displayName (no Connect(...)).\n   */\n  cleanViewName = (dirtyDisplayName) =>\n    dirtyDisplayName\n      .replace('Connect(', '')\n      .replace('injectIntl(', '')\n      .replace(')', '')\n      .replace('connect(', '')\n      .toLowerCase();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { views } = config;\n    if (this.props.error && !this.props.connectionRefused) {\n      let FoundView;\n      if (this.props.error.status === undefined) {\n        // For some reason, while development and if CORS is in place and the\n        // requested resource is 404, it returns undefined as status, then the\n        // next statement will fail\n        FoundView = views.errorViews.corsError;\n      } else {\n        FoundView = views.errorViews[this.props.error.status.toString()];\n      }\n      if (!FoundView) {\n        FoundView = views.errorViews['404']; // default to 404\n      }\n      return (\n        <div id=\"view\">\n          <FoundView {...this.props} />\n        </div>\n      );\n    }\n    if (!this.props.content) {\n      return <span />;\n    }\n    const RenderedView =\n      this.getViewByType() || this.getViewByLayout() || this.getViewDefault();\n\n    return (\n      <div id=\"view\">\n        <Helmet>\n          {this.props.content.language && (\n            <html lang={this.props.content.language.token} />\n          )}\n          <title>{this.props.content.title}</title>\n          <meta name=\"description\" content={this.props.content.description} />\n        </Helmet>\n        {/* Body class if displayName in component is set */}\n        <BodyClass\n          className={\n            RenderedView.displayName\n              ? `view-${this.cleanViewName(RenderedView.displayName)}`\n              : null\n          }\n        />\n        <RenderedView\n          content={this.props.content}\n          location={this.props.location}\n          token={this.props.token}\n          history={this.props.history}\n        />\n        {config.settings.showTags &&\n          this.props.content.subjects &&\n          this.props.content.subjects.length > 0 && (\n            <Tags tags={this.props.content.subjects} />\n          )}\n        {/* Add opt-in social sharing if required, disabled by default */}\n        {/* In the future this might be parameterized from the app config */}\n        {/* <SocialSharing\n          url={typeof window === 'undefined' ? '' : window.location.href}\n          title={this.props.content.title}\n          description={this.props.content.description || ''}\n        /> */}\n        {this.props.content.allow_discussion && (\n          <Comments pathname={this.props.pathname} />\n        )}\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar pathname={this.props.pathname} inner={<span />} />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      actions: state.actions.actions,\n      token: state.userSession.token,\n      content: state.content.data,\n      error: state.content.get.error,\n      apiError: state.apierror.error,\n      connectionRefused: state.apierror.connectionRefused,\n      pathname: props.location.pathname,\n      versionId:\n        qs.parse(props.location.search) &&\n        qs.parse(props.location.search).version_id,\n    }),\n    {\n      listActions,\n      getContent,\n    },\n  ),\n)(View);\n","import { defineMessages } from 'react-intl';\n\nimport ViewTitleBlock from '@plone/volto/components/manage/Blocks/Title/View';\nimport ViewDescriptionBlock from '@plone/volto/components/manage/Blocks/Description/View';\nimport ViewToCBlock from '@plone/volto/components/manage/Blocks/ToC/View';\nimport ViewTextBlock from '@plone/volto/components/manage/Blocks/Text/View';\nimport ViewImageBlock from '@plone/volto/components/manage/Blocks/Image/View';\nimport ViewLeadImageBlock from '@plone/volto/components/manage/Blocks/LeadImage/View';\nimport ViewListingBlock from '@plone/volto/components/manage/Blocks/Listing/View';\nimport ViewVideoBlock from '@plone/volto/components/manage/Blocks/Video/View';\nimport ViewHeroImageLeftBlock from '@plone/volto/components/manage/Blocks/HeroImageLeft/View';\nimport ViewMapBlock from '@plone/volto/components/manage/Blocks/Maps/View';\nimport ViewHTMLBlock from '@plone/volto/components/manage/Blocks/HTML/View';\nimport ViewTableBlock from '@plone/volto/components/manage/Blocks/Table/View';\n\nimport EditTitleBlock from '@plone/volto/components/manage/Blocks/Title/Edit';\nimport EditDescriptionBlock from '@plone/volto/components/manage/Blocks/Description/Edit';\nimport EditToCBlock from '@plone/volto/components/manage/Blocks/ToC/Edit';\nimport EditTextBlock from '@plone/volto/components/manage/Blocks/Text/Edit';\nimport EditImageBlock from '@plone/volto/components/manage/Blocks/Image/Edit';\nimport EditLeadImageBlock from '@plone/volto/components/manage/Blocks/LeadImage/Edit';\nimport EditListingBlock from '@plone/volto/components/manage/Blocks/Listing/Edit';\nimport DefaultListingBlockTemplate from '@plone/volto/components/manage/Blocks/Listing/DefaultTemplate';\nimport SummaryListingBlockTemplate from '@plone/volto/components/manage/Blocks/Listing/SummaryTemplate';\nimport EditVideoBlock from '@plone/volto/components/manage/Blocks/Video/Edit';\nimport EditHeroImageLeftBlock from '@plone/volto/components/manage/Blocks/HeroImageLeft/Edit';\nimport EditMapBlock from '@plone/volto/components/manage/Blocks/Maps/Edit';\nimport EditHTMLBlock from '@plone/volto/components/manage/Blocks/HTML/Edit';\nimport EditTableBlock from '@plone/volto/components/manage/Blocks/Table/Edit';\n\nimport descriptionSVG from '@plone/volto/icons/description.svg';\nimport titleSVG from '@plone/volto/icons/text.svg';\nimport textSVG from '@plone/volto/icons/subtext.svg';\nimport cameraSVG from '@plone/volto/icons/camera.svg';\nimport videoSVG from '@plone/volto/icons/videocamera.svg';\nimport globeSVG from '@plone/volto/icons/globe.svg';\nimport codeSVG from '@plone/volto/icons/code.svg';\nimport heroSVG from '@plone/volto/icons/hero.svg';\nimport tableSVG from '@plone/volto/icons/table.svg';\nimport listBulletSVG from '@plone/volto/icons/list-bullet.svg';\nimport tocSVG from '@plone/volto/icons/list-bullet.svg';\n\nimport ImageGalleryListingBlockTemplate from '@plone/volto/components/manage/Blocks/Listing/ImageGallery';\nimport BlockSettingsSchema from '@plone/volto/components/manage/Blocks/Block/Schema';\nimport TextSettingsSchema from '@plone/volto/components/manage/Blocks/Text/Schema';\nimport ImageSettingsSchema from '@plone/volto/components/manage/Blocks/Image/Schema';\nimport ToCSettingsSchema from '@plone/volto/components/manage/Blocks/ToC/Schema';\n\ndefineMessages({\n  title: {\n    id: 'title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'description',\n    defaultMessage: 'Description',\n  },\n  text: {\n    id: 'text',\n    defaultMessage: 'Text',\n  },\n  toc: {\n    id: 'toc',\n    defaultMessage: 'Table of Contents',\n  },\n  image: {\n    id: 'image',\n    defaultMessage: 'Image',\n  },\n  video: {\n    id: 'video',\n    defaultMessage: 'Video',\n  },\n  hero: {\n    id: 'hero',\n    defaultMessage: 'Hero',\n  },\n  table: {\n    id: 'table',\n    defaultMessage: 'Table',\n  },\n  maps: {\n    id: 'maps',\n    defaultMessage: 'Maps',\n  },\n  html: {\n    id: 'html',\n    defaultMessage: 'HTML',\n  },\n  leadimage: {\n    id: 'leadimage',\n    defaultMessage: 'Lead Image Field',\n  },\n  listing: {\n    id: 'listing',\n    defaultMessage: 'Listing',\n  },\n  // Groups\n  mostUsed: {\n    id: 'mostUsed',\n    defaultMessage: 'Most used',\n  },\n  media: {\n    id: 'media',\n    defaultMessage: 'Media',\n  },\n  common: {\n    id: 'common',\n    defaultMessage: 'Common',\n  },\n});\n\nconst groupBlocksOrder = [\n  { id: 'mostUsed', title: 'Most used' },\n  { id: 'text', title: 'Text' },\n  { id: 'media', title: 'Media' },\n  { id: 'common', title: 'Common' },\n];\n\nconst blocksConfig = {\n  title: {\n    id: 'title',\n    title: 'Title',\n    icon: titleSVG,\n    group: 'text',\n    view: ViewTitleBlock,\n    edit: EditTitleBlock,\n    schema: BlockSettingsSchema,\n    restricted: true,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 0,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n  description: {\n    id: 'description',\n    title: 'Description',\n    icon: descriptionSVG,\n    group: 'text',\n    view: ViewDescriptionBlock,\n    edit: EditDescriptionBlock,\n    schema: BlockSettingsSchema,\n    restricted: true,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 0,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n  text: {\n    id: 'text',\n    title: 'Text',\n    icon: textSVG,\n    group: 'text',\n    view: ViewTextBlock,\n    edit: EditTextBlock,\n    schema: TextSettingsSchema,\n    restricted: false,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 0,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n    blockHasValue: (data) => {\n      const isEmpty =\n        !data.text ||\n        (data.text?.blocks?.length === 1 && data.text.blocks[0].text === '');\n      return !isEmpty;\n    },\n  },\n  image: {\n    id: 'image',\n    title: 'Image',\n    icon: cameraSVG,\n    group: 'media',\n    view: ViewImageBlock,\n    edit: EditImageBlock,\n    schema: ImageSettingsSchema,\n    restricted: false,\n    mostUsed: true,\n    sidebarTab: 1,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n  leadimage: {\n    id: 'leadimage',\n    title: 'Lead Image Field',\n    icon: cameraSVG,\n    group: 'media',\n    view: ViewLeadImageBlock,\n    edit: EditLeadImageBlock,\n    schema: BlockSettingsSchema,\n    restricted: false,\n    mostUsed: false,\n    sidebarTab: 1,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n  listing: {\n    id: 'listing',\n    title: 'Listing',\n    icon: listBulletSVG,\n    group: 'common',\n    view: ViewListingBlock,\n    edit: EditListingBlock,\n    schema: BlockSettingsSchema,\n    restricted: false,\n    mostUsed: true,\n    sidebarTab: 1,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n    templates: {\n      default: { label: 'Default', template: DefaultListingBlockTemplate },\n      imageGallery: {\n        label: 'Image gallery',\n        template: ImageGalleryListingBlockTemplate,\n      },\n      summary: { label: 'Summary', template: SummaryListingBlockTemplate },\n    },\n  },\n  video: {\n    id: 'video',\n    title: 'Video',\n    icon: videoSVG,\n    group: 'media',\n    view: ViewVideoBlock,\n    edit: EditVideoBlock,\n    schema: BlockSettingsSchema,\n    restricted: false,\n    mostUsed: true,\n    sidebarTab: 1,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n  toc: {\n    id: 'toc',\n    title: 'Table of Contents',\n    icon: tocSVG,\n    group: 'common',\n    view: ViewToCBlock,\n    edit: EditToCBlock,\n    schema: ToCSettingsSchema,\n    restricted: false,\n    mostUsed: false,\n    sidebarTab: 0,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n  hero: {\n    id: 'hero',\n    title: 'Hero',\n    icon: heroSVG,\n    group: 'common',\n    view: ViewHeroImageLeftBlock,\n    edit: EditHeroImageLeftBlock,\n    schema: BlockSettingsSchema,\n    restricted: false,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 0,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n  maps: {\n    id: 'maps',\n    title: 'Maps',\n    icon: globeSVG,\n    group: 'common',\n    view: ViewMapBlock,\n    edit: EditMapBlock,\n    schema: BlockSettingsSchema,\n    restricted: false,\n    mostUsed: false,\n    sidebarTab: 1,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n  html: {\n    id: 'html',\n    title: 'HTML',\n    icon: codeSVG,\n    group: 'common',\n    view: ViewHTMLBlock,\n    edit: EditHTMLBlock,\n    schema: BlockSettingsSchema,\n    restricted: false,\n    mostUsed: false,\n    sidebarTab: 0,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n  table: {\n    id: 'table',\n    title: 'Table',\n    icon: tableSVG,\n    group: 'common',\n    view: ViewTableBlock,\n    edit: EditTableBlock,\n    schema: BlockSettingsSchema,\n    restricted: false,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 1,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  },\n};\n\nconst requiredBlocks = ['title'];\n\nconst initialBlocks = {};\n\nexport { groupBlocksOrder, requiredBlocks, blocksConfig, initialBlocks };\n","import contentExistingSVG from '@plone/volto/icons/content-existing.svg';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport calendarSVG from '@plone/volto/icons/calendar.svg';\nimport folderSVG from '@plone/volto/icons/folder.svg';\nimport fileSVG from '@plone/volto/icons/file.svg';\nimport pageSVG from '@plone/volto/icons/page.svg';\nimport imageSVG from '@plone/volto/icons/image.svg';\n\nexport const contentIcons = {\n  Document: pageSVG,\n  Folder: folderSVG,\n  'News Item': contentExistingSVG,\n  Event: calendarSVG,\n  Image: imageSVG,\n  File: fileSVG,\n  Link: linkSVG,\n};\n","import loadable from '@loadable/component';\n\nexport const loadables = {\n  prettierStandalone: loadable.lib(() => import('prettier/standalone')),\n  prettierParserHtml: loadable.lib(() => import('prettier/parser-html')),\n  prismCore: loadable.lib(() => import('prismjs/components/prism-core')),\n  toastify: loadable.lib(() => import('react-toastify')),\n  reactSelect: loadable.lib(() => import('react-select')),\n  diffLib: loadable.lib(() => import('diff')),\n};\n","// Non Content Routes/Views\n// You can include either RegEx or a string representing the ending of the\n// nonContentRoute eg. '/add' will match '/foo/bar/add'\nexport const nonContentRoutes = [\n  /\\?.*$/,\n  '/add',\n  '/contents',\n  '/delete',\n  '/diff',\n  '/edit',\n  '/history',\n  '/layout',\n  '/login',\n  '/logout',\n  '/sitemap',\n  '/register',\n  '/sharing',\n  '/search',\n  '/change-password',\n  /\\/controlpanel\\/.*$/,\n  '/controlpanel',\n  '/contact-form',\n  '/personal-information',\n  '/personal-preferences',\n  '/register',\n  /\\/password-reset\\/.*$/,\n  '/password-reset',\n  '/create-translation',\n  '/manage-translations',\n];\n","import { Map } from 'immutable';\nimport { DefaultDraftBlockRenderMap } from 'draft-js';\n\nconst blockRenderMap = Map({\n  callout: {\n    element: 'p',\n  },\n  unstyled: {\n    element: 'div',\n  },\n});\n\nconst extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockRenderMap);\n\nconst blockStyleFn = (contentBlock) => {\n  const type = contentBlock.getType();\n  if (type === 'callout') {\n    return 'callout';\n  }\n  return null;\n};\n\nconst listBlockTypes = ['unordered-list-item', 'ordered-list-item'];\n\nexport { extendedBlockRenderMap, blockStyleFn, listBlockTypes };\n","export default (element) => {\n  if (element.className === 'callout') {\n    return {\n      type: 'callout',\n    };\n  }\n  return null;\n};\n","import { Separator } from 'draft-js-inline-toolbar-plugin';\n\nimport createBlockBreakoutPlugin from 'draft-js-block-breakout-plugin';\nimport createLinkPlugin from '@plone/volto/components/manage/AnchorPlugin';\n//import createLinkDetectionPlugin from '@plone/volto/components/manage/LinkDetectionPlugin/link-detection-plugin';\n\nimport {\n  BlockquoteButton,\n  BoldButton,\n  CalloutButton,\n  ItalicButton,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  OrderedListButton,\n  UnorderedListButton,\n} from './Styles';\n\nconst breakOutOptions = {\n  doubleBreakoutBlocks: [\n    'unordered-list-item',\n    'ordered-list-item',\n    'code-block',\n  ],\n  breakoutBlocks: [\n    'header-one',\n    'header-two',\n    'header-three',\n    'highlight',\n    'blockquote',\n    'callout',\n  ],\n};\n\nconst blockBreakoutPlugin = createBlockBreakoutPlugin(breakOutOptions);\nconst linkPlugin = createLinkPlugin();\n//const linkDetectionPlugin = createLinkDetectionPlugin();\n\nexport const inlineToolbarButtons = [\n  BoldButton,\n  ItalicButton,\n  linkPlugin.LinkButton,\n  Separator,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  UnorderedListButton,\n  OrderedListButton,\n  BlockquoteButton,\n  CalloutButton,\n];\n\nconst plugins = [linkPlugin, blockBreakoutPlugin]; //linkDetectionPlugin\n\nexport default plugins;\n","import React from 'react';\nimport createInlineStyleButton from 'draft-js-buttons/lib/utils/createInlineStyleButton';\nimport createBlockStyleButton from 'draft-js-buttons/lib/utils/createBlockStyleButton';\n\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\n\nimport boldSVG from '@plone/volto/icons/bold.svg';\nimport italicSVG from '@plone/volto/icons/italic.svg';\nimport textSVG from '@plone/volto/icons/text.svg';\nimport subtextSVG from '@plone/volto/icons/subtext.svg';\nimport unorderedListSVG from '@plone/volto/icons/list-bullet.svg';\nimport orderedListSVG from '@plone/volto/icons/list-numbered.svg';\nimport blockquoteSVG from '@plone/volto/icons/quote.svg';\nimport calloutSVG from '@plone/volto/icons/megaphone.svg';\n\nconst BoldButton = createInlineStyleButton({\n  style: 'BOLD',\n  children: <Icon name={boldSVG} size=\"24px\" />,\n});\n\nconst ItalicButton = createInlineStyleButton({\n  style: 'ITALIC',\n  children: <Icon name={italicSVG} size=\"24px\" />,\n});\n\nconst HeadlineTwoButton = createBlockStyleButton({\n  blockType: 'header-two',\n  children: <Icon name={textSVG} size=\"24px\" />,\n});\n\nconst HeadlineThreeButton = createBlockStyleButton({\n  blockType: 'header-three',\n  children: <Icon name={subtextSVG} size=\"24px\" />,\n});\n\nconst UnorderedListButton = createBlockStyleButton({\n  blockType: 'unordered-list-item',\n  children: <Icon name={unorderedListSVG} size=\"24px\" />,\n});\n\nconst OrderedListButton = createBlockStyleButton({\n  blockType: 'ordered-list-item',\n  children: <Icon name={orderedListSVG} size=\"24px\" />,\n});\n\nconst BlockquoteButton = createBlockStyleButton({\n  blockType: 'blockquote',\n  children: <Icon name={blockquoteSVG} size=\"24px\" />,\n});\n\nconst CalloutButton = createBlockStyleButton({\n  blockType: 'callout',\n  children: <Icon name={calloutSVG} size=\"24px\" />,\n});\n\nexport {\n  BlockquoteButton,\n  BoldButton,\n  CalloutButton,\n  ItalicButton,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  OrderedListButton,\n  UnorderedListButton,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\n\nconst styles = {\n  code: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n  codeBlock: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 20,\n  },\n};\n\nconst addBreaklinesInline = (children) => {\n  if (typeof children[0] == 'string') {\n    const s = children[0].endsWith('\\n')\n      ? children[0].slice(0, -1)\n      : children[0];\n\n    if (s.split('\\n').length > 1) {\n      return s.split('\\n').map((child, index) => (\n        <React.Fragment key={child + index}>\n          {child}\n          <br />\n        </React.Fragment>\n      ));\n    }\n  }\n  return children;\n};\n\n// Inline (not block) styles\nconst inline = {\n  BOLD: (children, { key }) => (\n    <strong key={key}>{addBreaklinesInline(children)}</strong>\n  ),\n  ITALIC: (children, { key }) => (\n    <em key={key}>{addBreaklinesInline(children)}</em>\n  ),\n  UNDERLINE: (children, { key }) => (\n    <u key={key}>{addBreaklinesInline(children)}</u>\n  ),\n  CODE: (children, { key }) => (\n    <span key={key} style={styles.code}>\n      {children}\n    </span>\n  ),\n};\n\nconst addBreaklines = (children) =>\n  children.map((child) => {\n    return child[1].map((child) => [\n      <React.Fragment key={child}>\n        {child}\n        <br />\n      </React.Fragment>,\n    ]);\n  });\n\nconst splitBySoftLines = (children) =>\n  children.map((child) => {\n    return child.map((item) => {\n      if (Array.isArray(item)) {\n        return item[0].split('\\n');\n      }\n      return item;\n    });\n  });\n\n// splitSoftLines for <li> tag\nconst splitSoftLinesOfLists = (children) =>\n  children.map((child, index) => {\n    return (\n      <li key={index}>\n        {child.map((subchild) => {\n          if (Array.isArray(subchild)) {\n            return subchild.map((subchildren) => {\n              if (typeof subchildren === 'string') {\n                const last = subchildren.split('\\n').length - 1;\n                return subchildren.split('\\n').map((item, index) => (\n                  <React.Fragment key={index}>\n                    {item}\n                    {index !== last && <br />}\n                  </React.Fragment>\n                ));\n              } else {\n                return subchildren;\n              }\n            });\n          } else {\n            return subchild;\n          }\n        })}\n      </li>\n    );\n  });\n\n// Returns how the default lists should be rendered\nconst getList = (ordered) => (children, { depth, keys }) =>\n  ordered ? (\n    <ol key={keys[0]} keys={keys} depth={depth}>\n      {splitSoftLinesOfLists(children)}\n    </ol>\n  ) : (\n    <ul key={keys[0]} keys={keys} depth={depth}>\n      {splitSoftLinesOfLists(children)}\n    </ul>\n  );\n\n// Special function to deal with list clones\n/*const getSpecialList = type => (children, { depth, keys }) => (\n  <ul key={keys[0]} keys={keys} depth={depth} className={type}>\n    {children.map((child, i) => (\n      <li key={keys[i]} className={`${type}-item`}>\n        {child}\n      </li>\n    ))}\n  </ul>\n);\n*/\n\n// Original recommended way to deal with atomics, this does not work with IMAGE\n// const getAtomic = (children, { data, keys }) =>\n//   data.map((item, i) => <div key={keys[i]} {...data[i]} />);\n\nconst processChildren = (children, keys) => {\n  const processedChildren = children.map((chunks) =>\n    chunks.map((child, index) => {\n      if (Array.isArray(child)) {\n        // If it's empty is a blank paragraph, we want to add a <br /> in it\n        if (isEmpty(child)) {\n          return <br key={index} />;\n        }\n        return child.map((subchild, index) => {\n          if (typeof subchild === 'string') {\n            const last = subchild.split('\\n').length - 1;\n            return subchild.split('\\n').map((item, index) => (\n              <React.Fragment key={index}>\n                {item}\n                {index !== last && <br />}\n              </React.Fragment>\n            ));\n          } else {\n            return subchild;\n          }\n        });\n      } else {\n        return child;\n      }\n    }),\n  );\n  return processedChildren.map(\n    (chunk, index) => chunk && <p key={keys[index]}>{chunk}</p>,\n  );\n};\n/**\n * Note that children can be maped to render a list or do other cool stuff\n */\nconst blocks = {\n  unstyled: (children, { keys }) => {\n    return processChildren(children, keys);\n  },\n  atomic: (children) => children[0],\n  blockquote: (children, { keys }) => (\n    <blockquote key={keys[0]}>\n      {addBreaklines(splitBySoftLines(children))}\n    </blockquote>\n  ),\n  'header-one': (children, { keys }) =>\n    children.map((child, i) => <h1 key={keys[i]}>{child}</h1>),\n  'header-two': (children, { keys }) =>\n    children.map((child, i) => (\n      <h2 id={keys[i]} key={keys[i]}>\n        {child}\n      </h2>\n    )),\n  'header-three': (children, { keys }) =>\n    children.map((child, i) => (\n      <h3 id={keys[i]} key={keys[i]}>\n        {child}\n      </h3>\n    )),\n  'header-four': (children, { keys }) =>\n    children.map((child, i) => (\n      <h4 id={keys[i]} key={keys[i]}>\n        {child}\n      </h4>\n    )),\n  'header-five': (children, { keys }) =>\n    children.map((child, i) => (\n      <h5 id={keys[i]} key={keys[i]}>\n        {child}\n      </h5>\n    )),\n  'header-six': (children, { keys }) =>\n    children.map((child, i) => (\n      <h6 id={keys[i]} key={keys[i]}>\n        {child}\n      </h6>\n    )),\n  'code-block': (children, { keys }) => (\n    <pre key={keys[0]} style={styles.codeBlock}>\n      {addBreaklines(children)}\n    </pre>\n  ),\n  'unordered-list-item': getList(),\n  'ordered-list-item': getList(true),\n  callout: (children, { keys }) =>\n    children.map((child, i) => (\n      <p key={keys[i]} className=\"callout\">\n        {child}\n      </p>\n    )),\n};\n\nconst LinkEntity = connect((state) => ({\n  token: state.userSession.token,\n}))(({ token, key, url, target, targetUrl, download, children }) => {\n  const to = token ? url : targetUrl || url;\n\n  return (\n    <UniversalLink\n      href={to}\n      openLinkInNewTab={target === '_blank' || undefined}\n      download={download}\n    >\n      {children}\n    </UniversalLink>\n  );\n});\n\nconst entities = {\n  LINK: (children, props, { key }) => (\n    <LinkEntity key={key} {...props}>\n      {children}\n    </LinkEntity>\n  ),\n\n  IMAGE: (children, entity, { key }) => (\n    <img key={key} src={entity.src} alt={entity.alt} />\n  ),\n};\n\nexport const options = {\n  cleanup: false,\n  // joinOutput: true,\n};\n\nconst renderers = {\n  inline,\n  blocks,\n  entities,\n};\n\nexport default renderers;\n","import { CaptureConsole } from '@sentry/integrations';\n\nexport const sentryOptions = {\n  /*\n\n  dsn: 'https://key@sentry.io/1',\n  environment: 'production',\n  release: '1.2.3',\n  serverName: 'volto',\n  tags: {\n    site: 'foo.bar',\n    app: 'test_app',\n    logger: 'volto',\n  },\n  extras: {\n    key: 'value',\n  },\n\n  */\n  integrations: [\n    new CaptureConsole({\n      levels: ['error'],\n    }),\n  ],\n};\n","import loadable from '@loadable/component';\n\nimport DefaultView from '@plone/volto/components/theme/View/DefaultView';\nimport FileView from '@plone/volto/components/theme/View/FileView';\nimport ImageView from '@plone/volto/components/theme/View/ImageView';\nimport ListingView from '@plone/volto/components/theme/View/ListingView';\nimport NewsItemView from '@plone/volto/components/theme/View/NewsItemView';\nimport SummaryView from '@plone/volto/components/theme/View/SummaryView';\nimport TabularView from '@plone/volto/components/theme/View/TabularView';\nimport LinkView from '@plone/volto/components/theme/View/LinkView';\nimport NotFoundView from '@plone/volto/components/theme/NotFound/NotFound';\nimport ConnectionRefused from '@plone/volto/components/theme/ConnectionRefused/ConnectionRefused';\nimport CorsError from '@plone/volto/components/theme/CorsError/CorsError';\nimport AlbumView from '@plone/volto/components/theme/View/AlbumView';\nimport Unauthorized from '@plone/volto/components/theme/Unauthorized/Unauthorized';\nimport Forbidden from '@plone/volto/components/theme/Forbidden/Forbidden';\n\nconst EventView = loadable(() =>\n  import('@plone/volto/components/theme/View/EventView'),\n);\n\n// Layout View Registry\nexport const layoutViews = {\n  summary_view: SummaryView,\n  tabular_view: TabularView,\n  listing_view: ListingView,\n  link_redirect_view: LinkView,\n  album_view: AlbumView,\n};\n\n// Content Types View Registry\nexport const contentTypesViews = {\n  'News Item': NewsItemView,\n  File: FileView,\n  Image: ImageView,\n  Event: EventView,\n};\n\n// Default view\nexport const defaultView = DefaultView;\n\nexport const errorViews = {\n  '404': NotFoundView,\n  '401': Unauthorized,\n  '403': Forbidden,\n  ECONNREFUSED: ConnectionRefused,\n  corsError: CorsError,\n};\n","// The Widgets are forced to be imported not from the index but from its own\n// full path due to circular import issues\n\nimport loadable from '@loadable/component';\n\nimport AlignWidget from '@plone/volto/components/manage/Widgets/AlignWidget';\nimport ArrayWidget from '@plone/volto/components/manage/Widgets/ArrayWidget';\nimport CheckboxWidget from '@plone/volto/components/manage/Widgets/CheckboxWidget';\nimport FileWidget from '@plone/volto/components/manage/Widgets/FileWidget';\nimport PasswordWidget from '@plone/volto/components/manage/Widgets/PasswordWidget';\nimport QuerystringWidget from '@plone/volto/components/manage/Widgets/QuerystringWidget';\nimport SchemaWidget from '@plone/volto/components/manage/Widgets/SchemaWidget';\nimport SelectWidget from '@plone/volto/components/manage/Widgets/SelectWidget';\nimport TextareaWidget from '@plone/volto/components/manage/Widgets/TextareaWidget';\nimport TextWidget from '@plone/volto/components/manage/Widgets/TextWidget';\nimport TokenWidget from '@plone/volto/components/manage/Widgets/TokenWidget';\nimport WysiwygWidget from '@plone/volto/components/manage/Widgets/WysiwygWidget';\nimport UrlWidget from '@plone/volto/components/manage/Widgets/UrlWidget';\nimport EmailWidget from '@plone/volto/components/manage/Widgets/EmailWidget';\nimport NumberWidget from '@plone/volto/components/manage/Widgets/NumberWidget';\n\nimport ReferenceWidget from '@plone/volto/components/manage/Widgets/ReferenceWidget';\nimport ObjectBrowserWidget from '@plone/volto/components/manage/Widgets/ObjectBrowserWidget';\n\nimport ObjectWidget from '@plone/volto/components/manage/Widgets/ObjectWidget';\nimport ObjectListWidget from '@plone/volto/components/manage/Widgets/ObjectListWidget';\n\nexport const DatetimeWidget = loadable(() =>\n  import('@plone/volto/components/manage/Widgets/DatetimeWidget'),\n);\nexport const RecurrenceWidget = loadable(() =>\n  import(\n    '@plone/volto/components/manage/Widgets/RecurrenceWidget/RecurrenceWidget'\n  ),\n);\n\n// Widgets mapping\nexport const widgetMapping = {\n  id: {\n    schema: SchemaWidget,\n    subjects: TokenWidget,\n    query: QuerystringWidget,\n    recurrence: RecurrenceWidget,\n    remoteUrl: UrlWidget,\n  },\n  widget: {\n    richtext: WysiwygWidget,\n    textarea: TextareaWidget,\n    datetime: DatetimeWidget,\n    date: DatetimeWidget,\n    password: PasswordWidget,\n    file: FileWidget,\n    align: AlignWidget,\n    url: UrlWidget,\n    email: EmailWidget,\n    object_browser: ObjectBrowserWidget,\n    object: ObjectWidget,\n    object_list: ObjectListWidget,\n  },\n  vocabulary: {\n    'plone.app.vocabularies.Catalog': ObjectBrowserWidget,\n  },\n  factory: {\n    'Relation List': ObjectBrowserWidget,\n    'Relation Choice': ReferenceWidget,\n  },\n  choices: SelectWidget,\n  type: {\n    boolean: CheckboxWidget,\n    array: ArrayWidget,\n    object: FileWidget,\n    datetime: DatetimeWidget,\n    date: DatetimeWidget,\n    password: PasswordWidget,\n    number: NumberWidget,\n    integer: NumberWidget,\n  },\n};\n\n// Default Widget\nexport const defaultWidget = TextWidget;\n","/**\n * Config.\n * @module config\n */\nimport { parse as parseUrl } from 'url';\nimport { defaultWidget, widgetMapping } from './Widgets';\nimport {\n  layoutViews,\n  contentTypesViews,\n  defaultView,\n  errorViews,\n} from './Views';\nimport { nonContentRoutes } from './NonContentRoutes';\nimport ToHTMLRenderers, {\n  options as ToHTMLOptions,\n} from './RichTextEditor/ToHTML';\nimport {\n  extendedBlockRenderMap,\n  blockStyleFn,\n  listBlockTypes,\n} from './RichTextEditor/Blocks';\nimport plugins, { inlineToolbarButtons } from './RichTextEditor/Plugins';\nimport FromHTMLCustomBlockFn from './RichTextEditor/FromHTML';\nimport {\n  groupBlocksOrder,\n  requiredBlocks,\n  blocksConfig,\n  initialBlocks,\n} from './Blocks';\nimport { loadables } from './Loadables';\n\nimport { sentryOptions } from './Sentry';\nimport { contentIcons } from './ContentIcons';\n\nimport applyAddonConfiguration from 'load-volto-addons';\n\nimport ConfigRegistry from '@plone/volto/registry';\n\nconst host = process.env.HOST || 'localhost';\nconst port = process.env.PORT || '3000';\n\nconst apiPath =\n  process.env.RAZZLE_API_PATH ||\n  (__DEVELOPMENT__\n    ? `http://${host}:${port}/api`\n    : 'http://localhost:8080/Plone');\n\nconst getServerURL = (url) => {\n  if (!url) return;\n  const apiPathURL = parseUrl(url);\n  return `${apiPathURL.protocol}//${apiPathURL.hostname}:${apiPathURL.port}`;\n};\n\n// Sensible defaults for publicURL\n// if RAZZLE_PUBLIC_URL is present, use it\n// if in DEV, use the host/port combination by default\n// if in PROD, assume it's RAZZLE_API_PATH server name (no /api or alikes) or fallback\n// to DEV settings if RAZZLE_API_PATH is not present\nconst publicURL =\n  process.env.RAZZLE_PUBLIC_URL ||\n  (__DEVELOPMENT__\n    ? `http://${host}:${port}`\n    : getServerURL(process.env.RAZZLE_API_PATH) || `http://${host}:${port}`);\n\nconst serverConfig =\n  typeof __SERVER__ !== 'undefined' && __SERVER__\n    ? require('./server').default\n    : {};\n\nlet config = {\n  settings: {\n    host,\n    port,\n    // The URL Volto is going to be served (see sensible defaults above)\n    publicURL,\n    // Internal proxy to bypass CORS *while developing*. Not intended for production use.\n    // In production, the proxy is disabled, make sure you specify an apiPath that does\n    // not require CORS to work.\n    apiPath,\n    devProxyToApiPath:\n      process.env.RAZZLE_DEV_PROXY_API_PATH || 'http://localhost:8080/Plone', // Set it to '' for disabling the proxy\n    // proxyRewriteTarget Set it for set a custom target for the proxy or overide the internal VHM rewrite\n    // proxyRewriteTarget: '/VirtualHostBase/http/localhost:8080/Plone/VirtualHostRoot/_vh_api'\n    // proxyRewriteTarget: 'https://myvoltositeinproduction.com'\n    proxyRewriteTarget: process.env.RAZZLE_PROXY_REWRITE_TARGET || undefined,\n    // apiPath: process.env.RAZZLE_API_PATH || 'http://localhost:8000', // for Volto reference\n    // apiPath: process.env.RAZZLE_API_PATH || 'http://localhost:8081/db/web', // for guillotina\n    actions_raising_api_errors: ['GET_CONTENT', 'UPDATE_CONTENT'],\n    internalApiPath: process.env.RAZZLE_INTERNAL_API_PATH || undefined,\n    websockets: process.env.RAZZLE_WEBSOCKETS || false,\n    nonContentRoutes,\n    extendedBlockRenderMap,\n    blockStyleFn,\n    listBlockTypes,\n    FromHTMLCustomBlockFn,\n    richTextEditorInlineToolbarButtons: inlineToolbarButtons,\n    richTextEditorPlugins: plugins,\n    ToHTMLRenderers,\n    ToHTMLOptions,\n    imageObjects: ['Image'],\n    listingPreviewImageField: 'image',\n    customStyleMap: null,\n    notSupportedBrowsers: ['ie'],\n    defaultPageSize: 25,\n    isMultilingual: false,\n    supportedLanguages: ['en'],\n    defaultLanguage: 'en',\n    navDepth: 1,\n    expressMiddleware: serverConfig.expressMiddleware, // BBB\n    defaultBlockType: 'text',\n    verticalFormTabs: false,\n    persistentReducers: ['blocksClipboard'],\n    initialReducersBlacklist: [], // reducers in this list won't be hydrated in windows.__data\n    asyncPropsExtenders: [], // per route asyncConnect customizers\n    sentryOptions: {\n      ...sentryOptions,\n    },\n    contentIcons: contentIcons,\n    loadables,\n    lazyBundles: {\n      cms: [\n        'prettierStandalone',\n        'prettierParserHtml',\n        'prismCore',\n        'toastify',\n        'reactSelect',\n        // 'diffLib',\n      ],\n    },\n    appExtras: [],\n    maxResponseSize: 2000000000, // This is superagent default (200 mb)\n    serverConfig,\n    storeExtenders: [],\n    showTags: true,\n  },\n  widgets: {\n    ...widgetMapping,\n    default: defaultWidget,\n  },\n  views: {\n    layoutViews,\n    contentTypesViews,\n    defaultView,\n    errorViews,\n  },\n  blocks: {\n    requiredBlocks,\n    blocksConfig,\n    groupBlocksOrder,\n    initialBlocks,\n  },\n  addonRoutes: [],\n  addonReducers: {},\n};\n\nconfig = applyAddonConfiguration(config);\n\nexport const settings = config.settings;\nexport const widgets = config.widgets;\nexport const views = config.views;\nexport const blocks = config.blocks;\nexport const addonRoutes = [...config.addonRoutes];\nexport const addonReducers = { ...config.addonReducers };\nexport const appExtras = config.appExtras;\n\nConfigRegistry.settings = settings;\nConfigRegistry.blocks = blocks;\nConfigRegistry.views = views;\nConfigRegistry.widgets = widgets;\nConfigRegistry.addonRoutes = addonRoutes;\nConfigRegistry.addonReducers = addonReducers;\nConfigRegistry.appExtras = appExtras;\n","import imagesMiddleware from '@plone/volto/express-middleware/images';\nimport filesMiddleware from '@plone/volto/express-middleware/files';\nimport robotstxtMiddleware from '@plone/volto/express-middleware/robotstxt';\nimport sitemapMiddleware from '@plone/volto/express-middleware/sitemap';\n\nconst settings = {\n  expressMiddleware: [\n    filesMiddleware(),\n    imagesMiddleware(),\n    robotstxtMiddleware(),\n    sitemapMiddleware(),\n  ],\n  criticalCssPath: 'public/critical.css',\n  readCriticalCss: null, // so it will be defaultReadCriticalCss\n};\n\nexport default settings;\n","/**\n * Action types.\n * @module constants/ActionTypes\n */\n\nexport const ADD_COMMENT = 'ADD_COMMENT';\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\nexport const SET_APIERROR = 'SET_APIERROR';\nexport const RESET_APIERROR = 'RESET_APIERROR';\nexport const COPY = 'COPY';\nexport const COPY_CONTENT = 'COPY_CONTENT';\nexport const CREATE_CONTENT = 'CREATE_CONTENT';\nexport const CREATE_GROUP = 'CREATE_GROUP';\nexport const CREATE_USER = 'CREATE_USER';\nexport const CUT = 'CUT';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const DELETE_CONTENT = 'DELETE_CONTENT';\nexport const DELETE_GROUP = 'DELETE_GROUP';\nexport const DELETE_USER = 'DELETE_USER';\nexport const EMAIL_NOTIFICATION = 'EMAIL_NOTIFICATION';\nexport const EMAIL_SEND = 'EMAIL_SEND';\nexport const EXPAND_TOOLBAR = 'EXPAND_TOOLBAR';\nexport const INITIAL_PASSWORD = 'INITIAL_PASSWORD';\nexport const GET_BREADCRUMBS = 'GET_BREADCRUMBS';\nexport const GET_CONTENT = 'GET_CONTENT';\nexport const POST_CONTROLPANEL = 'POST_CONTROLPANEL';\nexport const GET_CONTROLPANEL = 'GET_CONTROLPANEL';\nexport const DELETE_CONTROLPANEL = 'DELETE_CONTROLPANEL';\nexport const UPDATE_CONTROLPANEL = 'UPDATE_CONTROLPANEL';\nexport const GET_DIFF = 'GET_DIFF';\nexport const GET_GROUP = 'GET_GROUP';\nexport const GET_HISTORY = 'GET_HISTORY';\nexport const GET_NAVIGATION = 'GET_NAVIGATION';\nexport const GET_PRINCIPALS = 'GET_PRINCIPALS';\nexport const GET_QUERYSTRING = 'GET_QUERYSTRING';\nexport const GET_QUERYSTRING_RESULTS = 'GET_QUERYSTRING_RESULTS';\nexport const GET_SCHEMA = 'GET_SCHEMA';\nexport const POST_SCHEMA = 'POST_SCHEMA';\nexport const PUT_SCHEMA = 'PUT_SCHEMA';\nexport const UPDATE_SCHEMA = 'UPDATE_SCHEMA';\nexport const DELETE_SCHEMA = 'DELETE_SCHEMA';\nexport const GET_SHARING = 'GET_SHARING';\nexport const GET_TRANSLATION_LOCATOR = 'GET_TRANSLATION_LOCATOR';\nexport const LINK_TRANSLATION = 'LINK_TRANSLATION';\nexport const DELETE_TRANSLATION = 'DELETE_TRANSLATION';\nexport const GET_TYPES = 'GET_TYPES';\nexport const GET_USER = 'GET_USER';\nexport const GET_VOCABULARY = 'GET_VOCABULARY';\nexport const GET_VOCABULARY_TOKEN_TITLE = 'GET_VOCABULARY_TOKEN_TITLE';\nexport const GET_WORKFLOW = 'GET_WORKFLOW';\nexport const GET_WORKFLOW_MULTIPLE = 'GET_WORKFLOW_MULTIPLE';\nexport const UPDATECOLUMNS_CONTENT = 'UPDATECOLUMNS_CONTENT';\nexport const INSTALL_ADDON = 'INSTALL_ADDON';\nexport const LIST_ACTIONS = 'LIST_ACTIONS';\nexport const LIST_ADDONS = 'LIST_ADDONS';\nexport const LIST_COMMENTS = 'LIST_COMMENTS';\nexport const LIST_MORE_COMMENTS = 'LIST_MORE_COMMENTS';\nexport const LIST_CONTROLPANELS = 'LIST_CONTROLPANELS';\nexport const LIST_GROUPS = 'LIST_GROUPS';\nexport const LIST_ROLES = 'LIST_ROLES';\nexport const LIST_USERS = 'LIST_USERS';\nexport const LOGIN = 'LOGIN';\nexport const LOGIN_RENEW = 'LOGIN_RENEW';\nexport const LOGOUT = 'LOGOUT';\nexport const ORDER_CONTENT = 'ORDER_CONTENT';\nexport const MOVE_CONTENT = 'MOVE_CONTENT';\nexport const REMOVE_MESSAGE = 'REMOVE_MESSAGE';\nexport const PURGE_MESSAGES = 'PURGE_MESSAGES';\nexport const RESET_SEARCH_CONTENT = 'RESET_SEARCH_CONTENT';\nexport const RESET_CONTENT = 'RESET_CONTENT';\nexport const RESET_PASSWORD = 'RESET_PASSWORD';\nexport const REVERT_HISTORY = 'REVERT_HISTORY';\nexport const SEARCH_CONTENT = 'SEARCH_CONTENT';\nexport const SET_SIDEBAR_TAB = 'SET_SIDEBAR_TAB';\nexport const TRANSITION_WORKFLOW = 'TRANSITION_WORKFLOW';\nexport const UNINSTALL_ADDON = 'UNINSTALL_ADDON';\nexport const UPDATE_CONTENT = 'UPDATE_CONTENT';\nexport const UPDATE_COMMENT = 'UPDATE_COMMENT';\nexport const UPDATE_GROUP = 'UPDATE_GROUP';\nexport const UPDATE_PASSWORD = 'UPDATE_PASSWORD';\nexport const UPDATE_SHARING = 'UPDATE_SHARING';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const UPGRADE_ADDON = 'UPGRADE_ADDON';\nexport const SYSTEM_INFORMATION = 'SYSTEM_INFORMATION';\nexport const DATABASE_INFORMATION = 'DATABASE_INFORMATION';\nexport const SET_BLOCKS_CLIPBOARD = 'SET_BLOCKS_CLIPBOARD';\nexport const RESET_BLOCKS_CLIPBOARD = 'RESET_BLOCKS_CLIPBOARD';\nexport const Show_All_USERS = 'Show_All_USERS';\nexport const LOAD_LAZY_LIBRARY = 'LOAD_LAZY_LIBRARY';\nexport const GET_CONTEXT_NAVIGATION = 'GET_CONTEXT_NAVIGATION';\n","/**\n * ControlpanelIcons icons.\n * @module constants/ControlpanelIcons\n */\n\nexport default {\n  'dexterity-types': 'cube',\n  'date-and-time': 'calendar',\n  language: 'translate',\n  mail: 'mail',\n  navigation: 'sitemap',\n  site: 'browser',\n  search: 'search',\n  socialmedia: 'announcement',\n  editing: 'write',\n  imaging: 'image',\n  markup: 'code',\n  'moderate-comments': 'comments',\n  security: 'lock',\n  users: 'users',\n  addons: 'add-on',\n};\n","/**\n * Layouts.\n * @module constants/Layouts\n */\n\nexport default {\n  sortable_title: { label: 'Title', type: 'string', sort_on: 'sortable_title' },\n  review_state: { label: 'Review state', type: 'string' },\n  ModificationDate: {\n    label: 'Last modified',\n    type: 'date',\n    sort_on: 'modified',\n  },\n  EffectiveDate: {\n    label: 'Publication date',\n    type: 'date',\n    sort_on: 'effective',\n  },\n  id: { label: 'ID', type: 'string', sort_on: 'id' },\n  ExpirationDate: { label: 'Expiration date', type: 'date' },\n  CreationDate: { label: 'Created on', type: 'date', sort_on: 'created' },\n  Subject: { label: 'Tags', type: 'array' },\n  portal_type: { label: 'Type', type: 'string', sort_on: 'portal_type' },\n  is_folderish: { label: 'Folder', type: 'boolean' },\n  exclude_from_nav: { label: 'Excluded from navigation', type: 'boolean' },\n  getObjSize: { label: 'Object Size', type: 'string' },\n  last_comment_date: { label: 'Last comment date', type: 'date' },\n  total_comments: { label: 'Total comments', type: 'number' },\n  end: { label: 'End Date', type: 'date' },\n  Description: { label: 'Description', type: 'string' },\n  Creator: { label: 'Creator', type: 'string' },\n  location: { label: 'Location', type: 'string' },\n  UID: { label: 'UID', type: 'string' },\n  start: { label: 'Start Date', type: 'date' },\n  Type: { label: 'Type', type: 'string' },\n};\n\nexport const defaultIndexes = [\n  'review_state',\n  'ModificationDate',\n  'EffectiveDate',\n];\n","/**\n * Languages.\n * @module constants/Languages\n */\n\nmodule.exports = {\n  en: 'English',\n  de: 'Deutsch',\n  nl: 'Nederlands',\n  ro: 'Română',\n  ja: '日本語',\n  pt: 'Português',\n  pt_BR: 'Português (Brasil)',\n  es: 'Spanish',\n  it: 'Italian',\n  eu: 'Euskara',\n};\n","/**\n * Layouts.\n * @module constants/Layouts\n */\n\nexport default {\n  album_view: 'Album view',\n  event_listing: 'Event listing',\n  full_view: 'All content',\n  listing_view: 'Listing view',\n  summary_view: 'Summary view',\n  tabular_view: 'Tabular view',\n  layout_view: 'Mosaic layout',\n  document_view: 'Document view',\n};\n","/**\n * Layouts.\n * @module constants/Workflows\n */\n\nimport { last, split } from 'lodash';\n\nexport default function getWorkflowMapping(url, current) {\n  const mapping = {\n    published: { value: 'public', label: 'Public', color: '#007bc1', url },\n    publish: { value: 'public', label: 'Public', color: '#007bc1', url },\n    private: { value: 'private', label: 'Private', color: '#ed4033', url },\n    pending: { value: 'pending', label: 'Pending', color: '#f6a808', url },\n    send_back: { value: 'private', label: 'Private', color: '#ed4033', url },\n    retract: { value: 'private', label: 'Private', color: '#ed4033', url },\n    submit: { value: 'review', label: 'Review', color: '#f4e037', url },\n  };\n\n  if (url) {\n    const key = last(split(url, '/'));\n    if (key in mapping) {\n      return mapping[key];\n    }\n\n    return { value: key, label: key, color: '#000', url };\n  }\n\n  if (current in mapping) {\n    return mapping[current];\n  }\n\n  return { value: current, label: current, color: '#000', url };\n}\n","/**\n * Error Page.\n * @module Error\n */\n\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\n/**\n * Error page.\n * @function Error\n * @returns {string} Markup of the error page.\n */\nconst Error = ({ message, stackTrace }) => {\n  let history = useHistory();\n\n  return (\n    <div\n      style={{\n        fontFamily: 'Helvetica, sans-serif',\n        fontSize: '20px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      {/* TODO: Replace inline styling with a CSS class, inline style only for __SERVER__ */}\n      <h2>\n        <FormattedMessage\n          id=\"Sorry, something went wrong with your request\"\n          defaultMessage=\"Sorry, something went wrong with your request&nbsp;\"\n        />\n      </h2>\n      <strong style={{ color: 'red' }}>{message}</strong>\n      <pre>{stackTrace}</pre>\n      <span style={{ textAlign: 'center' }}>\n        <p>\n          <button onClick={() => history.goBack()}>\n            <FormattedMessage\n              id=\"Navigate back\"\n              defaultMessage=\"Navigate back\"\n            />\n          </button>\n        </p>\n        <p>\n          <a href=\"/\">\n            <FormattedMessage\n              id=\"return to the site root\"\n              defaultMessage=\"return to the site root\"\n            />\n          </a>\n        </p>\n        <p>\n          <FormattedMessage\n            id=\"or try a different page.\"\n            defaultMessage=\"or try a different page.\"\n          />\n        </p>\n      </span>\n    </div>\n  );\n};\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n  stackTrace: PropTypes.string,\n};\n\nError.defaultProps = {\n  stackTrace: null,\n};\n\nexport default injectIntl(Error);\n","import express from 'express';\nimport { getAPIResourceWithAuth } from '@plone/volto/helpers';\n\nconst HEADERS = ['content-type', 'content-disposition', 'cache-control'];\n\nfunction fileMiddleware(req, res, next) {\n  const { errorHandler } = req.app.locals;\n  getAPIResourceWithAuth(req)\n    .then((resource) => {\n      // Just forward the headers that we need\n      HEADERS.forEach((header) => {\n        if (resource.headers[header]) {\n          res.set(header, resource.headers[header]);\n        }\n      });\n      res.send(resource.body);\n    }, errorHandler)\n    .catch(errorHandler);\n}\n\nexport default function () {\n  const middleware = express.Router();\n\n  middleware.all(['**/@@download/*'], fileMiddleware);\n  middleware.id = 'filesResourcesProcessor';\n  return middleware;\n}\n","import express from 'express';\nimport { getAPIResourceWithAuth } from '@plone/volto/helpers';\n\nconst HEADERS = ['content-type', 'content-disposition', 'cache-control'];\n\nfunction imageMiddleware(req, res, next) {\n  const { errorHandler } = req.app.locals;\n  getAPIResourceWithAuth(req)\n    .then((resource) => {\n      // Just forward the headers that we need\n      HEADERS.forEach((header) => {\n        if (resource.headers[header]) {\n          res.set(header, resource.headers[header]);\n        }\n      });\n\n      res.send(resource.body);\n    }, errorHandler)\n    .catch(errorHandler);\n}\n\nexport default function () {\n  const middleware = express.Router();\n\n  middleware.all(['**/@@images/*'], imageMiddleware);\n  middleware.id = 'imageResourcesProcessor';\n  return middleware;\n}\n","import express from 'express';\nimport { generateRobots } from '@plone/volto/helpers';\n\n/*\nrobots.txt - priority order:\n\n1) robots.txt in /public folder\n2) VOLTO_ROBOTSTXT var in .env\n3) default: plone robots.txt\n\n*/\n\nconst ploneRobots = function (req, res, next) {\n  generateRobots(req).then((robots) => {\n    res.set('Content-Type', 'text/plain');\n    res.send(robots);\n  });\n};\n\nconst envRobots = function (req, res, next) {\n  res.type('text/plain');\n  res.send(process.env.VOLTO_ROBOTSTXT);\n};\n\nexport default function () {\n  const middleware = express.Router();\n  if (process.env.VOLTO_ROBOTSTXT) {\n    middleware.all('**/robots.txt', envRobots);\n  } else {\n    middleware.all('**/robots.txt', ploneRobots);\n  }\n  middleware.id = 'robots.txt';\n  return middleware;\n}\n","import express from 'express';\nimport { generateSitemap } from '@plone/volto/helpers';\n\nexport const sitemap = function (req, res, next) {\n  generateSitemap(req).then((sitemap) => {\n    res.set('Content-Type', 'application/x-gzip');\n    res.set('Content-Encoding', 'gzip');\n    res.set('Content-Disposition', 'attachment; filename=\"sitemap.xml.gz\"');\n    res.send(sitemap);\n  });\n};\n\nexport default function () {\n  const middleware = express.Router();\n\n  middleware.all('**/sitemap.xml.gz', sitemap);\n  middleware.id = 'sitemap.xml.gz';\n  return middleware;\n}\n","/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport cookie from 'react-cookie';\nimport config from '@plone/volto/registry';\n\n/**\n * Get a resource image/file with authenticated (if token exist) API headers\n * @function getAPIResourceWithAuth\n * @param {Object} req Request object\n * @return {string} The response with the image\n */\nexport const getAPIResourceWithAuth = (req) =>\n  new Promise((resolve, reject) => {\n    const { settings } = config;\n    let apiPath = '';\n    if (settings.internalApiPath && __SERVER__) {\n      apiPath = settings.internalApiPath;\n    } else {\n      apiPath = settings.apiPath;\n    }\n    const request = superagent\n      .get(`${apiPath}${req.path}`)\n      .maxResponseSize(settings.maxResponseSize)\n      .responseType('blob');\n    const authToken = cookie.load('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.end((error, res = {}) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n","/**\n * Api helper.\n * @module helpers/Api\n */\n\nimport superagent from 'superagent';\nimport cookie from 'react-cookie';\nimport config from '@plone/volto/registry';\n\nconst methods = ['get', 'post', 'put', 'patch', 'del'];\n\n/**\n * Format the url.\n * @function formatUrl\n * @param {string} path Path (or URL) to be formatted.\n * @returns {string} Formatted path.\n */\nfunction formatUrl(path) {\n  const { settings } = config;\n  if (path.startsWith('http://') || path.startsWith('https://')) return path;\n\n  const adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else {\n    apiPath = settings.apiPath;\n  }\n  return `${apiPath}${adjustedPath}`;\n}\n\n/**\n * Api class.\n * @class Api\n */\nclass Api {\n  /**\n   * Constructor\n   * @method constructor\n   * @constructs Api\n   */\n  constructor() {\n    methods.forEach((method) => {\n      this[method] = (path, { params, data, type, headers = {} } = {}) => {\n        let request;\n        let promise = new Promise((resolve, reject) => {\n          request = superagent[method](formatUrl(path));\n\n          if (params) {\n            request.query(params);\n          }\n\n          const authToken = cookie.load('auth_token');\n          if (authToken) {\n            request.set('Authorization', `Bearer ${authToken}`);\n          }\n\n          request.set('Accept', 'application/json');\n\n          if (type) {\n            request.type(type);\n          }\n\n          Object.keys(headers).forEach((key) => request.set(key, headers[key]));\n\n          if (data) {\n            request.send(data);\n          }\n\n          request.end((err, response) =>\n            err ? reject(err) : resolve(response.body || response.text),\n          );\n        });\n        promise.request = request;\n        return promise;\n      };\n    });\n  }\n}\n\nexport default Api;\n","/* eslint-disable react/forbid-prop-types,react/no-unused-prop-types,react/require-default-props */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router';\nimport { renderRoutes } from 'react-router-config';\nimport { ReactReduxContext } from 'react-redux';\nimport { loadAsyncConnect } from './ssr';\nimport { getMutableState } from './utils';\n\nexport class AsyncConnect extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      previousLocation: this.isLoaded() ? null : props.location,\n    };\n\n    this.mounted = false;\n    this.loadDataCounter = 0;\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    const dataLoaded = this.isLoaded();\n\n    // we dont need it if we already made it on server-side\n    if (!dataLoaded) {\n      this.loadAsyncData(this.props);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // eslint-disable-line camelcase\n    const { location, reloadOnPropsChange } = this.props;\n    const navigated = location !== nextProps.location;\n\n    // Allow a user supplied function to determine if an async reload is necessary\n    if (navigated && reloadOnPropsChange(this.props, nextProps)) {\n      this.loadAsyncData(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  isLoaded() {\n    const { reduxConnectStore } = this.props;\n    return getMutableState(reduxConnectStore.getState()).reduxAsyncConnect\n      .loaded;\n  }\n\n  loadAsyncData({ reduxConnectStore, ...otherProps }) {\n    const { location, beginGlobalLoad, endGlobalLoad } = this.props;\n    const loadResult = loadAsyncConnect({\n      ...otherProps,\n      store: reduxConnectStore,\n    });\n\n    this.setState({ previousLocation: location });\n\n    // TODO: think of a better solution to a problem?\n    this.loadDataCounter += 1;\n    beginGlobalLoad();\n    return ((loadDataCounterOriginal) =>\n      loadResult.then(() => {\n        // We need to change propsToShow only if loadAsyncData that called this promise\n        // is the last invocation of loadAsyncData method. Otherwise we can face a situation\n        // when user is changing route several times and we finally show him route that has\n        // loaded props last time and not the last called route\n        if (\n          this.loadDataCounter === loadDataCounterOriginal &&\n          this.mounted !== false\n        ) {\n          this.setState({ previousLocation: null });\n        }\n\n        // TODO: investigate race conditions\n        // do we need to call this if it's not last invocation?\n        endGlobalLoad();\n      }))(this.loadDataCounter);\n  }\n\n  render() {\n    const { previousLocation } = this.state;\n    const { location, render } = this.props;\n\n    return (\n      <Route\n        location={previousLocation || location}\n        render={() => render(this.props)}\n      />\n    );\n  }\n}\n\nAsyncConnect.propTypes = {\n  render: PropTypes.func,\n  beginGlobalLoad: PropTypes.func.isRequired,\n  endGlobalLoad: PropTypes.func.isRequired,\n  reloadOnPropsChange: PropTypes.func,\n  routes: PropTypes.array.isRequired,\n  location: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n  helpers: PropTypes.any,\n  reduxConnectStore: PropTypes.object.isRequired,\n};\n\nAsyncConnect.defaultProps = {\n  helpers: {},\n  reloadOnPropsChange() {\n    return true;\n  },\n  render({ routes }) {\n    return renderRoutes(routes);\n  },\n};\n\nexport const AsyncConnectWithContext = ({ context, ...otherProps }) => {\n  const Context = context || ReactReduxContext;\n\n  if (Context == null) {\n    throw new Error('Please upgrade to react-redux v6');\n  }\n\n  return (\n    <Context.Consumer>\n      {({ store: reduxConnectStore }) => (\n        <AsyncConnect reduxConnectStore={reduxConnectStore} {...otherProps} />\n      )}\n    </Context.Consumer>\n  );\n};\n\nAsyncConnectWithContext.propTypes = {\n  context: PropTypes.object,\n};\n","import { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport { matchRoutes } from 'react-router-config';\n\nimport {\n  load,\n  loadSuccess,\n  loadFail,\n  beginGlobalLoad,\n  endGlobalLoad,\n} from '@plone/volto/actions/asyncConnect/asyncConnect';\n\nimport { isPromise, getMutableState, getImmutableState } from './utils';\nimport { AsyncConnectWithContext } from './AsyncConnect';\nexport { loadOnServer, loadAsyncConnect } from './ssr';\n\n// options is: { location, store: { dispatch }, route, match, routes }\nconst wrapWithDispatch = (Component, asyncItems = []) => {\n  return [\n    {\n      key: 'voltoLoadAsyncProps',\n      promise: (options) => {\n        const {\n          store: { dispatch },\n          location: { pathname },\n        } = options;\n\n        const foundAsyncItems = applyExtenders(asyncItems, pathname);\n\n        const connects = foundAsyncItems.map((item) => {\n          const { key } = item;\n          if (!key) return item;\n          const next = item.promise(options);\n\n          if (isPromise(next)) {\n            dispatch(load(key));\n            // add action dispatchers\n            next\n              .then((data) => dispatch(loadSuccess(key, data)))\n              .catch((err) => dispatch(loadFail(key, err)));\n          } else if (next) {\n            dispatch(loadSuccess(key, next));\n          }\n          return {\n            ...item,\n            promise: next,\n          };\n        });\n\n        Component.reduxAsyncConnect = connects;\n        return connects;\n      },\n    },\n  ];\n};\n\nconst applyExtenders = (asyncItems, pathname) => {\n  const { asyncPropsExtenders = [] } = config.settings;\n  const extenders = matchRoutes(asyncPropsExtenders, pathname);\n\n  const foundAsyncItems = extenders.reduce(\n    (acc, extender) => extender.route.extend(acc),\n    asyncItems,\n  );\n\n  return foundAsyncItems;\n};\n\n/**\n * A replacement for redux-connect's asyncConnect.\n *\n * It was needed because asyncConnect works as a direct wrapper on top of\n * a Component, so the config registry is not yet initialized. To solve this\n * problem we replace the original reduxAsyncConnect implementation (which was\n * a list of asyncConnected \"object promises\") with as single promise exposed\n * as { key: 'voltoLoadAsyncProps', promise: ... }.\n *\n * In more details, the original asyncConnect worked by replacing all our\n * \"object promises\" with a special version that's integrated with its own\n * Redux actions. We do another wrap, which takes the initial passed \"object\n * promises\", finds registered, per route, \"extenders\", calls these extenders\n * with the \"object promises\" and that's our \"object promises\" (which it calls\n * internally \"asyncItems\").\n */\nexport function asyncConnect(\n  asyncItems,\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n  options,\n) {\n  return (Component) => {\n    Component.reduxAsyncConnect = wrapWithDispatch(Component, asyncItems);\n\n    const finalMapStateToProps = (state, ownProps) => {\n      const { pathname } = state.router.location;\n      const foundAsyncItems = applyExtenders(asyncItems, pathname);\n      const mutableState = getMutableState(state);\n      const asyncStateToProps = foundAsyncItems.reduce((result, { key }) => {\n        if (!key) {\n          return result;\n        }\n\n        return {\n          ...result,\n          [key]: mutableState.reduxAsyncConnect[key],\n        };\n      }, {});\n\n      if (typeof mapStateToProps !== 'function') {\n        return asyncStateToProps;\n      }\n\n      return {\n        ...mapStateToProps(getImmutableState(mutableState), ownProps),\n        ...asyncStateToProps,\n      };\n    };\n\n    return connect(\n      finalMapStateToProps,\n      mapDispatchToProps,\n      mergeProps,\n      options,\n    )(Component);\n  };\n}\n\nexport const ReduxAsyncConnect = connect(null, {\n  beginGlobalLoad,\n  endGlobalLoad,\n})(withRouter(AsyncConnectWithContext));\n","import { matchRoutes } from 'react-router-config';\nimport { mapSeries, isPromise } from './utils';\nimport { endGlobalLoad } from '@plone/volto/actions/asyncConnect/asyncConnect';\n\nexport function filterComponents(branch) {\n  return branch.reduce((result, { route, match }) => {\n    if (route.component && route.component.reduxAsyncConnect) {\n      result.push([route.component, { route, match }]);\n    }\n\n    return result;\n  }, []);\n}\n\nexport function loadAsyncConnect({\n  location,\n  routes = [],\n  filter = () => true,\n  ...rest\n}) {\n  const layered = filterComponents(matchRoutes(routes, location.pathname));\n\n  if (layered.length === 0) {\n    return Promise.resolve();\n  }\n\n  // this allows us to have nested promises, that rely on each other's completion\n  // cycle\n  return mapSeries(layered, ([component, routeParams]) => {\n    if (component == null) {\n      return Promise.resolve();\n    }\n\n    // Collect the results of each component\n    const results = [];\n    const asyncItems = component.reduxAsyncConnect;\n    const asyncItemsArr = [...component.reduxAsyncConnect];\n\n    // get array of results\n    asyncItems.forEach((item) => {\n      if (filter(item, component)) {\n        // handle Volto's voltoLoadAsyncProps\n        if (item.key === 'voltoLoadAsyncProps') {\n          results.push(item);\n          const asyncPropsItems = item.promise({\n            ...rest,\n            ...routeParams,\n            location,\n            routes,\n          });\n          asyncItemsArr.push(...asyncPropsItems);\n\n          asyncPropsItems.forEach((asyncPropItem) => {\n            let innerPromiseOrResult =\n              (asyncPropItem && asyncPropItem.promise) || asyncPropItem;\n\n            if (isPromise(innerPromiseOrResult)) {\n              innerPromiseOrResult = innerPromiseOrResult.catch((error) => ({\n                error,\n              }));\n            }\n            results.push(innerPromiseOrResult);\n          });\n          return;\n        }\n\n        // handles default case of classic asyncConnect\n        let promiseOrResult = item.promise({\n          ...rest,\n          ...routeParams,\n          location,\n          routes,\n        });\n\n        if (isPromise(promiseOrResult)) {\n          promiseOrResult = promiseOrResult.catch((error) => ({ error }));\n        }\n\n        results.push(promiseOrResult);\n      }\n    });\n\n    // map results to keys for prop injection\n    const resolver = (finalResults) => {\n      return Object.assign(\n        {},\n        finalResults.map((result, idx) => {\n          const { key } = asyncItemsArr[idx];\n          return key ? { [key]: result } : null;\n        }),\n      );\n    };\n\n    return Promise.all(results).then(resolver);\n  });\n}\n\nexport function loadOnServer(args) {\n  return loadAsyncConnect(args).then(() => {\n    args.store.dispatch(endGlobalLoad());\n  });\n}\n","export function isPromise(obj) {\n  return typeof obj === 'object' && obj && obj.then instanceof Function;\n}\n\nexport const mapSeries =\n  Promise.mapSeries ||\n  function promiseMapSeries(iterable, iterator) {\n    const { length } = iterable;\n    const results = new Array(length);\n    let i = 0;\n\n    function iterateOverResults() {\n      return iterator(iterable[i], i, iterable).then((result) => {\n        results[i] = result;\n        i += 1;\n        if (i < length) {\n          return iterateOverResults();\n        }\n\n        return results;\n      });\n    }\n\n    return iterateOverResults();\n  };\n\nconst identity = (arg) => arg;\nlet immutableStateFunc = identity;\nlet mutableStateFunc = identity;\nexport const getImmutableState = (state) => immutableStateFunc(state);\nexport const getMutableState = (state) => mutableStateFunc(state);\n","/**\n * AuthToken helper.\n * @module helpers/AuthToken\n */\n\nimport cookie from 'react-cookie';\nimport jwtDecode from 'jwt-decode';\n\nimport { loginRenew } from '@plone/volto/actions';\nimport { push } from 'connected-react-router';\n\n/**\n * Get auth token method.\n * @method getAuthToken\n * @returns {undefined}\n */\nexport function getAuthToken() {\n  return cookie.load('auth_token');\n}\n\n/**\n * Persist auth token method.\n * @method persistAuthToken\n * @param {object} store Redux store.\n * @returns {undefined}\n */\nexport function persistAuthToken(store) {\n  let currentValue = getAuthToken();\n\n  /**\n   * handleChange method.\n   * @method handleChange\n   * @param {bool} initial Initial call.\n   * @returns {undefined}\n   */\n  function handleChange(initial) {\n    const previousValue = currentValue;\n    const state = store.getState();\n    currentValue = state.userSession.token;\n\n    if (\n      module.hot &&\n      module.hot.data &&\n      module.hot.data.reloaded &&\n      previousValue\n    ) {\n      currentValue = previousValue;\n    }\n\n    if (previousValue !== currentValue || initial) {\n      if (!currentValue) {\n        cookie.remove('auth_token', { path: '/' });\n      } else {\n        cookie.save('auth_token', currentValue, {\n          path: '/',\n          expires: new Date(jwtDecode(currentValue).exp * 1000),\n        });\n        const exp =\n          (jwtDecode(store.getState().userSession.token).exp * 1000 -\n            new Date().getTime()) *\n            0.9 || 3600000;\n        setTimeout(() => {\n          if (store.getState().userSession.token) {\n            if (\n              jwtDecode(store.getState().userSession.token).exp * 1000 >\n              new Date().getTime()\n            ) {\n              store.dispatch(loginRenew());\n            } else {\n              // Logout\n              store.dispatch(\n                push(\n                  `/logout?return_url=${\n                    store.getState().router.location.pathname\n                  }`,\n                ),\n              );\n            }\n          }\n        }, exp);\n      }\n    }\n  }\n\n  store.subscribe(handleChange);\n  handleChange(true);\n}\n\nif (module.hot) {\n  module.hot.dispose((data) => {\n    data.reloaded = true;\n  });\n}\n","/**\n * Blocks helper.\n * @module helpers/Blocks\n */\n\nimport { omit, without, endsWith, find, keys } from 'lodash';\nimport move from 'lodash-move';\nimport { v4 as uuid } from 'uuid';\nimport config from '@plone/volto/registry';\n\n/**\n * Get blocks field.\n * @function getBlocksFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the blocks\n */\nexport function getBlocksFieldname(props) {\n  return (\n    find(\n      keys(props),\n      (key) => key !== 'volto.blocks' && endsWith(key, 'blocks'),\n    ) || null\n  );\n}\n\n/**\n * Get blocks layout field.\n * @function getBlocksLayoutFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the blocks layout\n */\nexport function getBlocksLayoutFieldname(props) {\n  return (\n    find(\n      keys(props),\n      (key) => key !== 'volto.blocks' && endsWith(key, 'blocks_layout'),\n    ) || null\n  );\n}\n\n/**\n * Has blocks data.\n * @function hasBlocksData\n * @param {Object} props Properties.\n * @return {boolean} True if it has blocks data.\n */\nexport function hasBlocksData(props) {\n  return (\n    find(\n      keys(props),\n      (key) => key !== 'volto.blocks' && endsWith(key, 'blocks'),\n    ) !== undefined\n  );\n}\n\n/**\n * Pluggable method to test if a block has a set value (any non-empty value)\n * @function blockHasValue\n * @param {Object} data Block data\n * @return {boolean} True if block has a non-empty value\n */\nexport function blockHasValue(data) {\n  const { blocks } = config;\n  const blockType = data['@type'];\n  const check = blocks.blocksConfig[blockType]?.blockHasValue;\n  if (!check) {\n    return true;\n  }\n  return check(data);\n}\n\n/**\n * Get block pairs of [id, block] from content properties\n * @function getBlocks\n * @param {Object} properties\n * @return {Array} a list of block [id, value] pairs, in order from layout\n */\nexport const getBlocks = (properties) => {\n  const blocksFieldName = getBlocksFieldname(properties);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n  return (\n    properties[blocksLayoutFieldname]?.items?.map((n) => [\n      n,\n      properties[blocksFieldName][n],\n    ]) || []\n  );\n};\n\n/**\n * Move block to different location index within blocks_layout\n * @function moveBlock\n * @param {Object} formData Form data\n * @param {number} source index within form blocks_layout items\n * @param {number} destination index within form blocks_layout items\n * @return {Object} New form data\n */\nexport function moveBlock(formData, source, destination) {\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  return {\n    ...formData,\n    [blocksLayoutFieldname]: {\n      items: move(formData[blocksLayoutFieldname].items, source, destination),\n    },\n  };\n}\n\n/**\n * Delete block by id\n * @function deleteBlock\n * @param {Object} formData Form data\n * @param {string} blockId Block uid\n * @return {Object} New form data\n */\nexport function deleteBlock(formData, blockId) {\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n  let newFormData = {\n    ...formData,\n    [blocksLayoutFieldname]: {\n      items: without(formData[blocksLayoutFieldname].items, blockId),\n    },\n    [blocksFieldname]: omit(formData[blocksFieldname], [blockId]),\n  };\n\n  if (newFormData[blocksLayoutFieldname].items.length === 0) {\n    newFormData = addBlock(newFormData, config.settings.defaultBlockType, 0);\n  }\n\n  return newFormData;\n}\n\n/**\n * Add block\n * @function addBlock\n * @param {Object} formData Form data\n * @param {string} type Block type\n * @param {number} index Destination index\n * @return {Array} New block id, New form data\n */\nexport function addBlock(formData, type, index) {\n  const { settings } = config;\n  const id = uuid();\n  const idTrailingBlock = uuid();\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const totalItems = formData[blocksLayoutFieldname].items.length;\n  const insert = index === -1 ? totalItems : index;\n\n  return [\n    id,\n    {\n      ...formData,\n      [blocksLayoutFieldname]: {\n        items: [\n          ...formData[blocksLayoutFieldname].items.slice(0, insert),\n          id,\n          ...(type !== settings.defaultBlockType ? [idTrailingBlock] : []),\n          ...formData[blocksLayoutFieldname].items.slice(insert),\n        ],\n      },\n      [blocksFieldname]: {\n        ...formData[blocksFieldname],\n        [id]: {\n          '@type': type,\n        },\n        ...(type !== settings.defaultBlockType && {\n          [idTrailingBlock]: {\n            '@type': settings.defaultBlockType,\n          },\n        }),\n      },\n    },\n  ];\n}\n\n/**\n * Mutate block\n * @function mutateBlock\n * @param {Object} formData Form data\n * @param {string} id Block uid to mutate\n * @param {number} value Block's new value\n * @return {Object} New form data\n */\nexport function mutateBlock(formData, id, value) {\n  const { settings } = config;\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const index = formData[blocksLayoutFieldname].items.indexOf(id) + 1;\n\n  // Test if block at index is already a placeholder (trailing) block\n  const trailId = formData[blocksLayoutFieldname].items[index];\n  if (trailId) {\n    const block = formData[blocksFieldname][trailId];\n    if (!blockHasValue(block)) {\n      return {\n        ...formData,\n        [blocksFieldname]: {\n          ...formData[blocksFieldname],\n          [id]: value || null,\n        },\n      };\n    }\n  }\n\n  const idTrailingBlock = uuid();\n  return {\n    ...formData,\n    [blocksFieldname]: {\n      ...formData[blocksFieldname],\n      [id]: value || null,\n      [idTrailingBlock]: {\n        '@type': settings.defaultBlockType,\n      },\n    },\n    [blocksLayoutFieldname]: {\n      items: [\n        ...formData[blocksLayoutFieldname].items.slice(0, index),\n        idTrailingBlock,\n        ...formData[blocksLayoutFieldname].items.slice(index),\n      ],\n    },\n  };\n}\n\n/**\n * Insert new block before another block\n * @function insertBlock\n * @param {Object} formData Form data\n * @param {string} id Insert new block before the block with this id\n * @param {number} value New block's value\n * @return {Array} New block id, New form data\n */\nexport function insertBlock(formData, id, value) {\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const index = formData[blocksLayoutFieldname].items.indexOf(id);\n\n  const newBlockId = uuid();\n  return [\n    newBlockId,\n    {\n      ...formData,\n      [blocksFieldname]: {\n        ...formData[blocksFieldname],\n        [newBlockId]: value || null,\n      },\n      [blocksLayoutFieldname]: {\n        items: [\n          ...formData[blocksLayoutFieldname].items.slice(0, index),\n          newBlockId,\n          ...formData[blocksLayoutFieldname].items.slice(index),\n        ],\n      },\n    },\n  ];\n}\n\n/**\n * Change block\n * @function changeBlock\n * @param {Object} formData Form data\n * @param {string} id Block uid to change\n * @param {number} value Block's new value\n * @return {Object} New form data\n */\nexport function changeBlock(formData, id, value) {\n  const blocksFieldname = getBlocksFieldname(formData);\n  return {\n    ...formData,\n    [blocksFieldname]: {\n      ...formData[blocksFieldname],\n      [id]: value || null,\n    },\n  };\n}\n\n/**\n * Get the next block UID within form\n * @function nextBlockId\n * @param {Object} formData Form data\n * @param {string} currentBlock Block uid\n * @return {string} Next block uid\n */\nexport function nextBlockId(formData, currentBlock) {\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const currentIndex = formData[blocksLayoutFieldname].items.indexOf(\n    currentBlock,\n  );\n\n  if (currentIndex === formData[blocksLayoutFieldname].items.length - 1) {\n    // We are already at the bottom block don't do anything\n    return null;\n  }\n\n  const newIndex = currentIndex + 1;\n  return formData[blocksLayoutFieldname].items[newIndex];\n}\n\n/**\n * Get the previous block UID within form\n * @function previousBlockId\n * @param {Object} formData Form data\n * @param {string} currentBlock Block uid\n * @return {string} Previous block uid\n */\nexport function previousBlockId(formData, currentBlock) {\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const currentIndex = formData[blocksLayoutFieldname].items.indexOf(\n    currentBlock,\n  );\n\n  if (currentIndex === 0) {\n    // We are already at the top block don't do anything\n    return null;\n  }\n  const newindex = currentIndex - 1;\n  return formData[blocksLayoutFieldname].items[newindex];\n}\n\n/**\n * Generate empty block form\n * @function emptyBlocksForm\n * @param {Object} formData Form data\n * @return {Object} Emptry blocks form with one defaultBlockType block\n */\nexport function emptyBlocksForm() {\n  const { settings } = config;\n  const id = uuid();\n  return {\n    blocks: {\n      [id]: {\n        '@type': settings.defaultBlockType,\n      },\n    },\n    blocks_layout: { items: [id] },\n  };\n}\n","import { Component, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport withSideEffect from 'react-side-effect';\n\n/**\n * @export\n * @class BodyClass\n * @extends {Component}\n */\nclass BodyClass extends Component {\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.children) {\n      return Children.only(this.props.children);\n    }\n    return null;\n  }\n}\n\nBodyClass.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n};\n\nBodyClass.defaultProps = {\n  children: null,\n  className: null,\n};\n\n/**\n * reducePropsToState\n * @function reducePropsToState\n * @param {*} propsList propsList\n * @returns {List} classList\n */\nfunction reducePropsToState(propsList) {\n  let classList = [];\n  propsList.forEach((props) => {\n    if (props.className) {\n      classList = classList.concat(props.className);\n    }\n  });\n  return classList;\n}\n\n/**\n * handleStateChangeOnClient\n * @function handleStateChangeOnClient\n * @param {*} classList classList\n * @returns {null} null\n */\nfunction handleStateChangeOnClient(classList) {\n  document.body.className = '';\n  classList.forEach((className) => {\n    // This allows the component to accept more than one class at the same time\n    if (className.includes(' ')) {\n      className.split(' ').forEach((className) => {\n        if (!document.body.classList.contains(className)) {\n          document.body.classList.add(className);\n        }\n      });\n    } else {\n      if (!document.body.classList.contains(className)) {\n        document.body.classList.add(className);\n      }\n    }\n  });\n}\n\nexport default withSideEffect(\n  reducePropsToState,\n  handleStateChangeOnClient,\n)(BodyClass);\n","/**\n * Content helper.\n * @module helpers/Content\n */\n\nimport { omitBy, mapKeys, pickBy, map, keys, endsWith, find } from 'lodash';\nimport config from '@plone/volto/registry';\n\n/**\n * Nest content.\n * @function nestContent\n * @param {Object} props Properties.\n * @return {string} Field name of the block\n */\nexport function nestContent(props) {\n  if (!props['@static_behaviors']) {\n    return props;\n  }\n\n  let nestedProps = props;\n\n  map(props['@static_behaviors'], (behavior) => {\n    const values = mapKeys(\n      pickBy(nestedProps, (value, key) => key.indexOf(behavior) !== -1),\n      (value, key) => key.replace(`${behavior}.`, ''),\n    );\n    nestedProps = omitBy(\n      nestedProps,\n      (value, key) => key.indexOf(behavior) !== -1,\n    );\n    nestedProps = {\n      ...nestedProps,\n      [behavior]: values,\n    };\n  });\n  return nestedProps;\n}\n\n/**\n * Get layout field.\n * @function getLayoutFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the layout\n */\nexport function getLayoutFieldname(props) {\n  return (\n    find(keys(props), (key) => endsWith(key, 'content_layout')) || 'layout'\n  );\n}\n\n/**\n * Get content icon.\n * @description Configurable in config\n * @function getContentIcon\n * @param {string} type Content type\n * @param {boolean} isFolderish\n * @returns {Object} Icon component\n */\nexport function getContentIcon(type, isFolderish) {\n  const { settings } = config;\n  const { contentIcons } = settings;\n\n  if (type in contentIcons) return contentIcons[type];\n  return isFolderish ? contentIcons.Folder : contentIcons.File;\n}\n","import { map, uniq } from 'lodash';\nimport { messages } from '../MessageLabels/MessageLabels';\n\n/**\n * Will return the intl message if invalid\n * @param {boolean} isValid\n * @param {string} maxCriterion\n * @param {string | number} valueToCompare can compare '47' < 50\n * @param {Function} intlFunc\n */\nconst validationMessage = (isValid, maxCriterion, valueToCompare, intlFunc) =>\n  !isValid\n    ? intlFunc(messages[maxCriterion], {\n        len: valueToCompare,\n      })\n    : null;\n/**\n * Returns if based on the criterion the value is lower or equal\n * @param {string | number} value can compare '47' < 50\n * @param {string | number} valueToCompare can compare '47' < 50\n * @param {string} minCriterion\n * @param {Function} intlFunc\n */\nconst isMaxPropertyValid = (value, valueToCompare, minCriterion, intlFunc) => {\n  const isValid = valueToCompare !== undefined ? value <= valueToCompare : true;\n  return validationMessage(isValid, minCriterion, valueToCompare, intlFunc);\n};\n/**\n * Returns if based on the criterion the value is higher or equal\n * @param {string | number} value can compare '47' < 50\n * @param {string | number} valueToCompare can compare '47' < 50\n * @param {string} minCriterion\n * @param {Function} intlFunc\n */\nconst isMinPropertyValid = (value, valueToCompare, maxCriterion, intlFunc) => {\n  const isValid = valueToCompare !== undefined ? value >= valueToCompare : true;\n  return validationMessage(isValid, maxCriterion, valueToCompare, intlFunc);\n};\n\nconst widgetValidation = {\n  email: {\n    isValidEmail: (emailValue, emailObj, intlFunc) => {\n      const emailRegex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n      const isValid = emailRegex.test(emailValue);\n      return !isValid ? intlFunc(messages.isValidEmail) : null;\n    },\n    minLength: (emailValue, emailObj, intlFunc) =>\n      isMinPropertyValid(\n        emailValue.length,\n        emailObj.minLength,\n        'minLength',\n        intlFunc,\n      ),\n    maxLength: (emailValue, emailObj, intlFunc) =>\n      isMaxPropertyValid(\n        emailValue.length,\n        emailObj.maxLength,\n        'maxLength',\n        intlFunc,\n      ),\n  },\n  url: {\n    isValidURL: (urlValue, urlObj, intlFunc) => {\n      const urlRegex = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([-.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$/gm;\n      const isValid = urlRegex.test(urlValue);\n      return !isValid ? intlFunc(messages.isValidURL) : null;\n    },\n    minLength: (urlValue, urlObj, intlFunc) =>\n      isMinPropertyValid(\n        urlValue.length,\n        urlObj.minLength,\n        'minLength',\n        intlFunc,\n      ),\n    maxLength: (urlValue, urlObj, intlFunc) =>\n      isMaxPropertyValid(\n        urlValue.length,\n        urlObj.maxLength,\n        'maxLength',\n        intlFunc,\n      ),\n  },\n  password: {\n    minLength: (passwordValue, passwordObj, intlFunc) =>\n      isMinPropertyValid(\n        passwordValue.length,\n        passwordObj.minLength,\n        'minLength',\n        intlFunc,\n      ),\n    maxLength: (passwordValue, passwordObj, intlFunc) =>\n      isMaxPropertyValid(\n        passwordValue.length,\n        passwordObj.maxLength,\n        'maxLength',\n        intlFunc,\n      ),\n  },\n  string: {\n    minLength: (value, itemObj, intlFunc) =>\n      isMinPropertyValid(\n        value.length,\n        itemObj.minLength,\n        'minLength',\n        intlFunc,\n      ),\n    maxLength: (value, itemObj, intlFunc) =>\n      isMaxPropertyValid(\n        value.length,\n        itemObj.maxLengthj,\n        'maxLength',\n        intlFunc,\n      ),\n  },\n  number: {\n    isNumber: (value, itemObj, intlFunc) => {\n      const floatRegex = /^[+-]?\\d+(\\.\\d+)?$/;\n      const isValid = !isNaN(value) && floatRegex.test(value);\n      return !isValid ? intlFunc(messages.isNumber) : null;\n    },\n    minimum: (value, itemObj, intlFunc) =>\n      isMinPropertyValid(value, itemObj.minimum, 'minimum', intlFunc),\n    maximum: (value, itemObj, intlFunc) =>\n      isMaxPropertyValid(value, itemObj.maximum, 'maximum', intlFunc),\n  },\n  integer: {\n    isInteger: (value, itemObj, intlFunc) => {\n      const intRegex = /^-?[0-9]+$/;\n      const isValid = !isNaN(value) && intRegex.test(value);\n      return !isValid ? intlFunc(messages.isInteger) : null;\n    },\n    minimum: (value, itemObj, intlFunc) =>\n      isMinPropertyValid(value, itemObj.minimum, 'minimum', intlFunc),\n    maximum: (value, itemObj, intlFunc) =>\n      isMaxPropertyValid(value, itemObj.maximum, 'maximum', intlFunc),\n  },\n};\n\n/**\n * The string that comes my not be a valid JSON\n * @param {string} requestItem\n */\nconst tryParseJSON = (requestItem) => {\n  let resultObj = null;\n  try {\n    resultObj = JSON.parse(requestItem);\n  } catch (e) {\n    try {\n      resultObj = JSON.parse(requestItem.replace(/'/g, '\"'));\n    } catch (e) {\n      resultObj = null;\n    }\n  }\n  return resultObj;\n};\n\n/**\n * Returns errors if obj has unique Items\n * @param {Object} field\n * @param {*} fieldData\n * @returns {Object[string]} - list of errors\n */\nconst hasUniqueItems = (field, fieldData, formatMessage) => {\n  const errors = [];\n  if (\n    field.uniqueItems &&\n    fieldData &&\n    uniq(fieldData).length !== fieldData.length\n  ) {\n    errors.push(formatMessage(messages.uniqueItems));\n  }\n  return errors;\n};\n\n/**\n * If required fields are undefined, return list of errors\n * @returns {Object[string]} - list of errors\n */\nconst validateRequiredFields = (schema, formData, formatMessage) => {\n  const errors = {};\n\n  map(schema.required, (requiredField) => {\n    const type = schema.properties[requiredField]?.type;\n    const widget = schema.properties[requiredField]?.widget;\n\n    let isEmpty = !formData[requiredField];\n    if (!isEmpty) {\n      if (type === 'array') {\n        isEmpty = formData[requiredField]\n          ? formData[requiredField].length === 0\n          : true;\n      } else if (type === 'string' && widget === 'richtext') {\n        isEmpty = !(\n          formData[requiredField]?.data?.replace(/(<([^>]+)>)/g, '').length > 0\n        );\n      }\n    }\n    if (\n      schema.properties[requiredField] &&\n      schema.properties[requiredField].type !== 'boolean' &&\n      !schema.properties[requiredField].readonly &&\n      isEmpty\n    ) {\n      errors[requiredField] = [];\n      errors[requiredField].push(formatMessage(messages.required));\n    }\n  });\n\n  return errors;\n};\n/**\n * Return list of errors if field constraints are not respected\n * (ex min, max, maxLength, email format, url format etc)\n * each potential criterion has a validation process in widgetValidation\n * !!ONLY fields with data will be tested (those undefined are ignored here)\n * @returns {Object[string]} - list of errors\n */\nconst validateFieldsPerFieldset = (schema, formData, formatMessage) => {\n  const errors = validateRequiredFields(schema, formData, formatMessage);\n\n  map(schema.properties, (field, fieldId) => {\n    const fieldWidgetType = field.widget || field.type;\n    const widgetValidationCriteria = widgetValidation[fieldWidgetType]\n      ? Object.keys(widgetValidation[fieldWidgetType])\n      : [];\n    let fieldData = formData[fieldId];\n    // test each criterion ex maximum, isEmail, isUrl, maxLength etc\n    const fieldErrors = widgetValidationCriteria\n      .map((widgetCriterion) => {\n        const errorMessage =\n          fieldData === undefined || fieldData === null\n            ? null\n            : widgetValidation[fieldWidgetType][widgetCriterion](\n                fieldData,\n                field,\n                formatMessage,\n              );\n        return errorMessage;\n      })\n      .filter((item) => !!item);\n\n    const uniqueErrors = hasUniqueItems(field, fieldData, formatMessage);\n    const mergedErrors = [...fieldErrors, ...uniqueErrors];\n\n    if (mergedErrors.length > 0) {\n      errors[fieldId] = [\n        ...(errors[fieldId] || []),\n        ...fieldErrors,\n        ...uniqueErrors,\n      ];\n    }\n  });\n\n  return errors;\n};\n\n/**\n * Create the errors object from backend the same way it is done on Frontend validation\n * @param {string} requestError form the server\n * @returns {Object}\n */\nconst giveServerErrorsToCorrespondingFields = (requestError) => {\n  let errorsList = tryParseJSON(requestError);\n  const errors = {};\n\n  if (Array.isArray(errorsList) && errorsList.length > 0) {\n    errorsList.forEach((errorItem) => {\n      errors[errorItem.field] = errors[errorItem.field]\n        ? errors[errorItem.field].push(errorItem.message)\n        : [errorItem.message];\n    });\n  }\n  return errors;\n};\n\n/**\n * The first Fieldset (Tab) that has any errors\n * will be selected\n * @param {Object[]} errors\n * @param {string} errors[].field\n * @param {Object} schema\n * @returns {number} activeIndex\n */\nconst getIndexOfFirstTabWithErrors = (errors, schema) => {\n  let activeIndex = 0;\n\n  schema.fieldsets.some((fieldSet, index) => {\n    let foundfield = fieldSet.fields.some((fieldId) => errors[fieldId]);\n\n    activeIndex = foundfield ? index : activeIndex;\n    return foundfield;\n  });\n\n  return activeIndex;\n};\n\nclass FormValidation {\n  /**\n   * The first Fieldset (Tab) that has any errors\n   * will be selected\n   * @param {Object} errors\n   * @param {Object} schema\n   * @returns {number} activeIndex\n   */\n  static showFirstTabWithErrors({\n    errors = {},\n    schema = { properties: {}, fieldsets: [], required: [] },\n  } = {}) {\n    return getIndexOfFirstTabWithErrors(errors, schema);\n  }\n  /**\n   * Create the errors object from backend the same way it is done on Frontend validation\n   * @param {string} requestError form the server\n   * @returns {Object}\n   */\n  static giveServerErrorsToCorrespondingFields(requestError = '') {\n    return giveServerErrorsToCorrespondingFields(requestError);\n  }\n  /**\n   * Return validation result\n   * @param {Object} schema\n   * @param {Object} formData\n   * @param {function} formatMessage\n   * @returns {Object} errors\n   */\n  static validateFieldsPerFieldset({\n    schema = { properties: {}, fieldsets: [], required: [] },\n    formData = {},\n    formatMessage = () => {},\n  } = {}) {\n    return validateFieldsPerFieldset(schema, formData, formatMessage);\n  }\n}\n\nexport default FormValidation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport withSideEffect from 'react-side-effect';\nimport isEqual from 'react-fast-compare';\nimport {\n  convertReactPropstoHtmlAttributes,\n  handleClientStateChange,\n  mapStateOnServer,\n  reducePropsToState,\n  warn,\n} from './HelmetUtils.js';\nimport { TAG_NAMES, VALID_TAG_NAMES } from './HelmetConstants.js';\n\nconst Helmet = (Component) =>\n  class HelmetWrapper extends React.Component {\n    /**\n     * @param {Object} base: {\"target\": \"_blank\", \"href\": \"http://mysite.com/\"}\n     * @param {Object} bodyAttributes: {\"className\": \"root\"}\n     * @param {String} defaultTitle: \"Default Title\"\n     * @param {Boolean} defer: true\n     * @param {Boolean} encodeSpecialCharacters: true\n     * @param {Object} htmlAttributes: {\"lang\": \"en\", \"amp\": undefined}\n     * @param {Array} link: [{\"rel\": \"canonical\", \"href\": \"http://mysite.com/example\"}]\n     * @param {Array} meta: [{\"name\": \"description\", \"content\": \"Test description\"}]\n     * @param {Array} noscript: [{\"innerHTML\": \"<img src='http://mysite.com/js/test.js'\"}]\n     * @param {Function} onChangeClientState: \"(newState) => console.log(newState)\"\n     * @param {Array} script: [{\"type\": \"text/javascript\", \"src\": \"http://mysite.com/js/test.js\"}]\n     * @param {Array} style: [{\"type\": \"text/css\", \"cssText\": \"div { display: block; color: blue; }\"}]\n     * @param {String} title: \"Title\"\n     * @param {Object} titleAttributes: {\"itemprop\": \"name\"}\n     * @param {String} titleTemplate: \"MySite.com - %s\"\n     */\n    static propTypes = {\n      base: PropTypes.object,\n      bodyAttributes: PropTypes.object,\n      children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n      ]),\n      defaultTitle: PropTypes.string,\n      defer: PropTypes.bool,\n      encodeSpecialCharacters: PropTypes.bool,\n      htmlAttributes: PropTypes.object,\n      link: PropTypes.arrayOf(PropTypes.object),\n      meta: PropTypes.arrayOf(PropTypes.object),\n      noscript: PropTypes.arrayOf(PropTypes.object),\n      onChangeClientState: PropTypes.func,\n      script: PropTypes.arrayOf(PropTypes.object),\n      style: PropTypes.arrayOf(PropTypes.object),\n      title: PropTypes.string,\n      titleAttributes: PropTypes.object,\n      titleTemplate: PropTypes.string,\n    };\n\n    static defaultProps = {\n      defer: true,\n      encodeSpecialCharacters: true,\n    };\n\n    // Component.peek comes from react-side-effect:\n    // For testing, you may use a static peek() method available on the returned component.\n    // It lets you get the current state without resetting the mounted instance stack.\n    // Don’t use it for anything other than testing.\n    static peek = Component.peek;\n\n    static rewind = () => {\n      let mappedState = Component.rewind();\n      if (!mappedState) {\n        // provide fallback if mappedState is undefined\n        mappedState = mapStateOnServer({\n          baseTag: [],\n          bodyAttributes: {},\n          encodeSpecialCharacters: true,\n          htmlAttributes: {},\n          linkTags: [],\n          metaTags: [],\n          noscriptTags: [],\n          scriptTags: [],\n          styleTags: [],\n          title: '',\n          titleAttributes: {},\n        });\n      }\n\n      return mappedState;\n    };\n\n    static set canUseDOM(canUseDOM) {\n      Component.canUseDOM = canUseDOM;\n    }\n\n    shouldComponentUpdate(nextProps) {\n      return !isEqual(this.props, nextProps);\n    }\n\n    mapNestedChildrenToProps(child, nestedChildren) {\n      if (!nestedChildren) {\n        return null;\n      }\n\n      // eslint-disable-next-line default-case\n      switch (child.type) {\n        case TAG_NAMES.SCRIPT:\n        case TAG_NAMES.NOSCRIPT:\n          return {\n            innerHTML: nestedChildren,\n          };\n\n        case TAG_NAMES.STYLE:\n          return {\n            cssText: nestedChildren,\n          };\n      }\n\n      throw new Error(\n        `<${child.type} /> elements are self-closing and can not contain children. Refer to our API for more information.`,\n      );\n    }\n\n    flattenArrayTypeChildren({\n      child,\n      arrayTypeChildren,\n      newChildProps,\n      nestedChildren,\n    }) {\n      return {\n        ...arrayTypeChildren,\n        [child.type]: [\n          ...(arrayTypeChildren[child.type] || []),\n          {\n            ...newChildProps,\n            ...this.mapNestedChildrenToProps(child, nestedChildren),\n          },\n        ],\n      };\n    }\n\n    mapObjectTypeChildren({ child, newProps, newChildProps, nestedChildren }) {\n      // eslint-disable-next-line default-case\n      switch (child.type) {\n        case TAG_NAMES.TITLE:\n          return {\n            ...newProps,\n            [child.type]: nestedChildren,\n            titleAttributes: { ...newChildProps },\n          };\n\n        case TAG_NAMES.BODY:\n          return {\n            ...newProps,\n            bodyAttributes: { ...newChildProps },\n          };\n\n        case TAG_NAMES.HTML:\n          return {\n            ...newProps,\n            htmlAttributes: { ...newChildProps },\n          };\n      }\n\n      return {\n        ...newProps,\n        [child.type]: { ...newChildProps },\n      };\n    }\n\n    mapArrayTypeChildrenToProps(arrayTypeChildren, newProps) {\n      let newFlattenedProps = { ...newProps };\n\n      Object.keys(arrayTypeChildren).forEach((arrayChildName) => {\n        newFlattenedProps = {\n          ...newFlattenedProps,\n          [arrayChildName]: arrayTypeChildren[arrayChildName],\n        };\n      });\n\n      return newFlattenedProps;\n    }\n\n    warnOnInvalidChildren(child, nestedChildren) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!VALID_TAG_NAMES.some((name) => child.type === name)) {\n          if (typeof child.type === 'function') {\n            return warn(\n              `You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.`,\n            );\n          }\n\n          return warn(\n            `Only elements types ${VALID_TAG_NAMES.join(\n              ', ',\n            )} are allowed. Helmet does not support rendering <${\n              child.type\n            }> elements. Refer to our API for more information.`,\n          );\n        }\n\n        if (\n          nestedChildren &&\n          typeof nestedChildren !== 'string' &&\n          (!Array.isArray(nestedChildren) ||\n            nestedChildren.some(\n              (nestedChild) => typeof nestedChild !== 'string',\n            ))\n        ) {\n          throw new Error(\n            `Helmet expects a string as a child of <${child.type}>. Did you forget to wrap your children in braces? ( <${child.type}>{\\`\\`}</${child.type}> ) Refer to our API for more information.`,\n          );\n        }\n      }\n\n      return true;\n    }\n\n    mapChildrenToProps(children, newProps) {\n      let arrayTypeChildren = {};\n\n      React.Children.forEach(children, (child) => {\n        if (!child || !child.props) {\n          return;\n        }\n\n        const { children: nestedChildren, ...childProps } = child.props;\n        const newChildProps = convertReactPropstoHtmlAttributes(childProps);\n\n        this.warnOnInvalidChildren(child, nestedChildren);\n\n        switch (child.type) {\n          case TAG_NAMES.LINK:\n          case TAG_NAMES.META:\n          case TAG_NAMES.NOSCRIPT:\n          case TAG_NAMES.SCRIPT:\n          case TAG_NAMES.STYLE:\n            arrayTypeChildren = this.flattenArrayTypeChildren({\n              child,\n              arrayTypeChildren,\n              newChildProps,\n              nestedChildren,\n            });\n            break;\n\n          default:\n            newProps = this.mapObjectTypeChildren({\n              child,\n              newProps,\n              newChildProps,\n              nestedChildren,\n            });\n            break;\n        }\n      });\n\n      newProps = this.mapArrayTypeChildrenToProps(arrayTypeChildren, newProps);\n      return newProps;\n    }\n\n    render() {\n      const { children, ...props } = this.props;\n      let newProps = { ...props };\n\n      if (children) {\n        newProps = this.mapChildrenToProps(children, newProps);\n      }\n\n      return <Component {...newProps} />;\n    }\n  };\n\nconst NullComponent = () => null;\n\nconst HelmetSideEffects = withSideEffect(\n  reducePropsToState,\n  handleClientStateChange,\n  mapStateOnServer,\n)(NullComponent);\n\nconst HelmetExport = Helmet(HelmetSideEffects);\nHelmetExport.renderStatic = HelmetExport.rewind;\n\nexport { HelmetExport as Helmet };\n\nexport default HelmetExport;\n","export const ATTRIBUTE_NAMES = {\n  BODY: 'bodyAttributes',\n  HTML: 'htmlAttributes',\n  TITLE: 'titleAttributes',\n};\n\nexport const TAG_NAMES = {\n  BASE: 'base',\n  BODY: 'body',\n  HEAD: 'head',\n  HTML: 'html',\n  LINK: 'link',\n  META: 'meta',\n  NOSCRIPT: 'noscript',\n  SCRIPT: 'script',\n  STYLE: 'style',\n  TITLE: 'title',\n};\n\nexport const VALID_TAG_NAMES = Object.keys(TAG_NAMES).map(\n  (name) => TAG_NAMES[name],\n);\n\nexport const TAG_PROPERTIES = {\n  CHARSET: 'charset',\n  CSS_TEXT: 'cssText',\n  HREF: 'href',\n  HTTPEQUIV: 'http-equiv',\n  INNER_HTML: 'innerHTML',\n  ITEM_PROP: 'itemprop',\n  NAME: 'name',\n  PROPERTY: 'property',\n  REL: 'rel',\n  SRC: 'src',\n  TARGET: 'target',\n};\n\nexport const REACT_TAG_MAP = {\n  accesskey: 'accessKey',\n  charset: 'charSet',\n  class: 'className',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  'http-equiv': 'httpEquiv',\n  itemprop: 'itemProp',\n  tabindex: 'tabIndex',\n};\n\nexport const HELMET_PROPS = {\n  DEFAULT_TITLE: 'defaultTitle',\n  DEFER: 'defer',\n  ENCODE_SPECIAL_CHARACTERS: 'encodeSpecialCharacters',\n  ON_CHANGE_CLIENT_STATE: 'onChangeClientState',\n  TITLE_TEMPLATE: 'titleTemplate',\n};\n\nexport const HTML_TAG_MAP = Object.keys(REACT_TAG_MAP).reduce((obj, key) => {\n  obj[REACT_TAG_MAP[key]] = key;\n  return obj;\n}, {});\n\nexport const SELF_CLOSING_TAGS = [\n  TAG_NAMES.NOSCRIPT,\n  TAG_NAMES.SCRIPT,\n  TAG_NAMES.STYLE,\n];\n\nexport const HELMET_ATTRIBUTE = 'data-react-helmet';\n","/* eslint no-console: 0 */\nimport React from 'react';\nimport objectAssign from 'object-assign';\nimport {\n  ATTRIBUTE_NAMES,\n  HELMET_ATTRIBUTE,\n  HELMET_PROPS,\n  HTML_TAG_MAP,\n  REACT_TAG_MAP,\n  SELF_CLOSING_TAGS,\n  TAG_NAMES,\n  TAG_PROPERTIES,\n} from './HelmetConstants.js';\n\nconst encodeSpecialCharacters = (str, encode = true) => {\n  if (encode === false) {\n    return String(str);\n  }\n\n  return String(str)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;');\n};\n\nconst getTitleFromPropsList = (propsList) => {\n  const innermostTitle = getInnermostProperty(propsList, TAG_NAMES.TITLE);\n  const innermostTemplate = getInnermostProperty(\n    propsList,\n    HELMET_PROPS.TITLE_TEMPLATE,\n  );\n\n  if (innermostTemplate && innermostTitle) {\n    // use function arg to avoid need to escape $ characters\n    return innermostTemplate.replace(/%s/g, () =>\n      Array.isArray(innermostTitle) ? innermostTitle.join('') : innermostTitle,\n    );\n  }\n\n  const innermostDefaultTitle = getInnermostProperty(\n    propsList,\n    HELMET_PROPS.DEFAULT_TITLE,\n  );\n\n  return innermostTitle || innermostDefaultTitle || undefined;\n};\n\nconst getOnChangeClientState = (propsList) => {\n  return (\n    getInnermostProperty(propsList, HELMET_PROPS.ON_CHANGE_CLIENT_STATE) ||\n    (() => {})\n  );\n};\n\nconst getAttributesFromPropsList = (tagType, propsList) => {\n  return propsList\n    .filter((props) => typeof props[tagType] !== 'undefined')\n    .map((props) => props[tagType])\n    .reduce((tagAttrs, current) => {\n      return { ...tagAttrs, ...current };\n    }, {});\n};\n\nconst getBaseTagFromPropsList = (primaryAttributes, propsList) => {\n  return propsList\n    .filter((props) => typeof props[TAG_NAMES.BASE] !== 'undefined')\n    .map((props) => props[TAG_NAMES.BASE])\n    .reverse()\n    .reduce((innermostBaseTag, tag) => {\n      if (!innermostBaseTag.length) {\n        const keys = Object.keys(tag);\n\n        for (let i = 0; i < keys.length; i++) {\n          const attributeKey = keys[i];\n          const lowerCaseAttributeKey = attributeKey.toLowerCase();\n\n          if (\n            primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 &&\n            tag[lowerCaseAttributeKey]\n          ) {\n            return innermostBaseTag.concat(tag);\n          }\n        }\n      }\n\n      return innermostBaseTag;\n    }, []);\n};\n\nconst getTagsFromPropsList = (tagName, primaryAttributes, propsList) => {\n  // Calculate list of tags, giving priority innermost component (end of the propslist)\n  const approvedSeenTags = {};\n\n  return propsList\n    .filter((props) => {\n      if (Array.isArray(props[tagName])) {\n        return true;\n      }\n      if (typeof props[tagName] !== 'undefined') {\n        warn(\n          `Helmet: ${tagName} should be of type \"Array\". Instead found type \"${typeof props[\n            tagName\n          ]}\"`,\n        );\n      }\n      return false;\n    })\n    .map((props) => props[tagName])\n    .reverse()\n    .reduce((approvedTags, instanceTags) => {\n      const instanceSeenTags = {};\n\n      instanceTags\n        .filter((tag) => {\n          let primaryAttributeKey;\n          const keys = Object.keys(tag);\n          for (let i = 0; i < keys.length; i++) {\n            const attributeKey = keys[i];\n            const lowerCaseAttributeKey = attributeKey.toLowerCase();\n\n            // Special rule with link tags, since rel and href are both primary tags, rel takes priority\n            if (\n              primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 &&\n              !(\n                primaryAttributeKey === TAG_PROPERTIES.REL &&\n                tag[primaryAttributeKey].toLowerCase() === 'canonical'\n              ) &&\n              !(\n                lowerCaseAttributeKey === TAG_PROPERTIES.REL &&\n                tag[lowerCaseAttributeKey].toLowerCase() === 'stylesheet'\n              )\n            ) {\n              primaryAttributeKey = lowerCaseAttributeKey;\n            }\n            // Special case for innerHTML which doesn't work lowercased\n            if (\n              primaryAttributes.indexOf(attributeKey) !== -1 &&\n              (attributeKey === TAG_PROPERTIES.INNER_HTML ||\n                attributeKey === TAG_PROPERTIES.CSS_TEXT ||\n                attributeKey === TAG_PROPERTIES.ITEM_PROP)\n            ) {\n              primaryAttributeKey = attributeKey;\n            }\n          }\n\n          if (!primaryAttributeKey || !tag[primaryAttributeKey]) {\n            return false;\n          }\n\n          const value = tag[primaryAttributeKey].toLowerCase();\n\n          if (!approvedSeenTags[primaryAttributeKey]) {\n            approvedSeenTags[primaryAttributeKey] = {};\n          }\n\n          if (!instanceSeenTags[primaryAttributeKey]) {\n            instanceSeenTags[primaryAttributeKey] = {};\n          }\n\n          if (!approvedSeenTags[primaryAttributeKey][value]) {\n            instanceSeenTags[primaryAttributeKey][value] = true;\n            return true;\n          }\n\n          return false;\n        })\n        .reverse()\n        .forEach((tag) => approvedTags.push(tag));\n\n      // Update seen tags with tags from this instance\n      const keys = Object.keys(instanceSeenTags);\n      for (let i = 0; i < keys.length; i++) {\n        const attributeKey = keys[i];\n        const tagUnion = objectAssign(\n          {},\n          approvedSeenTags[attributeKey],\n          instanceSeenTags[attributeKey],\n        );\n\n        approvedSeenTags[attributeKey] = tagUnion;\n      }\n\n      return approvedTags;\n    }, [])\n    .reverse();\n};\n\nconst getInnermostProperty = (propsList, property) => {\n  for (let i = propsList.length - 1; i >= 0; i--) {\n    const props = propsList[i];\n\n    if (props.hasOwnProperty(property)) {\n      return props[property];\n    }\n  }\n\n  return null;\n};\n\nconst reducePropsToState = (propsList) => ({\n  baseTag: getBaseTagFromPropsList(\n    [TAG_PROPERTIES.HREF, TAG_PROPERTIES.TARGET],\n    propsList,\n  ),\n  bodyAttributes: getAttributesFromPropsList(ATTRIBUTE_NAMES.BODY, propsList),\n  defer: getInnermostProperty(propsList, HELMET_PROPS.DEFER),\n  encode: getInnermostProperty(\n    propsList,\n    HELMET_PROPS.ENCODE_SPECIAL_CHARACTERS,\n  ),\n  htmlAttributes: getAttributesFromPropsList(ATTRIBUTE_NAMES.HTML, propsList),\n  linkTags: getTagsFromPropsList(\n    TAG_NAMES.LINK,\n    [TAG_PROPERTIES.REL, TAG_PROPERTIES.HREF],\n    propsList,\n  ),\n  metaTags: getTagsFromPropsList(\n    TAG_NAMES.META,\n    [\n      TAG_PROPERTIES.NAME,\n      TAG_PROPERTIES.CHARSET,\n      TAG_PROPERTIES.HTTPEQUIV,\n      TAG_PROPERTIES.PROPERTY,\n      TAG_PROPERTIES.ITEM_PROP,\n    ],\n    propsList,\n  ),\n  noscriptTags: getTagsFromPropsList(\n    TAG_NAMES.NOSCRIPT,\n    [TAG_PROPERTIES.INNER_HTML],\n    propsList,\n  ),\n  onChangeClientState: getOnChangeClientState(propsList),\n  scriptTags: getTagsFromPropsList(\n    TAG_NAMES.SCRIPT,\n    [TAG_PROPERTIES.SRC, TAG_PROPERTIES.INNER_HTML],\n    propsList,\n  ),\n  styleTags: getTagsFromPropsList(\n    TAG_NAMES.STYLE,\n    [TAG_PROPERTIES.CSS_TEXT],\n    propsList,\n  ),\n  title: getTitleFromPropsList(propsList),\n  titleAttributes: getAttributesFromPropsList(ATTRIBUTE_NAMES.TITLE, propsList),\n});\n\nconst rafPolyfill = (() => {\n  let clock = Date.now();\n\n  return (callback) => {\n    const currentTime = Date.now();\n\n    if (currentTime - clock > 16) {\n      clock = currentTime;\n      callback(currentTime);\n    } else {\n      setTimeout(() => {\n        rafPolyfill(callback);\n      }, 0);\n    }\n  };\n})();\n\nconst cafPolyfill = (id) => clearTimeout(id);\n\nconst requestAnimationFrame =\n  typeof window !== 'undefined'\n    ? (window.requestAnimationFrame &&\n        window.requestAnimationFrame.bind(window)) ||\n      window.webkitRequestAnimationFrame ||\n      window.mozRequestAnimationFrame ||\n      rafPolyfill\n    : global.requestAnimationFrame || rafPolyfill;\n\nconst cancelAnimationFrame =\n  typeof window !== 'undefined'\n    ? window.cancelAnimationFrame ||\n      window.webkitCancelAnimationFrame ||\n      window.mozCancelAnimationFrame ||\n      cafPolyfill\n    : global.cancelAnimationFrame || cafPolyfill;\n\nconst warn = (msg) => {\n  return console && typeof console.warn === 'function' && console.warn(msg);\n};\n\nlet _helmetCallback = null;\n\nconst handleClientStateChange = (newState) => {\n  if (_helmetCallback) {\n    cancelAnimationFrame(_helmetCallback);\n  }\n\n  if (newState.defer) {\n    _helmetCallback = requestAnimationFrame(() => {\n      commitTagChanges(newState, () => {\n        _helmetCallback = null;\n      });\n    });\n  } else {\n    commitTagChanges(newState);\n    _helmetCallback = null;\n  }\n};\n\nconst commitTagChanges = (newState, cb) => {\n  const {\n    baseTag,\n    bodyAttributes,\n    htmlAttributes,\n    linkTags,\n    metaTags,\n    noscriptTags,\n    onChangeClientState,\n    scriptTags,\n    styleTags,\n    title,\n    titleAttributes,\n  } = newState;\n  updateAttributes(TAG_NAMES.BODY, bodyAttributes);\n  updateAttributes(TAG_NAMES.HTML, htmlAttributes);\n\n  updateTitle(title, titleAttributes);\n\n  const tagUpdates = {\n    baseTag: updateTags(TAG_NAMES.BASE, baseTag),\n    linkTags: updateTags(TAG_NAMES.LINK, linkTags),\n    metaTags: updateTags(TAG_NAMES.META, metaTags),\n    noscriptTags: updateTags(TAG_NAMES.NOSCRIPT, noscriptTags),\n    scriptTags: updateTags(TAG_NAMES.SCRIPT, scriptTags),\n    styleTags: updateTags(TAG_NAMES.STYLE, styleTags),\n  };\n\n  const addedTags = {};\n  const removedTags = {};\n\n  Object.keys(tagUpdates).forEach((tagType) => {\n    const { newTags, oldTags } = tagUpdates[tagType];\n\n    if (newTags.length) {\n      addedTags[tagType] = newTags;\n    }\n    if (oldTags.length) {\n      removedTags[tagType] = tagUpdates[tagType].oldTags;\n    }\n  });\n\n  cb && cb();\n\n  onChangeClientState(newState, addedTags, removedTags);\n};\n\nconst flattenArray = (possibleArray) => {\n  return Array.isArray(possibleArray) ? possibleArray.join('') : possibleArray;\n};\n\nconst updateTitle = (title, attributes) => {\n  if (typeof title !== 'undefined' && document.title !== title) {\n    document.title = flattenArray(title);\n  }\n\n  updateAttributes(TAG_NAMES.TITLE, attributes);\n};\n\nconst updateAttributes = (tagName, attributes) => {\n  const elementTag = document.getElementsByTagName(tagName)[0];\n\n  if (!elementTag) {\n    return;\n  }\n\n  const helmetAttributeString = elementTag.getAttribute(HELMET_ATTRIBUTE);\n  const helmetAttributes = helmetAttributeString\n    ? helmetAttributeString.split(',')\n    : [];\n  const attributesToRemove = [].concat(helmetAttributes);\n  const attributeKeys = Object.keys(attributes);\n\n  for (let i = 0; i < attributeKeys.length; i++) {\n    const attribute = attributeKeys[i];\n    const value = attributes[attribute] || '';\n\n    if (elementTag.getAttribute(attribute) !== value) {\n      elementTag.setAttribute(attribute, value);\n    }\n\n    if (helmetAttributes.indexOf(attribute) === -1) {\n      helmetAttributes.push(attribute);\n    }\n\n    const indexToSave = attributesToRemove.indexOf(attribute);\n    if (indexToSave !== -1) {\n      attributesToRemove.splice(indexToSave, 1);\n    }\n  }\n\n  for (let i = attributesToRemove.length - 1; i >= 0; i--) {\n    elementTag.removeAttribute(attributesToRemove[i]);\n  }\n\n  if (helmetAttributes.length === attributesToRemove.length) {\n    elementTag.removeAttribute(HELMET_ATTRIBUTE);\n  } else if (\n    elementTag.getAttribute(HELMET_ATTRIBUTE) !== attributeKeys.join(',')\n  ) {\n    elementTag.setAttribute(HELMET_ATTRIBUTE, attributeKeys.join(','));\n  }\n};\n\nconst updateTags = (type, tags) => {\n  const headElement = document.head || document.querySelector(TAG_NAMES.HEAD);\n  const tagNodes = headElement.querySelectorAll(`${type}[${HELMET_ATTRIBUTE}]`);\n  const oldTags = Array.prototype.slice.call(tagNodes);\n  const newTags = [];\n  let indexToDelete;\n\n  if (tags && tags.length) {\n    tags.forEach((tag) => {\n      const newElement = document.createElement(type);\n\n      for (const attribute in tag) {\n        if (tag.hasOwnProperty(attribute)) {\n          if (attribute === TAG_PROPERTIES.INNER_HTML) {\n            newElement.innerHTML = tag.innerHTML;\n          } else if (attribute === TAG_PROPERTIES.CSS_TEXT) {\n            if (newElement.styleSheet) {\n              newElement.styleSheet.cssText = tag.cssText;\n            } else {\n              newElement.appendChild(document.createTextNode(tag.cssText));\n            }\n          } else {\n            const value =\n              typeof tag[attribute] === 'undefined' ? '' : tag[attribute];\n            newElement.setAttribute(attribute, value);\n          }\n        }\n      }\n\n      newElement.setAttribute(HELMET_ATTRIBUTE, 'true');\n\n      // Remove a duplicate tag from domTagstoRemove, so it isn't cleared.\n      if (\n        oldTags.some((existingTag, index) => {\n          indexToDelete = index;\n          return newElement.isEqualNode(existingTag);\n        })\n      ) {\n        oldTags.splice(indexToDelete, 1);\n      } else {\n        newTags.push(newElement);\n      }\n    });\n  }\n\n  oldTags.forEach((tag) => tag.parentNode.removeChild(tag));\n  newTags.forEach((tag) => headElement.appendChild(tag));\n\n  return {\n    oldTags,\n    newTags,\n  };\n};\n\nconst generateElementAttributesAsString = (attributes) =>\n  Object.keys(attributes).reduce((str, key) => {\n    const attr =\n      typeof attributes[key] !== 'undefined'\n        ? `${key}=\"${attributes[key]}\"`\n        : `${key}`;\n    return str ? `${str} ${attr}` : attr;\n  }, '');\n\nconst generateTitleAsString = (type, title, attributes, encode) => {\n  const attributeString = generateElementAttributesAsString(attributes);\n  const flattenedTitle = flattenArray(title);\n  return attributeString\n    ? `<${type} ${HELMET_ATTRIBUTE}=\"true\" ${attributeString}>${encodeSpecialCharacters(\n        flattenedTitle,\n        encode,\n      )}</${type}>`\n    : `<${type} ${HELMET_ATTRIBUTE}=\"true\">${encodeSpecialCharacters(\n        flattenedTitle,\n        encode,\n      )}</${type}>`;\n};\n\nconst generateTagsAsString = (type, tags, encode) =>\n  tags.reduce((str, tag) => {\n    const attributeHtml = Object.keys(tag)\n      .filter(\n        (attribute) =>\n          !(\n            attribute === TAG_PROPERTIES.INNER_HTML ||\n            attribute === TAG_PROPERTIES.CSS_TEXT\n          ),\n      )\n      .reduce((string, attribute) => {\n        const attr =\n          typeof tag[attribute] === 'undefined'\n            ? attribute\n            : `${attribute}=\"${encodeSpecialCharacters(\n                tag[attribute],\n                encode,\n              )}\"`;\n        return string ? `${string} ${attr}` : attr;\n      }, '');\n\n    const tagContent = tag.innerHTML || tag.cssText || '';\n\n    const isSelfClosing = SELF_CLOSING_TAGS.indexOf(type) === -1;\n\n    return `${str}<${type} ${HELMET_ATTRIBUTE}=\"true\" ${attributeHtml}${\n      isSelfClosing ? `/>` : `>${tagContent}</${type}>`\n    }`;\n  }, '');\n\nconst convertElementAttributestoReactProps = (attributes, initProps = {}) => {\n  return Object.keys(attributes).reduce((obj, key) => {\n    obj[REACT_TAG_MAP[key] || key] = attributes[key];\n    return obj;\n  }, initProps);\n};\n\nconst convertReactPropstoHtmlAttributes = (props, initAttributes = {}) => {\n  return Object.keys(props).reduce((obj, key) => {\n    obj[HTML_TAG_MAP[key] || key] = props[key];\n    return obj;\n  }, initAttributes);\n};\n\nconst generateTitleAsReactComponent = (type, title, attributes) => {\n  // assigning into an array to define toString function on it\n  const initProps = {\n    key: title,\n    [HELMET_ATTRIBUTE]: true,\n  };\n  const props = convertElementAttributestoReactProps(attributes, initProps);\n\n  return [React.createElement(TAG_NAMES.TITLE, props, title)];\n};\n\nconst generateTagsAsReactComponent = (type, tags) =>\n  tags.map((tag, i) => {\n    const mappedTag = {\n      key: i,\n      [HELMET_ATTRIBUTE]: true,\n    };\n\n    Object.keys(tag).forEach((attribute) => {\n      const mappedAttribute = REACT_TAG_MAP[attribute] || attribute;\n\n      if (\n        mappedAttribute === TAG_PROPERTIES.INNER_HTML ||\n        mappedAttribute === TAG_PROPERTIES.CSS_TEXT\n      ) {\n        const content = tag.innerHTML || tag.cssText;\n        mappedTag.dangerouslySetInnerHTML = { __html: content };\n      } else {\n        mappedTag[mappedAttribute] = tag[attribute];\n      }\n    });\n\n    return React.createElement(type, mappedTag);\n  });\n\nconst getMethodsForTag = (type, tags, encode) => {\n  switch (type) {\n    case TAG_NAMES.TITLE:\n      return {\n        toComponent: () =>\n          generateTitleAsReactComponent(\n            type,\n            tags.title,\n            tags.titleAttributes,\n            encode,\n          ),\n        toString: () =>\n          generateTitleAsString(type, tags.title, tags.titleAttributes, encode),\n      };\n    case ATTRIBUTE_NAMES.BODY:\n    case ATTRIBUTE_NAMES.HTML:\n      return {\n        toComponent: () => convertElementAttributestoReactProps(tags),\n        toString: () => generateElementAttributesAsString(tags),\n      };\n    default:\n      return {\n        toComponent: () => generateTagsAsReactComponent(type, tags),\n        toString: () => generateTagsAsString(type, tags, encode),\n      };\n  }\n};\n\nconst mapStateOnServer = ({\n  baseTag,\n  bodyAttributes,\n  encode,\n  htmlAttributes,\n  linkTags,\n  metaTags,\n  noscriptTags,\n  scriptTags,\n  styleTags,\n  title = '',\n  titleAttributes,\n}) => ({\n  base: getMethodsForTag(TAG_NAMES.BASE, baseTag, encode),\n  bodyAttributes: getMethodsForTag(\n    ATTRIBUTE_NAMES.BODY,\n    bodyAttributes,\n    encode,\n  ),\n  htmlAttributes: getMethodsForTag(\n    ATTRIBUTE_NAMES.HTML,\n    htmlAttributes,\n    encode,\n  ),\n  link: getMethodsForTag(TAG_NAMES.LINK, linkTags, encode),\n  meta: getMethodsForTag(TAG_NAMES.META, metaTags, encode),\n  noscript: getMethodsForTag(TAG_NAMES.NOSCRIPT, noscriptTags, encode),\n  script: getMethodsForTag(TAG_NAMES.SCRIPT, scriptTags, encode),\n  style: getMethodsForTag(TAG_NAMES.STYLE, styleTags, encode),\n  title: getMethodsForTag(TAG_NAMES.TITLE, { title, titleAttributes }, encode),\n});\n\nexport { convertReactPropstoHtmlAttributes };\nexport { handleClientStateChange };\nexport { mapStateOnServer };\nexport { reducePropsToState };\nexport { requestAnimationFrame };\nexport { warn };\n","/**\n * Html helper.\n * @module helpers/Html\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from '@plone/volto/helpers/Helmet/Helmet';\nimport serialize from 'serialize-javascript';\nimport { join } from 'lodash';\nimport BodyClass from '@plone/volto/helpers/BodyClass/BodyClass';\nimport { runtimeConfig } from '@plone/volto/runtime_config';\nimport config from '@plone/volto/registry';\n\nconst CRITICAL_CSS_TEMPLATE = `function alter() {\n  document.querySelectorAll(\"head link[rel='prefetch']\").forEach(function(el) { el.rel = 'stylesheet'});\n}\nif (window.addEventListener) {\n  window.addEventListener('DOMContentLoaded', alter, false)\n} else {\n  window.onload=alter\n}`;\n\nexport const loadReducers = (state = {}) => {\n  const { settings } = config;\n  return Object.assign(\n    {},\n    ...Object.keys(state).map((name) =>\n      settings.initialReducersBlacklist.includes(name)\n        ? {}\n        : { [name]: state[name] },\n    ),\n  );\n};\n\n/**\n * Html class.\n * Wrapper component containing HTML metadata and boilerplate tags.\n * Used in server-side code only to wrap the string output of the\n * rendered route component.\n *\n * The only thing this component doesn't (and can't) include is the\n * HTML doctype declaration, which is added to the rendered output\n * by the server.js file.\n *\n * Critical.css behaviour: when a file `public/critical.css` is present, the\n * loading of stylesheets is changed. The styles in critical.css are inlined in\n * the generated HTML, and the whole story needs to change completely: instead\n * of treating stylesheets as priority for rendering, we want to defer their\n * loading as much as possible. So we change the stylesheets to be prefetched\n * and we switch their rel back to stylesheets at document ready event.\n *\n * @function Html\n * @param {Object} props Component properties.\n * @param {Object} props.assets Assets to be rendered.\n * @param {Object} props.component Content to be rendered as child node.\n * @param {Object} props.store Store object.\n * @returns {string} Markup of the not found page.\n */\n\n/**\n * Html class.\n * @class Html\n * @extends Component\n */\nclass Html extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    extractor: PropTypes.shape({\n      getLinkElements: PropTypes.func.isRequired,\n      getScriptElements: PropTypes.func.isRequired,\n      getStyleElements: PropTypes.func.isRequired,\n    }).isRequired,\n    markup: PropTypes.string.isRequired,\n    store: PropTypes.shape({\n      getState: PropTypes.func,\n    }).isRequired,\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { extractor, markup, store, criticalCss } = this.props;\n    const head = Helmet.rewind();\n    const bodyClass = join(BodyClass.rewind(), ' ');\n    return (\n      <html lang=\"en\">\n        <head>\n          <meta charSet=\"utf-8\" />\n          {head.base.toComponent()}\n          {head.title.toComponent()}\n          {head.meta.toComponent()}\n          {head.link.toComponent()}\n          {head.script.toComponent()}\n\n          <script\n            dangerouslySetInnerHTML={{\n              __html: `window.env = ${serialize(runtimeConfig)};`,\n            }}\n          />\n\n          <link rel=\"shortcut icon\" href=\"/favicon.ico\" />\n          <meta name=\"generator\" content=\"Volto - http://plone.org\" />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n          <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n          {process.env.NODE_ENV === 'production' && criticalCss && (\n            <style\n              dangerouslySetInnerHTML={{ __html: this.props.criticalCss }}\n            />\n          )}\n          {/* Add the crossorigin while in development */}\n          {extractor.getLinkElements().map((elem) =>\n            React.cloneElement(elem, {\n              crossOrigin:\n                process.env.NODE_ENV === 'production' ? undefined : 'true',\n              rel: !criticalCss\n                ? elem.props.rel\n                : elem.props.as === 'style'\n                ? 'prefetch'\n                : elem.props.rel,\n            }),\n          )}\n          {/* Styles in development are loaded with Webpack's style-loader, in production,\n              they need to be static*/}\n          {process.env.NODE_ENV === 'production' ? (\n            criticalCss ? (\n              <>\n                <script\n                  dangerouslySetInnerHTML={{\n                    __html: CRITICAL_CSS_TEMPLATE,\n                  }}\n                ></script>\n                {extractor.getStyleElements().map((elem) => (\n                  <noscript>\n                    {React.cloneElement(elem, {\n                      rel: 'stylesheet',\n                      crossOrigin:\n                        process.env.NODE_ENV === 'production'\n                          ? undefined\n                          : 'true',\n                    })}\n                  </noscript>\n                ))}\n              </>\n            ) : (\n              extractor.getStyleElements()\n            )\n          ) : undefined}\n        </head>\n        <body className={bodyClass}>\n          <div role=\"navigation\" aria-label=\"Toolbar\" id=\"toolbar\" />\n          <div id=\"main\" dangerouslySetInnerHTML={{ __html: markup }} />\n          <div id=\"sidebar\" />\n          <script\n            dangerouslySetInnerHTML={{\n              __html: `window.__data=${serialize(\n                loadReducers(store.getState()),\n              )};`,\n            }}\n            charSet=\"UTF-8\"\n          />\n          {/* Add the crossorigin while in development */}\n          {this.props.extractScripts !== false\n            ? extractor.getScriptElements().map((elem) =>\n                React.cloneElement(elem, {\n                  crossOrigin:\n                    process.env.NODE_ENV === 'production' ? undefined : 'true',\n                }),\n              )\n            : ''}\n        </body>\n      </html>\n    );\n  }\n}\n\nexport default Html;\n","import React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { omit } from 'lodash';\n\nimport { loadLazyLibrary } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\n\nconst validateLibs = (maybeLibs) => {\n  if (Array.isArray(maybeLibs)) {\n    return maybeLibs.map(validateLibs).filter((x) => !!x).length > 0;\n  }\n\n  const { loadables, lazyBundles } = config.settings;\n\n  return (\n    Object.keys(lazyBundles).includes(maybeLibs) ||\n    Object.keys(loadables).includes(maybeLibs)\n  );\n};\n\n/**\n * @param name {string|string[]} Name or names of a register bundle or lazy lib\n * @returns {string[]} an array of registered lib names.\n */\nconst flattenLazyBundle = (maybeNames) => {\n  const { lazyBundles } = config.settings;\n\n  if (!validateLibs(maybeNames)) {\n    throw new Error(`Invalid lib or bundle name ${maybeNames}`);\n  }\n\n  if (\n    typeof maybeNames === 'string' &&\n    typeof lazyBundles === 'object' &&\n    Object.keys(lazyBundles).includes(maybeNames)\n  ) {\n    const val = lazyBundles[maybeNames];\n\n    return Array.isArray(val) ? val : [val];\n  }\n\n  return Array.isArray(maybeNames) ? maybeNames : [maybeNames];\n};\n\n// TODO: make an unit test that checks if it is possible to have multiple\n// useLoadables hooks inside a single component?\nexport function useLazyLibs(maybeNames, options = {}) {\n  const libraries = flattenLazyBundle(maybeNames);\n  const { shouldRerender = true } = options;\n  const { loadables } = config.settings;\n  const dispatch = useDispatch();\n\n  const globalLoadedLibraries = useSelector(\n    (state) => state.lazyLibraries || {},\n    (left, right) => (shouldRerender ? shallowEqual(left, right) : true),\n  );\n\n  const loaded = getLoadables(libraries, globalLoadedLibraries);\n\n  libraries.forEach((name) => {\n    const LoadableLibrary = loadables[name];\n    if (!globalLoadedLibraries[name]) {\n      LoadableLibrary.load().then((val) => {\n        if (!globalLoadedLibraries[name] && val) {\n          dispatch(loadLazyLibrary(name, val));\n        }\n      });\n    }\n    return;\n  });\n\n  return loaded;\n}\n\nexport function preloadLazyLibs(maybeNames, forwardRef = true) {\n  const decorator = (WrappedComponent) => {\n    function PreloadLoadables(props) {\n      useLazyLibs(maybeNames, { shouldRerender: false });\n      const key = Array.isArray(maybeNames) ? maybeNames.join(',') : maybeNames;\n\n      PreloadLoadables.displayName = `PreloadLoadables(${key})(${getDisplayName(\n        WrappedComponent,\n      )})`;\n\n      return (\n        <WrappedComponent\n          key={key}\n          {...omit(props, 'forwardedRef')}\n          ref={forwardRef ? props.forwardedRef : null}\n        />\n      );\n    }\n\n    if (forwardRef) {\n      return hoistNonReactStatics(\n        React.forwardRef((props, ref) => {\n          return <PreloadLoadables {...props} forwardedRef={ref} />;\n        }),\n        WrappedComponent,\n      );\n    }\n\n    return hoistNonReactStatics(PreloadLoadables, WrappedComponent);\n  };\n\n  return decorator;\n}\n\nexport function injectLazyLibs(maybeNames, forwardRef = false) {\n  const decorator = (WrappedComponent) => {\n    let libraries;\n\n    function WithLoadables(props) {\n      libraries = libraries || flattenLazyBundle(maybeNames);\n\n      const loaded = useLazyLibs(libraries, { shouldRerender: true });\n      const isLoaded = Object.keys(loaded).length === libraries.length;\n\n      WithLoadables.displayName = `WithLoadables(${libraries.join(\n        ',',\n      )})(${getDisplayName(WrappedComponent)})`;\n\n      // The component is rendered when all libraries are loaded!\n      return isLoaded ? (\n        <WrappedComponent\n          key={Object.keys(loaded).join('|')}\n          {...omit(props, 'forwardedRef')}\n          {...loaded}\n          ref={forwardRef ? props.forwardedRef : null}\n        />\n      ) : null;\n    }\n\n    if (forwardRef) {\n      return hoistNonReactStatics(\n        React.forwardRef((props, ref) => {\n          return <WithLoadables {...props} forwardedRef={ref} />;\n        }),\n        WrappedComponent,\n      );\n    }\n\n    return hoistNonReactStatics(WithLoadables, WrappedComponent);\n  };\n\n  return decorator;\n}\n\nfunction getLoadables(names, loadedLibraries) {\n  return Object.assign(\n    {},\n    ...names.map((libName) =>\n      loadedLibraries[libName] ? { [libName]: loadedLibraries[libName] } : {},\n    ),\n  );\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n","export * from './Loadable';\n","import { defineMessages } from 'react-intl';\n\nexport const messages = defineMessages({\n  addBlock: {\n    id: 'Add block…',\n    defaultMessage: 'Add block…',\n  },\n  required: {\n    id: 'Required input is missing.',\n    defaultMessage: 'Required input is missing.',\n  },\n  minLength: {\n    id: 'Minimum length is {len}.',\n    defaultMessage: 'Minimum length is {len}.',\n  },\n  maxLength: {\n    id: 'Maximum length is {len}.',\n    defaultMessage: 'Maximum length is {len}.',\n  },\n  minimum: {\n    id: 'Minimum value is {len}.',\n    defaultMessage: 'Minimum value is {len}.',\n  },\n  maximum: {\n    id: 'Maximum value is {len}.',\n    defaultMessage: 'Maximum value is {len}.',\n  },\n  uniqueItems: {\n    id: 'Items must be unique.',\n    defaultMessage: 'Items must be unique.',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  isNumber: {\n    id: 'number',\n    defaultMessage: 'Input must be number',\n  },\n  isInteger: {\n    id: 'integer',\n    defaultMessage: 'Input must be integer',\n  },\n  isValidEmail: {\n    id: 'email',\n    defaultMessage: 'Input must be valid email (something@domain.com)',\n  },\n  isValidURL: {\n    id: 'url',\n    defaultMessage:\n      'Input must be valid url (www.something.com or http(s)://www.something.com)',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  thereWereSomeErrors: {\n    id: 'There were some errors.',\n    defaultMessage: 'There were some errors.',\n  },\n  searchUsers: {\n    id: 'Search users…',\n    defaultMessage: 'Search users…',\n  },\n  searchGroups: {\n    id: 'Search group…',\n    defaultMessage: 'Search group…',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  deleteUserConfirmTitle: {\n    id: 'Delete User',\n    defaultMessage: 'Delete User',\n  },\n  deleteGroupConfirmTitle: {\n    id: 'Delete Group',\n    defaultMessage: 'Delete Group',\n  },\n  add: {\n    id: 'Add',\n    defaultMessage: 'Add',\n  },\n  addUserButtonTitle: {\n    id: 'Add new user',\n    defaultMessage: 'Add new user',\n  },\n  addGroupsButtonTitle: {\n    id: 'Add new group',\n    defaultMessage: 'Add new group',\n  },\n  addUserFormTitle: {\n    id: 'Add User',\n    defaultMessage: 'Add User',\n  },\n  addGroupsFormTitle: {\n    id: 'Add group',\n    defaultMessage: 'Add group',\n  },\n  addUserFormUsernameTitle: {\n    id: 'Username',\n    defaultMessage: 'Username',\n  },\n  addGroupsFormTitleTitle: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  addUserFormFullnameTitle: {\n    id: 'Fullname',\n    defaultMessage: 'Fullname',\n  },\n  addUserGroupNameTitle: {\n    id: 'Add to Groups',\n    defaultMessage: 'Add to Groups',\n  },\n  addGroupsFormGroupNameTitle: {\n    id: 'Groupname',\n    defaultMessage: 'Groupname',\n  },\n  addGroupsFormDescriptionTitle: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  addUserFormEmailTitle: {\n    id: 'Email',\n    defaultMessage: 'Email',\n  },\n  addGroupsFormEmailTitle: {\n    id: 'Email',\n    defaultMessage: 'Email',\n  },\n  addUserFormPasswordTitle: {\n    id: 'Password',\n    defaultMessage: 'Password',\n  },\n  addUserFormRolesTitle: {\n    id: 'Roles',\n    defaultMessage: 'Roles',\n  },\n  addGroupsFormRolesTitle: {\n    id: 'Roles',\n    defaultMessage: 'Roles',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  userCreated: {\n    id: 'User created',\n    defaultMessage: 'User created',\n  },\n  groupCreated: {\n    id: 'Group created',\n    defaultMessage: 'Group created',\n  },\n  usersAndGroups: {\n    id: 'Users and Groups',\n    defaultMessage: 'Users and Groups',\n  },\n  copyBlocks: {\n    id: 'Copy blocks',\n    defaultMesages: 'Copy blocks',\n  },\n  cutBlocks: {\n    id: 'Cut blocks',\n    defaultMesages: 'Cut blocks',\n  },\n  pasteBlocks: {\n    id: 'Paste blocks',\n    defaultMesages: 'Paste blocks',\n  },\n  deleteBlocks: {\n    id: 'Delete blocks',\n    defaultMesages: 'Delete blocks',\n  },\n  showAllUserButton: {\n    id: 'Show All',\n    defaultMessage: 'Show All',\n  },\n  showAllUserText: {\n    id: \"Enter a username above to search or click 'Show All'\",\n    defaultMessage: \"Enter a username above to search or click 'Show All'\",\n  },\n});\n","/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport cookie from 'react-cookie';\nimport config from '@plone/volto/registry';\n\n/**\n * Generate robots. Get robots from plone\n * @function generateRobots\n * @param {Object} req Request object\n * @return {string} Generated robots\n */\nexport const generateRobots = (req) =>\n  new Promise((resolve) => {\n    //const url = `${req.protocol}://${req.get('Host')}`;\n    const request = superagent.get(\n      `${\n        config.settings.internalApiPath ?? config.settings.apiPath\n      }/robots.txt`,\n    );\n    request.set('Accept', 'text/plain');\n\n    const authToken = cookie.load('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n\n    request.end((error, { text }) => {\n      if (error) {\n        resolve(text || error);\n      } else {\n        resolve(text);\n      }\n    });\n  });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\n\n/**\n *\n *\n * @class ScrollToTop\n * @extends {Component}\n */\nclass ScrollToTop extends React.Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    location: PropTypes.shape({\n      pathname: PropTypes.string,\n      hash: PropTypes.string,\n      search: PropTypes.string,\n    }).isRequired,\n    children: PropTypes.node.isRequired,\n  };\n\n  /**\n   * @param {*} prevProps Previous Props\n   * @returns {null} Null\n   * @memberof ScrollToTop\n   */\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  /**\n   * @returns {node} Children\n   * @memberof ScrollToTop\n   */\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport { map } from 'lodash';\nimport cookie from 'react-cookie';\nimport zlib from 'zlib';\nimport config from '@plone/volto/registry';\n\n/**\n * Generate sitemap\n * @function generateSitemap\n * @param {Object} req Request object\n * @return {string} Generated sitemap\n */\nexport const generateSitemap = (req) =>\n  new Promise((resolve) => {\n    const { settings } = config;\n    const url = `${req.protocol}://${req.get('Host')}`;\n    const request = superagent.get(\n      `${settings.apiPath}/@search?metadata_fields=modified&b_size=100000000`,\n    );\n    request.set('Accept', 'application/json');\n    const authToken = cookie.load('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.end((error, { body } = {}) => {\n      if (error) {\n        resolve(body || error);\n      } else {\n        const items = map(\n          body.items,\n          (item) =>\n            `  <url>\\n    <loc>${item['@id'].replace(\n              settings.apiPath,\n              url,\n            )}</loc>\\n    <lastmod>${item.modified}</lastmod>\\n  </url>`,\n        );\n        const result = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\\n${items.join(\n          '\\n',\n        )}\\n</urlset>`;\n        zlib.gzip(Buffer.from(result, 'utf8'), (err, buffer) => {\n          resolve(buffer);\n        });\n      }\n    });\n  });\n","/**\n * Url helper.\n * @module helpers/Url\n */\n\nimport { last, memoize } from 'lodash';\nimport urlRegex from './urlRegex';\nimport prependHttp from 'prepend-http';\nimport config from '@plone/volto/registry';\n\n/**\n * Get base url.\n * @function getBaseUrl\n * @param {string} url Url to be parsed.\n * @return {string} Base url of content object.\n */\nexport const getBaseUrl = memoize((url) => {\n  const { settings } = config;\n  // We allow settings.nonContentRoutes to have strings (that are supposed to match\n  // ending strings of pathnames, so we are converting them to RegEx to match also\n  const normalized_nonContentRoutes = settings.nonContentRoutes.map((item) => {\n    if (item.test) {\n      return item;\n    } else {\n      return new RegExp(item + '$');\n    }\n  });\n\n  let adjustedUrl = normalized_nonContentRoutes.reduce(\n    (acc, item) => acc.replace(item, ''),\n    url,\n  );\n\n  adjustedUrl = adjustedUrl || '/';\n  return adjustedUrl === '/' ? '' : adjustedUrl;\n});\n\n/**\n * Get parent url.\n * @function getParentUrl\n * @param {string} url Url to be parsed.\n * @return {string} Parent url of content object.\n */\nexport const getParentUrl = memoize((url) => {\n  return url.substring(0, url.lastIndexOf('/'));\n});\n\n/**\n * Get id from url.\n * @function getId\n * @param {string} url Url to be parsed.\n * @return {string} Id of content object.\n */\nexport function getId(url) {\n  return last(url.replace(/\\?.*$/, '').split('/'));\n}\n\n/**\n * Get view of an url.\n * @function getView\n * @param {string} url Url to be parsed.\n * @return {string} View of content object.\n */\nexport function getView(url) {\n  const view = last(url.replace(/\\?.*$/, '').split('/'));\n  if (\n    [\n      'add',\n      'layout',\n      'contents',\n      'edit',\n      'delete',\n      'diff',\n      'history',\n      'sharing',\n      'controlpanel',\n    ].indexOf(view) === -1\n  ) {\n    return 'view';\n  }\n  return view === 'layout' ? 'edit' : view;\n}\n\n/**\n * Flatten to app server URL - Given a URL if it starts with the API server URL\n * this method flattens it (removes) the server part\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenToAppURL\n * @param {string} url URL of the object\n * @returns {string} Flattened URL to the app server\n */\nexport function flattenToAppURL(url) {\n  const { settings } = config;\n  return (\n    url &&\n    url\n      .replace(settings.internalApiPath, '')\n      .replace(settings.apiPath, '')\n      .replace(settings.publicURL, '')\n  );\n}\n\n/**\n * Returns true if the current view is a cms ui view\n * @method isCmsUi\n * @param {string} currentPathname pathname of the current view\n * @returns {boolean} true if the current view is a cms ui view\n */\nexport const isCmsUi = memoize((currentPathname) => {\n  const { settings } = config;\n  const fullPath = currentPathname.replace(/\\?.*$/, '');\n  // WARNING:\n  // not working properly for paths like /editors or similar\n  // because the regexp test does not take that into account\n  // https://github.com/plone/volto/issues/870\n  return settings.nonContentRoutes.reduce(\n    (acc, route) => acc || new RegExp(route).test(`/${fullPath}`),\n    false,\n  );\n});\n\n/**\n * Flatten to app server HTML - Given a text if it contains some urls that starts\n * with the API server URL this method flattens it (removes) the server part.\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenHTMLToAppURL\n * @param {string} html Some html snippet\n * @returns {string} Same HTML with Flattened URLs to the app server\n */\nexport function flattenHTMLToAppURL(html) {\n  const { settings } = config;\n  return settings.internalApiPath\n    ? html\n        .replace(new RegExp(settings.internalApiPath, 'g'), '')\n        .replace(new RegExp(settings.apiPath, 'g'), '')\n    : html.replace(new RegExp(settings.apiPath, 'g'), '');\n}\n\n/**\n * Add the app url\n * @method addAppURL\n * @param {string} url URL of the object\n * @returns {string} New URL with app\n */\nexport function addAppURL(url) {\n  const { settings } = config;\n  return url.indexOf(settings.apiPath) === 0\n    ? url\n    : `${settings.apiPath}${url}`;\n}\n\n/**\n * Check if internal url\n * @method isInternalURL\n * @param {string} url URL of the object\n * @returns {boolean} True if internal url\n */\nexport function isInternalURL(url) {\n  const { settings } = config;\n  return (\n    url.indexOf(settings.publicURL) !== -1 ||\n    url.indexOf(settings.internalApiPath) !== -1 ||\n    url.indexOf(settings.apiPath) !== -1 ||\n    url.charAt(0) === '/' ||\n    url.charAt(0) === '.' ||\n    url.startsWith('#')\n  );\n}\n\n/**\n * Check if it's a valid url\n * @method isUrl\n * @param {string} url URL of the object\n * @returns {boolean} True if is a valid url\n */\nexport function isUrl(url) {\n  return urlRegex().test(url);\n}\n\n/**\n * Normalize URL, adds protocol (if required eg. user has not entered the protocol)\n * @method normalizeUrl\n * @param {string} url URL of the object\n * @returns {boolean} URL with the protocol\n */\nexport function normalizeUrl(url) {\n  return prependHttp(url);\n}\n\n/**\n * Removes protocol from URL (for display)\n * @method removeProtocol\n * @param {string} url URL of the object\n * @returns {string} URL without the protocol part\n */\nexport function removeProtocol(url) {\n  return url.replace('https://', '').replace('http://', '');\n}\n","/* eslint-disable  arrow-body-style */\n/* eslint-disable  no-confusing-arrow */\nimport tlds from 'tlds';\n\nconst v4 =\n  '(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?:\\\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){3}';\nconst v6seg = '[0-9a-fA-F]{1,4}';\nconst v6 = `\n(\n(?:${v6seg}:){7}(?:${v6seg}|:)|                                // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                         // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6seg}:){5}(?::${v4}|(:${v6seg}){1,2}|:)|                 // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6seg}:){4}(?:(:${v6seg}){0,1}:${v4}|(:${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6seg}:){3}(?:(:${v6seg}){0,2}:${v4}|(:${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6seg}:){2}(?:(:${v6seg}){0,3}:${v4}|(:${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6seg}:){1}(?:(:${v6seg}){0,4}:${v4}|(:${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::((?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))           // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(%[0-9a-zA-Z]{1,})?                                           // %eth0            %1\n`\n  .replace(/\\s*\\/\\/.*$/gm, '')\n  .replace(/\\n/g, '')\n  .trim();\n\nconst ipRegex = (opts) =>\n  opts && opts.exact\n    ? new RegExp(`(?:^${v4}$)|(?:^${v6}$)`)\n    : new RegExp(`(?:${v4})|(?:${v6})`, 'g');\n\nipRegex.v4 = (opts) =>\n  opts && opts.exact ? new RegExp(`^${v4}$`) : new RegExp(v4, 'g');\nipRegex.v6 = (opts) =>\n  opts && opts.exact ? new RegExp(`^${v6}$`) : new RegExp(v6, 'g');\n\nexport default (_opts) => {\n  const opts = Object.assign({ strict: true }, _opts);\n  const protocol = `(?:(?:[a-z]+:)?//)${opts.strict ? '' : '?'}`;\n  const auth = '(?:\\\\S+(?::\\\\S*)?@)?';\n  const ip = ipRegex.v4().source;\n  const host = '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)';\n  const domain =\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*';\n  const tld = `(?:\\\\.${\n    opts.strict\n      ? '(?:[a-z\\\\u00a1-\\\\uffff]{2,})'\n      : `(?:${tlds.sort((a, b) => b.length - a.length).join('|')})`\n  })\\\\.?`;\n  const port = '(?::\\\\d{2,5})?';\n  const path = '(?:[/?#][^\\\\s\"]*)?';\n  const regex = `(?:${protocol}|www\\\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;\n\n  return opts.exact\n    ? new RegExp(`(?:^${regex}$)`, 'i')\n    : new RegExp(regex, 'ig');\n};\n","import { isEqual, isObject, transform } from 'lodash';\nimport React from 'react';\n\n/**\n * Deep diff between two object, using lodash\n * @param  {Object} object Object compared\n * @param  {Object} base   Object to compare with\n * @return {Object}        Return a new object who represent the diff\n */\nexport function difference(object, base) {\n  return transform(object, (result, value, key) => {\n    if (!isEqual(value, base[key])) {\n      result[key] =\n        isObject(value) && isObject(base[key])\n          ? difference(value, base[key])\n          : value;\n    }\n  });\n}\n\n/**\n * Throw an error if the wrapped function returns undefined\n *\n * @param {Function} func\n */\nexport const safeWrapper = (func) => (config) => {\n  const res = func(config);\n  if (typeof res === 'undefined') {\n    throw new Error(`Configuration function doesn't return config, ${func}`);\n  }\n  return res;\n};\n\n/**\n * A helper to pipe a configuration object through configuration loaders\n *\n * @param {Array} configMethods A list of configuration methods\n * @param {Object} config The Volto singleton config object\n */\nexport function applyConfig(configMethods, config) {\n  return configMethods.reduce((acc, apply) => safeWrapper(apply)(acc), config);\n}\n\n/**\n * A HOC factory that propagates the status of asyncConnected requests back to\n * the main server process, to allow properly expressing an error status as\n * HTTP status code\n *\n * @param {} code HTTP return code\n */\nexport function withServerErrorCode(code) {\n  return (WrappedComponent) => (props) => {\n    if (props.staticContext && Object.keys(props.staticContext).length === 0) {\n      const { staticContext } = props;\n      staticContext.error_code = code;\n      staticContext.error = props.error;\n    }\n    return <WrappedComponent {...props} />;\n  };\n}\n\n// See https://en.wikipedia.org/wiki/Web_colors#Extended_colors\nconst safeColors = [\n  'Black',\n  'Blue',\n  'BlueViolet',\n  'Brown',\n  'Crimson',\n  'DarkBlue',\n  'DarkCyan',\n  'DarkGreen',\n  'DarkMagenta',\n  'DarkOliveGreen',\n  'DarkOrchid',\n  'DarkRed',\n  'DarkSlateBlue',\n  'DarkSlateGray',\n  'DarkViolet',\n  'DeepPink',\n  'DimGray',\n  'DodgerBlue',\n  'Firebrick',\n  'ForestGreen',\n  'Fuchsia',\n  'Green',\n  'IndianRed',\n  'Indigo',\n  'Magenta',\n  'Maroon',\n  'MediumBlue',\n  'MediumSlateBlue',\n  'MediumVioletRed',\n  'MidnightBlue',\n  'Navy',\n  'Olive',\n  'OliveDrab',\n  'OrangeRed',\n  'Purple',\n  'Red',\n  'RoyalBlue',\n  'SaddleBrown',\n  'SeaGreen',\n  'Sienna',\n  'SlateBlue',\n  'SlateGray',\n  'SteelBlue',\n  'Teal',\n];\nconst namedColors = {};\n/**\n * Will generate initials from string\n * @param {string} name\n * @param {integer} count\n * @returns {string} only one letter if received only one name\n */\nexport const getInitials = (title, limit) => {\n  const text = title\n    .split(' ')\n    .map((n) => (n[0] ? n[0].toUpperCase() : ''))\n    .join('');\n  if (limit) {\n    return text.substring(0, limit);\n  }\n  return text;\n};\n\n/**\n * Will generate a random color hex\n * Will also remmember the color for each userId\n * @param {string} userId\n */\nexport const getColor = (name) => {\n  const namedColor = namedColors[name]\n    ? namedColors[name]\n    : safeColors.length > 0\n    ? safeColors.pop()\n    : `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  if (!namedColors[name]) {\n    namedColors[name] = namedColor;\n  }\n  return namedColor;\n};\n","/**\n * Get string as Boolean.\n * @function getBoolean\n * @param {Object} value The value.\n * @return {string} Field name of the layout\n */\nexport function getBoolean(value) {\n  switch (value) {\n    case true:\n    case 'true':\n    case 'True':\n    case 1:\n    case '1':\n    case 'on':\n    case 'yes':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Get vocabulary from hint.\n * @function getVocabFromHint\n * @param {Object} props The props.\n * @return {string} Field name of the layout\n */\nexport function getVocabFromHint(props) {\n  return props.widgetOptions && props.widgetOptions.vocabulary\n    ? props.widgetOptions.vocabulary['@id']\n    : false;\n}\n\n/**\n * Get vocabulary from field.\n * @function getVocabFromField\n * @param {Object} props The props.\n * @return {string} Field name of the layout\n */\nexport function getVocabFromField(props) {\n  return props.vocabulary ? props.vocabulary['@id'] : false;\n}\n\n/**\n * Get vocabulary from items.\n * @function getVocabFromItems\n * @param {Object} props The props.\n * @return {string} Field name of the layout\n */\nexport function getVocabFromItems(props) {\n  return props.items && props.items.vocabulary\n    ? props.items.vocabulary['@id']\n    : false;\n}\n\n/**\n * Get Fields vocabulary\n * @function getFieldsVocabulary\n * @returns {Object} Fields vocabulary\n */\nexport function getFieldsVocabulary() {\n  return {\n    items: [\n      {\n        title: 'Choice',\n        token: 'label_choice_field',\n      },\n      {\n        title: 'Date',\n        token: 'label_date_field',\n      },\n      {\n        title: 'Date/Time',\n        token: 'label_datetime_field',\n      },\n      {\n        title: 'Email',\n        token: 'Email',\n      },\n      {\n        title: 'File Upload',\n        token: 'File Upload',\n      },\n      {\n        title: 'Floating-point number',\n        token: 'label_float_field',\n      },\n      {\n        title: 'Image',\n        token: 'Image',\n      },\n      {\n        title: 'Integer',\n        token: 'label_integer_field',\n      },\n      {\n        title: 'JSONField',\n        token: 'JSONField',\n      },\n      {\n        title: 'Multiple Choice',\n        token: 'label_multi_choice_field',\n      },\n      {\n        title: 'Password',\n        token: 'label_password_field',\n      },\n      // {\n      //   title: 'Relation Choice',\n      //   token: 'Relation Choice',\n      // },\n      {\n        title: 'Relation List',\n        token: 'Relation List',\n      },\n      {\n        title: 'Rich Text',\n        token: 'Rich Text',\n      },\n      {\n        title: 'Text',\n        token: 'label_text_field',\n      },\n      {\n        title: 'Text line (String)',\n        token: 'label_textline_field',\n      },\n      {\n        title: 'URL',\n        token: 'URL',\n      },\n      {\n        title: 'Yes/No',\n        token: 'label_boolean_field',\n      },\n    ],\n  };\n}\n","/**\n * Point of contact for helper modules.\n * @module helpers\n * @example import { Api, Html } from 'helpers';\n */\n\n// export { injectLazyLibs } from './Loadable/Loadable';\nexport Api from '@plone/volto/helpers/Api/Api';\nexport { getAPIResourceWithAuth } from '@plone/volto/helpers/Api/APIResourceWithAuth';\nexport Html from '@plone/volto/helpers/Html/Html';\nexport {\n  getAuthToken,\n  persistAuthToken,\n} from '@plone/volto/helpers/AuthToken/AuthToken';\nexport {\n  addAppURL,\n  flattenHTMLToAppURL,\n  flattenToAppURL,\n  isInternalURL,\n  getParentUrl,\n  getBaseUrl,\n  getView,\n  isCmsUi,\n  getId,\n  isUrl,\n  normalizeUrl,\n  removeProtocol,\n} from '@plone/volto/helpers/Url/Url';\nexport { generateSitemap } from '@plone/volto/helpers/Sitemap/Sitemap';\nexport { generateRobots } from '@plone/volto/helpers/Robots/Robots';\nexport {\n  nestContent,\n  getLayoutFieldname,\n  getContentIcon,\n} from '@plone/volto/helpers/Content/Content';\nexport {\n  addBlock,\n  insertBlock,\n  blockHasValue,\n  changeBlock,\n  deleteBlock,\n  emptyBlocksForm,\n  getBlocks,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n  moveBlock,\n  mutateBlock,\n  nextBlockId,\n  previousBlockId,\n} from '@plone/volto/helpers/Blocks/Blocks';\nexport BodyClass from '@plone/volto/helpers/BodyClass/BodyClass';\nexport ScrollToTop from '@plone/volto/helpers/ScrollToTop/ScrollToTop';\nexport {\n  getBoolean,\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n  getFieldsVocabulary,\n} from '@plone/volto/helpers/Vocabularies/Vocabularies';\n\nexport Helmet from './Helmet/Helmet';\nexport FormValidation from './FormValidation/FormValidation';\nexport {\n  difference,\n  getColor,\n  getInitials,\n  safeWrapper,\n  applyConfig,\n  withServerErrorCode,\n} from '@plone/volto/helpers/Utils/Utils';\nexport { messages } from './MessageLabels/MessageLabels';\nexport { asyncConnect } from './AsyncConnect';\n","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M6.9996,3.0003 L6.9996,33.0003 L29.0006,33.0003 L29.0006,11.5863 L20.4136,3.0003 L6.9996,3.0003 Z M9.0006,5.0003 L19.0006,5.0003 L19.0006,13.0003 L27.0006,13.0003 L27.0006,31.0003 L9.0006,31.0003 L9.0006,5.0003 Z M20.9996,6.4143 L25.5856,11.0003 L20.9996,11.0003 L20.9996,6.4143 Z\\\"/><path d=\\\"M19 16L17 16 17 20 13 20 13 22 17 22 17 26 19 26 19 22 23 22 23 20 19 20z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M31 17L19 17 19 5 17 5 17 17 5 17 5 19 17 19 17 31 19 31 19 19 31 19z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M18.707 5.293L17.293 6.707 27.586 17 5 17 5 19 27.586 19 17.293 29.293 18.707 30.707 31.414 18z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M29 23L29 21 21 21 21 29 23 29 23 24.414 29.293 30.707 30.707 29.293 24.414 23zM13 11.586L6.707 5.293 5.293 6.707 11.586 13 7 13 7 15 15 15 15 7 13 7zM29 13L24.414 13 30.707 6.707 29.293 5.293 23 11.586 23 7 21 7 21 15 29 15zM7 23L11.586 23 5.293 29.293 6.707 30.707 13 24.414 13 29 15 29 15 21 7 21z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M31 17L8.414 17 18.707 6.707 17.293 5.293 4.586 18 17.293 30.707 18.707 29.293 8.414 19 31 19z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M16 5L16 7 27.586 7 13.293 21.293 14.707 22.707 29 8.414 29 20 31 20 31 5z\\\"/><path d=\\\"M23 29L7 29 7 13 18 13 18 11 5 11 5 31 25 31 25 18 23 18z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M14,28 L14,18 L21,18 C23.757,18 26,20.243 26,23 C26,25.757 23.757,28 21,28 L14,28 Z M20,8 C22,8 23.5,9.57 23.5,11.5 C23.5,13.43 22,15 20,15 L14,15 L14,8 L20,8 Z M29,23 C29,19.981 27.318,17.348 24.843,15.987 C25.907,14.819 26.5,13.24 26.5,11.5 C26.5,8.226 24.41,5.517 21,5.072 L21,5 L14,5 L11,5 L9,5 L9,8 L11,8 L11,28 L9,28 L9,31 L22,31 L22,30.931 C25.94,30.436 29,27.072 29,23 L29,23 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M20.9997,2.9997 L20.9997,7.0007 L15.0007,7.0007 L15.0007,2.9997 L8.9997,2.9997 L8.9997,7.0007 L5.0007,7.0007 L5.0007,12.9997 L5.0007,15.0007 L5.0007,30.9997 L30.9997,30.9997 L30.9997,15.0007 L30.9997,12.9997 L30.9997,7.0007 L26.9997,7.0007 L26.9997,2.9997 L20.9997,2.9997 Z M23.0007,7.9997 L23.0007,5.0007 L25.0007,5.0007 L25.0007,7.9997 L25.0007,8.9987 L23.0007,8.9987 L23.0007,7.9997 Z M10.9997,7.9997 L10.9997,5.0007 L12.9997,5.0007 L12.9997,7.9997 L12.9997,8.9987 L10.9997,8.9987 L10.9997,7.9997 Z M26.9997,10.9997 L26.9997,8.9987 L28.9997,8.9987 L28.9997,12.9997 L7.0007,12.9997 L7.0007,8.9987 L8.9997,8.9987 L8.9997,10.9997 L15.0007,10.9997 L15.0007,8.9987 L20.9997,8.9987 L20.9997,10.9997 L26.9997,10.9997 Z M7.0007,28.9997 L29.0017,28.9997 L29.0017,15.0007 L7.0007,15.0007 L7.0007,28.9997 Z\\\"/><path d=\\\"M9 19L11 19 11 17 9 17zM13 19L15 19 15 17 13 17zM17 19L19 19 19 17 17 17zM21 19L23 19 23 17 21 17zM25 19L27 19 27 17 25 17zM9 23L11 23 11 21 9 21zM13 23L15 23 15 21 13 21zM17 23L19 23 19 21 17 21zM21 23L23 23 23 21 21 21zM25 23L27 23 27 21 25 21zM9 27L11 27 11 25 9 25zM13 27L15 27 15 25 13 25zM17 27L19 27 19 25 17 25zM21 27L23 27 23 25 21 25zM25 27L27 27 27 25 25 25z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M6,11 C5.449,11 5,11.448 5,12 L5,26 C5,26.552 5.449,27 6,27 L30,27 C30.551,27 31,26.552 31,26 L31,12 C31,11.448 30.551,11 30,11 L25.382,11 L23.382,7 L12.618,7 L10.618,11 L6,11 Z M30,29 L6,29 C4.346,29 3,27.654 3,26 L3,12 C3,10.346 4.346,9 6,9 L9.382,9 L11.382,5 L24.618,5 L26.618,9 L30,9 C31.654,9 33,10.346 33,12 L33,26 C33,27.654 31.654,29 30,29 L30,29 Z\\\"/><path d=\\\"M18 13C15.243 13 13 15.243 13 18 13 20.757 15.243 23 18 23 20.757 23 23 20.757 23 18 23 15.243 20.757 13 18 13M18 25C14.14 25 11 21.859 11 18 11 14.141 14.14 11 18 11 21.86 11 25 14.141 25 18 25 21.859 21.86 25 18 25M29.5 14C29.5 14.828 28.828 15.5 28 15.5 27.172 15.5 26.5 14.828 26.5 14 26.5 13.172 27.172 12.5 28 12.5 28.828 12.5 29.5 13.172 29.5 14\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M29 8L13.561 23.439 7.121 17 5 19.12 13.561 27.681 31.12 10.12z\\\"/><path d=\\\"M29 8L13.561 23.439 7.121 17 5 19.12 13.561 27.681 31.12 10.12z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M5,31 L31,31 L31,5 L5,5 L5,31 Z M7,29.001 L29.001,29.001 L29.001,7 L7,7 L7,29.001 Z\\\"/><path d=\\\"M15 24.414L9.293 18.707 10.707 17.293 15 21.586 25.293 11.293 26.707 12.707z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M5,31 L31,31 L31,5 L5,5 L5,31 Z M7,29.001 L29.001,29.001 L29.001,7 L7,7 L7,29.001 Z\\\"/><path d=\\\"M11 19L25 19 25 17 11 17z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M5,31 L31,31 L31,5 L5,5 L5,31 Z M7,29.001 L29.001,29.001 L29.001,7 L7,7 L7,29.001 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M31,18 C31,10.832 25.168,5 18,5 C10.832,5 5,10.832 5,18 C5,25.168 10.832,31 18,31 C25.168,31 31,25.168 31,18 M3,18 C3,9.729 9.729,3 18,3 C26.271,3 33,9.729 33,18 C33,26.271 26.271,33 18,33 C9.729,33 3,26.271 3,18\\\"/><path d=\\\"M11.293 16.707L12.707 15.293 18 20.586 23.293 15.293 24.707 16.707 18 23.414z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M19 9L17 9 17 17 9 17 9 19 17 19 17 27 19 27 19 19 27 19 27 17 19 17z\\\"/><path d=\\\"M18,31 C10.832,31 5,25.168 5,18 C5,10.832 10.832,5 18,5 C25.168,5 31,10.832 31,18 C31,25.168 25.168,31 18,31 M18,3 C9.729,3 3,9.729 3,18 C3,26.271 9.729,33 18,33 C26.271,33 33,26.271 33,18 C33,9.729 26.271,3 18,3\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M24.707 19.293L23.293 20.707 18 15.414 12.707 20.707 11.293 19.293 18 12.586z\\\"/><path d=\\\"M18,5 C10.832,5 5,10.832 5,18 C5,25.168 10.832,31 18,31 C25.168,31 31,25.168 31,18 C31,10.832 25.168,5 18,5 M18,33 C9.729,33 3,26.271 3,18 C3,9.729 9.729,3 18,3 C26.271,3 33,9.729 33,18 C33,26.271 26.271,33 18,33\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M27.899 9.515L26.485 8.101 18 16.586 9.514 8.101 8.1 9.515 16.586 18 8.1 26.486 9.514 27.9 18 19.414 26.485 27.9 27.899 26.486 19.414 18z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M3,29 L33,29 L33,6.999 L3,6.999 L3,29 Z M5,27 L31,27 L31,9 L5,9 L5,27 Z\\\"/><path d=\\\"M12.293 22.707L7.586 18 12.293 13.293 13.707 14.707 10.414 18 13.707 21.293zM23.707 22.707L22.293 21.293 25.586 18 22.293 14.707 23.707 13.293 28.414 18zM16.949 24.316L15.052 23.683 19.052 11.683 20.949 12.316z\\\"/></g>\"}","module.exports = {\"attributes\":{\"width\":\"24\",\"height\":\"24\",\"viewBox\":\"0 0 24 24\",\"fill\":\"none\",\"xmlns\":\"http://www.w3.org/2000/svg\"},\"content\":\"<path d=\\\"M3 11L3 13H5L5 11H3Z\\\"/><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M21 21H11V3L21 3V21ZM13 19V5H19V19H13Z\\\" fill=\\\"currentcolor\\\"/><path d=\\\"M3 9L3 7H5V9H3zM3 19L3 21H5V19H3zM3 17L3 15H5V17H3zM3 3L3 5H5V3L3 3zM7 5V3L9 3V5H7zM7 19V21H9V19H7z\\\"/>\"}","module.exports = {\"attributes\":{\"width\":\"24\",\"height\":\"24\",\"viewBox\":\"0 0 24 24\",\"fill\":\"none\",\"xmlns\":\"http://www.w3.org/2000/svg\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M13 21H3L3 3L13 3V21ZM5 19L5 5H11V19H5Z\\\" fill=\\\"currentcolor\\\"/><path d=\\\"M19 11V13H21V11H19zM19 9V7H21V9H19zM19 19V21H21V19H19zM19 17V15H21V17H19zM19 3V5H21V3L19 3zM15 5V3L17 3V5H15zM15 19V21H17V19H15z\\\"/>\"}","module.exports = {\"attributes\":{\"width\":\"24\",\"height\":\"24\",\"viewBox\":\"0 0 24 24\",\"fill\":\"none\",\"xmlns\":\"http://www.w3.org/2000/svg\"},\"content\":\"<path d=\\\"M9 5H15V15H17V3H7V21H11V19H9V5Z\\\" fill=\\\"currentcolor\\\"/><path d=\\\"M16.0001 21.4142L14.2072 23.2071L12.793 21.7929L14.5859 20L12.793 18.2071L14.2072 16.7929L16.0001 18.5858L17.793 16.7929L19.2072 18.2071L17.4143 20L19.2072 21.7929L17.793 23.2071L16.0001 21.4142Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M29 31L31 31 31 29 29 29zM17 31L19 31 19 29 17 29zM25 31L27 31 27 29 25 29zM21 31L23 31 23 29 21 29zM13 31L15 31 15 29 13 29zM9 31L11 31 11 29 9 29zM5 31L7 31 7 29 5 29zM5 19L7 19 7 17 5 17zM5 11L7 11 7 9 5 9zM5 27L7 27 7 25 5 25zM5 15L7 15 7 13 5 13zM5 23L7 23 7 21 5 21zM5 7L7 7 7 5 5 5zM21 7L23 7 23 5 21 5zM9 7L11 7 11 5 9 5zM13 7L15 7 15 5 13 5zM17 7L19 7 19 5 17 5zM25 7L27 7 27 5 25 5zM29 7L31 7 31 5 29 5zM29 11L31 11 31 9 29 9zM29 19L31 19 31 17 29 17zM29 15L31 15 31 13 29 13zM29 27L31 27 31 25 29 25zM29 23L31 23 31 21 29 21zM18 21C16.346 21 15 19.654 15 18 15 16.346 16.346 15 18 15 19.654 15 21 16.346 21 18 21 19.654 19.654 21 18 21M22.899 19L25 19 25 17 22.899 17C22.769 16.363 22.515 15.772 22.167 15.247L23.657 13.757 22.243 12.343 20.753 13.833C20.229 13.485 19.637 13.231 19 13.101L19 11 17 11 17 13.101C16.363 13.231 15.771 13.485 15.247 13.833L13.757 12.343 12.343 13.757 13.833 15.247C13.485 15.772 13.231 16.363 13.101 17L11 17 11 19 13.101 19C13.231 19.637 13.485 20.228 13.833 20.753L12.343 22.243 13.757 23.657 15.247 22.167C15.771 22.515 16.363 22.769 17 22.899L17 25 19 25 19 22.899C19.637 22.769 20.229 22.515 20.753 22.167L22.243 23.657 23.657 22.243 22.167 20.753C22.515 20.228 22.769 19.637 22.899 19\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M7,29 L29,29 L29,7 L7,7 L7,29 Z M5,31 L31,31 L31,5 L5,5 L5,31 Z\\\"/><path d=\\\"M21 17L25 17 25 11 21 11 21 17zM19 19L27 19 27 9 19 9 19 19zM9 11L17 11 17 9 9 9zM9 15L17 15 17 13 9 13zM9 19L17 19 17 17 9 17zM9 23L27 23 27 21 9 21zM9 27L23 27 23 25 9 25z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M14.9997,3.0003 L14.9997,7.0003 L17.0007,7.0003 L17.0007,5.0003 L24.9997,5.0003 L24.9997,11.0003 L30.9997,11.0003 L30.9997,25.0003 L24.9997,25.0003 L24.9997,26.9993 L32.9997,26.9993 L32.9997,9.5853 L26.4147,3.0003 L14.9997,3.0003 Z M27.0007,6.4143 L29.5857,8.9993 L27.0007,8.9993 L27.0007,6.4143 Z\\\"/><path d=\\\"M4.9998,8.9997 L4.9998,32.9997 L22.9998,32.9997 L22.9998,15.5857 L16.4148,8.9997 L4.9998,8.9997 Z M6.9998,11.0007 L14.9998,11.0007 L14.9998,16.9997 L20.9998,16.9997 L20.9998,31.0007 L6.9998,31.0007 L6.9998,11.0007 Z M17.0008,12.4147 L19.5858,14.9997 L17.0008,14.9997 L17.0008,12.4147 Z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M26,29 C24.346,29 23,27.654 23,26 C23,24.346 24.346,23 26,23 C27.654,23 29,24.346 29,26 C29,27.654 27.654,29 26,29 M10,29 C8.346,29 7,27.654 7,26 C7,24.346 8.346,23 10,23 C11.654,23 13,24.346 13,26 C13,27.654 11.654,29 10,29 M26,21 C24.983,21 24.038,21.309 23.247,21.833 L19.414,18 L29.707,7.707 L28.293,6.293 L18,16.586 L7.707,6.293 L6.293,7.707 L16.586,18 L12.753,21.833 C11.962,21.309 11.017,21 10,21 C7.243,21 5,23.243 5,26 C5,28.757 7.243,31 10,31 C12.757,31 15,28.757 15,26 C15,24.983 14.691,24.038 14.167,23.247 L18,19.414 L21.833,23.247 C21.309,24.038 21,24.983 21,26 C21,28.757 23.243,31 26,31 C28.757,31 31,28.757 31,26 C31,23.243 28.757,21 26,21\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M27,30 C27,30.552 26.551,31 26,31 L12,31 C11.449,31 11,30.552 11,30 L11,9 L27,9 L27,30 Z M19,5 C20.103,5 21,5.897 21,7 L17,7 C17,5.897 17.897,5 19,5 L19,5 Z M31,7 L23,7 C23,4.794 21.206,3 19,3 C16.794,3 15,4.794 15,7 L7,7 L7,9 L9,9 L9,30 C9,31.654 10.346,33 12,33 L26,33 C27.654,33 29,31.654 29,30 L29,9 L31,9 L31,7 Z\\\"/><path d=\\\"M15 28L17 28 17 12 15 12zM21 28L23 28 23 12 21 12z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M0 2L30 2 30 0 0 0zM0 10L24 10 24 8 0 8z\\\" transform=\\\"translate(3 13)\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M9.293 14.707L10.707 13.293 18 20.586 25.293 13.293 26.707 14.707 18 23.414z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M13 16C11.897 16 11 16.897 11 18 11 19.103 11.897 20 13 20 14.103 20 15 19.103 15 18 15 16.897 14.103 16 13 16M13 22C10.794 22 9 20.206 9 18 9 15.794 10.794 14 13 14 15.206 14 17 15.794 17 18 17 20.206 15.206 22 13 22M23 16C21.897 16 21 16.897 21 18 21 19.103 21.897 20 23 20 24.103 20 25 19.103 25 18 25 16.897 24.103 16 23 16M23 22C20.794 22 19 20.206 19 18 19 15.794 20.794 14 23 14 25.206 14 27 15.794 27 18 27 20.206 25.206 22 23 22M13 26C11.897 26 11 26.897 11 28 11 29.103 11.897 30 13 30 14.103 30 15 29.103 15 28 15 26.897 14.103 26 13 26M13 32C10.794 32 9 30.206 9 28 9 25.794 10.794 24 13 24 15.206 24 17 25.794 17 28 17 30.206 15.206 32 13 32M23 26C21.897 26 21 26.897 21 28 21 29.103 21.897 30 23 30 24.103 30 25 29.103 25 28 25 26.897 24.103 26 23 26M23 32C20.794 32 19 30.206 19 28 19 25.794 20.794 24 23 24 25.206 24 27 25.794 27 28 27 30.206 25.206 32 23 32M13 6C11.897 6 11 6.897 11 8 11 9.103 11.897 10 13 10 14.103 10 15 9.103 15 8 15 6.897 14.103 6 13 6M13 12C10.794 12 9 10.206 9 8 9 5.794 10.794 4 13 4 15.206 4 17 5.794 17 8 17 10.206 15.206 12 13 12M23 6C21.897 6 21 6.897 21 8 21 9.103 21.897 10 23 10 24.103 10 25 9.103 25 8 25 6.897 24.103 6 23 6M23 12C20.794 12 19 10.206 19 8 19 5.794 20.794 4 23 4 25.206 4 27 5.794 27 8 27 10.206 25.206 12 23 12\\\" fill-rule=\\\"evenodd\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M29.082,8.8701 L27.946,10.0061 L26.178,8.2381 L27.314,7.1021 L29.082,8.8701 Z M15.91,21.7981 L14.111,22.3351 L13.771,21.9951 L14.368,20.2551 L15.91,21.7981 Z M23.928,10.4881 L24.764,9.6521 L26.532,11.4201 L25.696,12.2561 L23.928,10.4881 Z M24.282,13.6701 L17.447,20.5061 L15.678,18.7371 L22.514,11.9021 L24.282,13.6701 Z M10.45,25.5141 L17.316,23.4651 L30.673,10.1071 C31.355,9.4251 31.355,8.3151 30.673,7.6331 L28.552,5.5121 C27.891,4.8501 26.738,4.8491 26.077,5.5121 L12.735,18.8531 L10.45,25.5141 Z\\\"/><path d=\\\"M29 29L7 29 7 7 22 7 22 5 5 5 5 31 31 31 31 14 29 14z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M24.4258,29 L11.5738,29 L5.1578,18 L11.5738,7 L24.4258,7 L30.8428,18 L24.4258,29 Z M25.5738,5 L10.4258,5 L2.8428,18 L10.4258,31 L25.5738,31 L33.1568,18 L25.5738,5 Z\\\"/><path d=\\\"M22.243 12.343L18 16.586 13.757 12.343 12.343 13.757 16.586 18 12.343 22.243 13.757 23.657 18 19.414 22.243 23.657 23.657 22.243 19.414 18 23.657 13.757z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M6.9996,3.0003 L6.9996,33.0003 L29.0006,33.0003 L29.0006,11.5863 L20.4136,3.0003 L6.9996,3.0003 Z M9.0006,5.0003 L19.0006,5.0003 L19.0006,13.0003 L27.0006,13.0003 L27.0006,31.0003 L9.0006,31.0003 L9.0006,5.0003 Z M20.9996,6.4143 L25.5856,11.0003 L20.9996,11.0003 L20.9996,6.4143 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M3,5.0001 L3,29.0001 L33,29.0001 L33,9.0001 L17.414,9.0001 L13.414,5.0001 L3,5.0001 Z M5,7.0001 L12.586,7.0001 L16.585,11.0001 L31,11.0001 L31,15.0001 L5,15.0001 L5,7.0001 Z M5,27.0001 L31,27.0001 L31,17.0001 L5,17.0001 L5,27.0001 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M18,31 C14.775,31 11.827,29.813 9.553,27.861 L27.861,9.553 C29.813,11.827 31,14.775 31,18 C31,25.168 25.168,31 18,31 M18,5 C21.225,5 24.173,6.187 26.447,8.139 L8.139,26.447 C6.187,24.173 5,21.225 5,18 C5,10.832 10.832,5 18,5 M18,3 C9.729,3 3,9.729 3,18 C3,26.271 9.729,33 18,33 C26.271,33 33,26.271 33,18 C33,9.729 26.271,3 18,3\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M31 13L31 5 23 5 23 7 27.586 7 18 16.586 8.414 7 13 7 13 5 5 5 5 13 7 13 7 8.414 16.586 18 7 27.586 7 23 5 23 5 31 13 31 13 29 8.414 29 18 19.414 27.586 29 23 29 23 31 31 31 31 23 29 23 29 27.586 19.414 18 29 8.414 29 13z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M25.9739,17 C25.9029,14.907 25.6159,12.946 25.1479,11.19 C26.0619,10.693 26.9229,10.092 27.7269,9.404 C29.5489,11.464 30.7269,14.097 30.9489,17 L25.9739,17 Z M25.1479,24.81 C25.6159,23.054 25.9029,21.093 25.9739,19 L30.9489,19 C30.7269,21.903 29.5489,24.536 27.7269,26.595 C26.9229,25.908 26.0619,25.307 25.1479,24.81 L25.1479,24.81 Z M24.5239,26.766 C25.1429,27.127 25.7399,27.531 26.2979,27.997 C25.2539,28.865 24.0689,29.565 22.7879,30.075 C23.4559,29.15 24.0419,28.037 24.5239,26.766 L24.5239,26.766 Z M11.4769,26.766 C11.9579,28.037 12.5439,29.15 13.2129,30.075 C11.9309,29.565 10.7459,28.865 9.7019,27.997 C10.2599,27.531 10.8569,27.127 11.4769,26.766 L11.4769,26.766 Z M10.0259,19 C10.0969,21.093 10.3839,23.054 10.8519,24.81 C9.9379,25.307 9.0769,25.908 8.2729,26.595 C6.4519,24.536 5.2729,21.903 5.0509,19 L10.0259,19 Z M10.8519,11.19 C10.3839,12.946 10.0969,14.907 10.0259,17 L5.0509,17 C5.2729,14.097 6.4509,11.464 8.2729,9.404 C9.0769,10.092 9.9379,10.693 10.8519,11.19 L10.8519,11.19 Z M11.4769,9.234 C10.8569,8.873 10.2599,8.468 9.7019,8.003 C10.7459,7.135 11.9309,6.435 13.2129,5.925 C12.5439,6.85 11.9579,7.963 11.4769,9.234 L11.4769,9.234 Z M22.7869,5.925 C24.0689,6.435 25.2539,7.135 26.2989,8.003 C25.7399,8.468 25.1429,8.873 24.5239,9.234 C24.0419,7.963 23.4559,6.85 22.7869,5.925 L22.7869,5.925 Z M18.9999,10.951 L18.9999,5.21 C20.4139,5.777 21.7809,7.513 22.7289,10.106 C21.5449,10.568 20.2919,10.853 18.9999,10.951 L18.9999,10.951 Z M18.9999,17 L18.9999,12.951 C20.4919,12.853 21.9389,12.539 23.3089,12.021 C23.6739,13.499 23.9109,15.17 23.9749,17 L18.9999,17 Z M18.9999,23.049 L18.9999,19 L23.9749,19 C23.9109,20.83 23.6739,22.501 23.3089,23.979 C21.9389,23.461 20.4919,23.147 18.9999,23.049 L18.9999,23.049 Z M18.9999,25.049 C20.2919,25.147 21.5449,25.432 22.7289,25.894 C21.7809,28.487 20.4139,30.223 18.9999,30.79 L18.9999,25.049 Z M16.9999,25.049 L16.9999,30.79 C15.5869,30.223 14.2189,28.487 13.2709,25.894 C14.4549,25.432 15.7079,25.147 16.9999,25.049 L16.9999,25.049 Z M16.9999,19 L16.9999,23.049 C15.5079,23.147 14.0619,23.461 12.6909,23.979 C12.3259,22.501 12.0889,20.83 12.0249,19 L16.9999,19 Z M16.9999,12.951 L16.9999,17 L12.0249,17 C12.0889,15.17 12.3259,13.499 12.6909,12.021 C14.0619,12.539 15.5079,12.853 16.9999,12.951 L16.9999,12.951 Z M16.9999,10.951 C15.7079,10.853 14.4549,10.568 13.2709,10.106 C14.2189,7.513 15.5869,5.777 16.9999,5.21 L16.9999,10.951 Z M17.9999,3 C9.7289,3 2.9999,9.729 2.9999,18 C2.9999,26.271 9.7289,33 17.9999,33 C26.2719,33 32.9999,26.271 32.9999,18 C32.9999,9.729 26.2719,3 17.9999,3 L17.9999,3 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M27 16L25 16 23 16 21 16 19 16 17 16 15 16 13 16 11 16 9 16 7 16 7 10 29 10 29 16 27 16zM5 8L5 16 5 18 7 18 9 18 11 18 13 18 15 18 17 18 19 18 21 18 23 18 25 18 27 18 29 18 31 18 31 16 31 8 5 8zM5 24L31 24 31 22 5 22zM5 28L23 28 23 26 5 26z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M18 4.826L4.476 13.148 5.524 14.851 18 7.174 30.476 14.851 31.524 13.148zM25 27L21 27 21 19 15 19 15 27 11 27 11 15 9 15 9 29 17 29 17 21 19 21 19 29 27 29 27 15 25 15z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path fill-rule=\\\"nonzero\\\" d=\\\"M7,13 L9,11 L9,25 L7,23 L29,23 L27,25 L27,11 L29,13 L7,13 Z M29,11 L29,25 L7,25 L7,11 L29,11 Z\\\"/><path d=\\\"M7 31L29 31 29 29 7 29zM7 7L29 7 29 5 7 5z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path fill-rule=\\\"nonzero\\\" d=\\\"M3,7 L5,5 L5,25 L3,23 L33,23 L31,25 L31,5 L33,7 L3,7 Z M33,5 L33,25 L3,25 L3,5 L33,5 Z\\\"/><path d=\\\"M7 31L29 31 29 29 7 29zM25.314 10.757L28.557 14 7.444 14 10.687 10.757 9.272 9.343 3.616 15 9.272 20.657 10.687 19.243 7.444 16 28.557 16 25.314 19.243 26.728 20.657 32.385 15 26.728 9.343z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M23 7L33 7 33 5 23 5z\\\"/><path fill-rule=\\\"nonzero\\\" d=\\\"M3,7 L5,5 L5,19 L3,17 L19,17 L17,19 L17,5 L19,7 L3,7 Z M19,5 L19,19 L3,19 L3,5 L19,5 Z\\\"/><path d=\\\"M23 13L33 13 33 11 23 11zM23 19L33 19 33 17 23 17zM3 31L33 31 33 29 3 29zM3 25L33 25 33 23 3 23z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M3 7L13 7 13 5 3 5z\\\"/><path fill-rule=\\\"nonzero\\\" d=\\\"M17,7 L19,5 L19,19 L17,17 L33,17 L31,19 L31,5 L33,7 L17,7 Z M33,5 L33,19 L17,19 L17,5 L33,5 Z\\\"/><path d=\\\"M3 13L13 13 13 11 3 11zM3 19L13 19 13 17 3 17zM3 31L33 31 33 29 3 29zM3 25L33 25 33 23 3 23z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M7,29 L29,29 L29,25 L7,25 L7,29 Z M7,23 L29,23 L29,7 L7,7 L7,23 Z M5,31 L31,31 L31,5 L5,5 L5,31 Z\\\"/><path d=\\\"M15.012 13.037L18.781 19.633 21.917 16.497 25.219 20.625 26.781 19.375 22.083 13.503 19.219 16.367 14.988 8.963 9.126 19.515 10.874 20.485z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M5 7L31 7 31 5 5 5zM15 13L31 13 31 11 15 11zM15 25L31 25 31 23 15 23zM15 19L31 19 31 17 15 17zM5 31L31 31 31 29 5 29zM6.719 23.695L5.281 22.305 9.438 18 5.281 13.695 6.719 12.305 12.219 18z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M18,13.5 C18.828,13.5 19.5,12.828 19.5,12 C19.5,11.172 18.828,10.5 18,10.5 C17.172,10.5 16.5,11.172 16.5,12 C16.5,12.828 17.172,13.5 18,13.5\\\"/><path d=\\\"M18,31 C10.832,31 5,25.168 5,18 C5,10.832 10.832,5 18,5 C25.168,5 31,10.832 31,18 C31,25.168 25.168,31 18,31 M18,3 C9.729,3 3,9.729 3,18 C3,26.271 9.729,33 18,33 C26.271,33 33,26.271 33,18 C33,9.729 26.271,3 18,3\\\"/><path d=\\\"M19 15L15 15 15 17 17 17 17 25 15 25 15 27 21 27 21 25 19 25z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M25 7L25 5 19 5 19 7 20.612 7 13.279 29 11 29 11 31 17 31 17 29 15.388 29 22.721 7z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M21.293 9.293L22.707 10.707 15.414 18 22.707 25.293 21.293 26.707 12.586 18z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M27.1318,7.333 C24.4028,4.604 19.9618,4.604 17.2328,7.333 L12.9898,11.576 C11.8428,12.723 11.1288,14.248 10.9778,15.871 C10.8228,17.541 11.2708,19.211 12.2378,20.576 C12.4818,20.919 12.7278,21.213 12.9888,21.475 C13.7848,22.271 14.7778,22.868 15.8608,23.202 C16.5498,23.415 17.2548,23.519 17.9518,23.518 C19.7808,23.518 21.5598,22.804 22.8888,21.475 L23.9498,20.414 L22.5358,19 L21.4748,20.061 C20.1648,21.371 18.2388,21.842 16.4498,21.291 C15.6668,21.049 14.9778,20.635 14.4038,20.061 C14.2218,19.879 14.0478,19.668 13.8698,19.418 C13.1778,18.443 12.8588,17.249 12.9688,16.056 C13.0768,14.896 13.5868,13.808 14.4038,12.99 L18.6468,8.747 C20.5958,6.798 23.7688,6.798 25.7178,8.747 C26.6568,9.687 27.1748,10.942 27.1748,12.283 C27.1748,13.623 26.6568,14.878 25.7178,15.818 L27.1318,17.232 C28.4488,15.915 29.1748,14.157 29.1748,12.283 C29.1748,10.408 28.4488,8.65 27.1318,7.333\\\"/><path d=\\\"M25.0107,16.5254 C24.2147,15.7294 23.2217,15.1324 22.1387,14.7984 C19.6417,14.0284 16.9477,14.6894 15.1107,16.5254 L14.0507,17.5864 L15.4647,19.0004 L16.5247,17.9394 C17.8357,16.6294 19.7587,16.1554 21.5497,16.7094 C22.3337,16.9514 23.0217,17.3644 23.5957,17.9394 C23.7777,18.1214 23.9527,18.3314 24.1307,18.5824 C24.8217,19.5564 25.1417,20.7514 25.0317,21.9444 C24.9237,23.1034 24.4137,24.1924 23.5957,25.0104 L19.3537,29.2534 C17.4047,31.2024 14.2317,31.2024 12.2817,29.2534 C11.3427,28.3134 10.8247,27.0574 10.8247,25.7174 C10.8247,24.3774 11.3427,23.1214 12.2817,22.1824 L10.8677,20.7684 C9.5507,22.0854 8.8247,23.8424 8.8247,25.7174 C8.8247,27.5924 9.5507,29.3504 10.8677,30.6674 C12.2327,32.0314 14.0257,32.7134 15.8177,32.7134 C17.6107,32.7134 19.4027,32.0314 20.7677,30.6674 L25.0107,26.4244 C26.1567,25.2774 26.8717,23.7524 27.0227,22.1294 C27.1777,20.4594 26.7297,18.7894 25.7617,17.4244 C25.5177,17.0814 25.2717,16.7874 25.0107,16.5254\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M11 11L33 11 33 8.999 11 8.999zM11 19L33 19 33 17 11 17zM11 27L33 27 33 25 11 25zM6 11.5C6.828 11.5 7.5 10.828 7.5 10 7.5 9.172 6.828 8.5 6 8.5 5.172 8.5 4.5 9.172 4.5 10 4.5 10.828 5.172 11.5 6 11.5M6 19.5C6.828 19.5 7.5 18.828 7.5 18 7.5 17.172 6.828 16.5 6 16.5 5.172 16.5 4.5 17.172 4.5 18 4.5 18.828 5.172 19.5 6 19.5M6 27.5C6.828 27.5 7.5 26.828 7.5 26 7.5 25.172 6.828 24.5 6 24.5 5.172 24.5 4.5 25.172 4.5 26 4.5 26.828 5.172 27.5 6 27.5\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M11 11L33 11 33 8.999 11 8.999zM11 19L33 19 33 17 11 17zM11 27L33 27 33 25 11 25zM6.835 13L6.835 8.245 6.773 8.245 5.416 9.199 5.416 8.008 6.835 7.002 8.096 7.002 8.096 13zM8.69463281 21L4.46538477 21 4.46538477 20.0869141 6.40776758 18.0449219C6.65402532 17.7626939 6.83525723 17.5109061 6.95146875 17.2895508 7.06768027 17.0681955 7.12578516 16.875896 7.12578516 16.7126465 7.12578516 16.4802234 7.06698854 16.2948412 6.94939355 16.1564941 6.83179857 16.0181471 6.65540873 15.9489746 6.42021875 15.9489746 6.20993124 15.9489746 6.044609 16.0382071 5.92424707 16.2166748 5.80388514 16.3951425 5.74370508 16.62272 5.74370508 16.8994141L4.37407617 16.8994141 4.36577539 16.8745117C4.35194069 16.3155897 4.53455605 15.8417581 4.91362695 15.4530029 5.29269786 15.0642477 5.7948901 14.869873 6.42021875 14.869873 7.08428457 14.869873 7.60238649 15.0331201 7.97454004 15.3596191 8.34669359 15.6861182 8.53276758 16.1329724 8.53276758 16.7001953 8.53276758 17.0820332 8.43385092 17.4195949 8.23601465 17.7128906 8.03817837 18.0061864 7.67363937 18.441973 7.14238672 19.0202637L6.32475977 19.8959961 6.33721094 19.9208984 8.69463281 19.9208984 8.69463281 21zM5.74370508 25.3933105L6.40361719 25.3933105C6.65540881 25.3933105 6.84909177 25.3255215 6.98467188 25.1899414 7.12025198 25.0543613 7.18804102 24.8662121 7.18804102 24.6254883 7.18804102 24.4345694 7.12716923 24.2740892 7.00542383 24.144043 6.88367843 24.0139967 6.70659687 23.9489746 6.47417383 23.9489746 6.29155573 23.9489746 6.13107556 24.0015457 5.99272852 24.1066895 5.85438147 24.2118332 5.78520898 24.3474113 5.78520898 24.5134277L4.42388086 24.5134277 4.41558008 24.4885254C4.39897843 24.0070777 4.58851104 23.6169449 4.98418359 23.3181152 5.37985615 23.0192856 5.85991319 22.869873 6.42436914 22.869873 7.08013414 22.869873 7.60446158 23.0199773 7.99736719 23.3201904 8.3902728 23.6204035 8.58672266 24.0458143 8.58672266 24.5964355 8.58672266 24.8703627 8.5016405 25.1228423 8.33147363 25.3538818 8.16130677 25.5849214 7.93372929 25.7654616 7.64873438 25.8955078 7.97246646 26.0144863 8.22563776 26.1950265 8.40825586 26.4371338 8.59087396 26.6792411 8.68218164 26.9690738 8.68218164 27.3066406 8.68218164 27.8600288 8.47051384 28.2951237 8.04717188 28.6119385 7.62382991 28.9287532 7.08290108 29.0871582 6.42436914 29.0871582 5.85714625 29.0871582 5.36117953 28.9384374 4.9364541 28.6409912 4.51172867 28.3435451 4.30628639 27.9126005 4.32012109 27.3481445L4.32842188 27.3232422 5.69805078 27.3232422C5.69805078 27.5169281 5.77344879 27.6794834 5.92424707 27.8109131 6.07504535 27.9423428 6.25835244 28.0080566 6.47417383 28.0080566 6.72043157 28.0080566 6.91688143 27.9388842 7.0635293 27.8005371 7.21017717 27.6621901 7.2835 27.4878754 7.2835 27.2775879 7.2835 26.9842922 7.20671854 26.7705492 7.05315332 26.6363525 6.8995881 26.5021559 6.68307822 26.4350586 6.40361719 26.4350586L5.74370508 26.4350586 5.74370508 25.3933105z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M28.1631,13.7905 C27.0391,11.0755 24.9251,8.9615 22.2101,7.8375 L21.4441,9.6855 C23.6651,10.6045 25.3951,12.3345 26.3151,14.5555 C27.2351,16.7765 27.2351,19.2235 26.3151,21.4435 C24.4161,26.0285 19.1381,28.2145 14.5561,26.3145 C12.3351,25.3945 10.6041,23.6655 9.6841,21.4445 C8.7651,19.2235 8.7651,16.7765 9.6841,14.5565 C10.6051,12.3345 12.3351,10.6045 14.5561,9.6855 L13.7901,7.8375 C11.0761,8.9615 8.9621,11.0755 7.8371,13.7905 C6.7131,16.5045 6.7131,19.4955 7.8371,22.2095 C8.9611,24.9245 11.0751,27.0385 13.7901,28.1625 C15.1621,28.7305 16.5851,28.9995 17.9851,28.9995 C22.3041,28.9995 26.4101,26.4405 28.1631,22.2095 C29.2871,19.4955 29.2871,16.5045 28.1631,13.7905\\\"/><path d=\\\"M17 18L19 18 19 5 17 5z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M31,25 L29,25 L29,24.18 L22.259,22.832 L13.196,21.02 L12.261,20.833 L7,19.78 L7,21 L5,21 L5,15 L7,15 L7,16.22 L29,11.82 L29,11 L31,11 L31,25 Z M20.502,25.868 C20.374,26.384 19.841,26.719 19.315,26.601 L14.221,25.469 C13.956,25.41 13.73,25.25 13.587,25.019 C13.445,24.787 13.402,24.514 13.468,24.25 L13.739,23.167 L20.823,24.584 L20.502,25.868 Z M27,9 L27,10.18 L9,13.78 L9,13 L3,13 L3,23 L9,23 L9,22.22 L11.776,22.775 L11.528,23.765 C11.33,24.557 11.457,25.375 11.886,26.07 C12.315,26.764 12.991,27.244 13.788,27.421 L18.881,28.553 C19.096,28.601 19.315,28.625 19.534,28.625 C20.912,28.625 22.108,27.691 22.443,26.353 L22.785,24.977 L27,25.82 L27,27 L33,27 L33,9 L27,9 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M8 16C6.897 16 6 16.897 6 18 6 19.103 6.897 20 8 20 9.103 20 10 19.103 10 18 10 16.897 9.103 16 8 16M8 22C5.794 22 4 20.206 4 18 4 15.794 5.794 14 8 14 10.206 14 12 15.794 12 18 12 20.206 10.206 22 8 22M18 16C16.897 16 16 16.897 16 18 16 19.103 16.897 20 18 20 19.103 20 20 19.103 20 18 20 16.897 19.103 16 18 16M18 22C15.794 22 14 20.206 14 18 14 15.794 15.794 14 18 14 20.206 14 22 15.794 22 18 22 20.206 20.206 22 18 22M28 16C26.897 16 26 16.897 26 18 26 19.103 26.897 20 28 20 29.103 20 30 19.103 30 18 30 16.897 29.103 16 28 16M28 22C25.794 22 24 20.206 24 18 24 15.794 25.794 14 28 14 30.206 14 32 15.794 32 18 32 20.206 30.206 22 28 22\\\" fill-rule=\\\"evenodd\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M23.707 13.707L22.293 12.293 19 15.586 19 5 17 5 17 15.586 13.707 12.293 12.293 13.707 18 19.414zM9 29L27 29 27 25 9 25 9 29zM7 31L29 31 29 23 7 23 7 31z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M12.293 22.293L13.707 23.707 17 20.414 17 31 19 31 19 20.414 22.293 23.707 23.707 22.293 18 16.586zM9 11L27 11 27 7 9 7 9 11zM7 13L29 13 29 5 7 5 7 13z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M27,26 C28.103,26 29,26.897 29,28 C29,29.103 28.103,30 27,30 C25.897,30 25,29.103 25,28 C25,26.897 25.897,26 27,26 M27,6 C28.103,6 29,6.897 29,8 C29,9.103 28.103,10 27,10 C25.897,10 25,9.103 25,8 C25,6.897 25.897,6 27,6 M27,16 C28.103,16 29,16.897 29,18 C29,19.103 28.103,20 27,20 C25.897,20 25,19.103 25,18 C25,16.897 25.897,16 27,16 M8,19 L23.142,19 C23.589,20.721 25.142,22 27,22 C29.206,22 31,20.206 31,18 C31,15.794 29.206,14 27,14 C25.142,14 23.589,15.279 23.142,17 L8,17 C7.449,17 7,16.552 7,16 L7,11 L7,8.816 C7.314,8.928 7.648,9 8,9 L23.142,9 C23.589,10.721 25.142,12 27,12 C29.206,12 31,10.206 31,8 C31,5.794 29.206,4 27,4 C25.142,4 23.589,5.279 23.142,7 L8,7 C7.449,7 7,6.552 7,6 L7,5 L5,5 L5,6 L5,11 L5,16 L5,26 C5,27.654 6.346,29 8,29 L23.142,29 C23.589,30.721 25.142,32 27,32 C29.206,32 31,30.206 31,28 C31,25.794 29.206,24 27,24 C25.142,24 23.589,25.279 23.142,27 L8,27 C7.449,27 7,26.552 7,26 L7,18.816 C7.314,18.928 7.648,19 8,19\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M3.1161,5.0001 L4.1161,21.0001 L3.0001,21.0001 L4.3341,29.0001 L32.0281,29.0001 L33.3611,21.0001 L32.2671,21.0001 L33.2681,9.0001 L17.5941,9.0001 L13.5951,5.0001 L3.1161,5.0001 Z M5.2451,7.0001 L12.7671,7.0001 L16.7661,11.0001 L31.0931,11.0001 L30.2611,21.0001 L6.1201,21.0001 L5.2451,7.0001 Z M5.3611,23.0001 L31.0001,23.0001 L30.3341,27.0001 L6.0271,27.0001 L5.3611,23.0001 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill=\\\"currentColor\\\" fill-rule=\\\"evenodd\\\"><path d=\\\"M6.9996,3.0003 L6.9996,33.0003 L29.0006,33.0003 L29.0006,11.5863 L20.4136,3.0003 L6.9996,3.0003 Z M9.0006,5.0003 L19.0006,5.0003 L19.0006,13.0003 L27.0006,13.0003 L27.0006,31.0003 L9.0006,31.0003 L9.0006,5.0003 Z M20.9996,6.4143 L25.5856,11.0003 L20.9996,11.0003 L20.9996,6.4143 Z\\\"/><path d=\\\"M11 27L25 27 25 25 11 25zM11 23L25 23 25 21 11 21zM11 19L18 19 18 17 11 17z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M25 7L25 9 27.001 9 27.001 31 9.001 31 9.001 9 11.001 9 11.001 7 7 7 7 33 29.001 33 29.001 7z\\\"/><path d=\\\"M21,9 L15,9 L15,7 L17,7 L17,6 C17,5.448 17.448,5 18,5 C18.552,5 19,5.448 19,6 L19,7 L21,7 L21,9 Z M23,5 L20.829,5 C20.416,3.836 19.304,3 18,3 C16.696,3 15.584,3.836 15.171,5 L13,5 L13,11 L23,11 L23,5 Z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M21 25L23 25 23 11 21 11 21 25zM19 27L25 27 25 9 19 9 19 27zM13 25L15 25 15 11 13 11 13 25zM11 27L17 27 17 9 11 9 11 27z\\\" fill-rule=\\\"evenodd\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M11.9341,27 L9.0001,27 L9.0001,24.277 L19.9311,13.398 L22.7861,16.174 L11.9341,27 Z M26.3841,6.999 L29.2121,9.827 L24.2271,14.813 L21.3981,11.984 L26.3841,6.999 Z M28.9351,12.932 L30.6261,11.241 C31.4061,10.461 31.4061,9.193 30.6261,8.413 L27.7971,5.584 C27.0421,4.829 25.6721,4.828 24.9161,5.584 L7.0001,23.449 L7.0001,27.48 L5.2401,29.293 L6.6811,30.654 L8.3091,29 L12.7621,29 L27.5211,14.294 L29.0011,15.801 L24.4141,20.401 L25.8281,21.822 L30.4151,17.238 C30.7921,16.861 31.0001,16.361 31.0001,15.826 C31.0001,15.29 30.7921,14.789 30.4151,14.412 L28.9351,12.932 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M11,10.71 L11,25.29 L23.96,18 L11,10.71 Z M9,28.71 L9,7.29 L28.04,18 L9,28.71 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M14 11L29 11 29 9 14 9zM14 19L29 19 29 17 14 17zM14 27L29 27 29 25 14 25zM8 20.414L5.293 17.707 6.707 16.293 8 17.586 11.293 14.293 12.707 15.707zM8 12.414L5.293 9.707 6.707 8.293 8 9.586 11.293 6.293 12.707 7.707zM8 28.414L5.293 25.707 6.707 24.293 8 25.586 11.293 22.293 12.707 23.707z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M28 18L28 10 20 10 20 18 26 18C26 21.3137085 23.3137085 24 20 24L20 26C24.418278 26 28 22.418278 28 18L28 18zM26 12L26 16 22 16 22 12 26 12 26 12zM16 18L16 10 8 10 8 18 14 18C14 21.3137085 11.3137085 24 8 24L8 26C12.418278 26 16 22.418278 16 18L16 18zM14 12L14 16 10 16 10 12 14 12 14 12z\\\" fill-rule=\\\"evenodd\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M18,5 C10.832,5 5,10.832 5,18 C5,25.168 10.832,31 18,31 C25.168,31 31,25.168 31,18 C31,10.832 25.168,5 18,5 M18,33 C9.729,33 3,26.271 3,18 C3,9.729 9.729,3 18,3 C26.271,3 33,9.729 33,18 C33,26.271 26.271,33 18,33\\\"/><path d=\\\"M16 23.414L11.293 18.707 12.707 17.293 16 20.586 23.293 13.293 24.707 14.707z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M11.1667 19L14.0837 9 14.2497 9 17.1667 19 11.1667 19zM15.7497 7L12.5837 7 6.7497 27 4.9997 27 4.9997 29 9.9997 29 9.9997 27 8.8337 27 10.5837 21 17.7497 21 19.4997 27 17.9997 27 17.9997 29 22.9997 29 22.9997 27 21.5837 27 15.7497 7zM31 7L31 5C29.8 5 28.734 5.542 28 6.382 27.266 5.542 26.2 5 25 5L25 7C26.103 7 27 7.897 27 9L27 27C27 28.103 26.103 29 25 29L25 31C26.2 31 27.266 30.458 28 29.618 28.734 30.458 29.8 31 31 31L31 29C29.897 29 29 28.103 29 27L29 9C29 7.897 29.897 7 31 7\\\" fill-rule=\\\"evenodd\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M14.707 26.707L13.293 25.293 20.586 18 13.293 10.707 14.707 9.293 23.414 18z\\\"/>\"}","module.exports = {\"attributes\":{\"width\":\"24\",\"height\":\"24\",\"viewBox\":\"0 0 24 24\",\"fill\":\"none\",\"xmlns\":\"http://www.w3.org/2000/svg\"},\"content\":\"<path d=\\\"M13 3H11V5H13V3Z\\\"/><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M3 21V11H21V21H3ZM5 13H19V19H5V13Z\\\" fill=\\\"currentcolor\\\"/><path d=\\\"M15 3H17V5H15V3zM5 3H3V5H5V3zM7 3H9V5H7V3zM21 3H19V5H21V3zM19 7H21V9H19V7zM5 7H3V9H5V7z\\\"/>\"}","module.exports = {\"attributes\":{\"width\":\"24\",\"height\":\"24\",\"viewBox\":\"0 0 24 24\",\"fill\":\"none\",\"xmlns\":\"http://www.w3.org/2000/svg\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M3 13V3H21V13H3ZM5 5H19V11H5V5Z\\\" fill=\\\"currentcolor\\\"/><path d=\\\"M13 19H11V21H13V19zM15 19H17V21H15V19zM5 19H3V21H5V19zM7 19H9V21H7V19zM21 19H19V21H21V19zM19 15H21V17H19V15zM5 15H3V17H5V15z\\\"/>\"}","module.exports = {\"attributes\":{\"width\":\"24\",\"height\":\"24\",\"viewBox\":\"0 0 24 24\",\"fill\":\"none\",\"xmlns\":\"http://www.w3.org/2000/svg\"},\"content\":\"<path d=\\\"M5 9H19V11H21V7H3V17H15V15H5V9Z\\\" fill=\\\"currentcolor\\\"/><path d=\\\"M20.0001 17.4142L18.2072 19.2071L16.793 17.7929L18.5859 16L16.793 14.2071L18.2072 12.7929L20.0001 14.5858L21.793 12.7929L23.2072 14.2071L21.4143 16L23.2072 17.7929L21.793 19.2071L20.0001 17.4142Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M29,28 C29,28.552 28.552,29 28,29 L27,29 L27,19 L9,19 L9,29 L8,29 C7.448,29 7,28.552 7,28 L7,8 C7,7.448 7.448,7 8,7 L11,7 L11,15 L25,15 L25,7.414 L29,11.414 L29,28 Z M11,29 L25,29 L25,21 L11,21 L11,29 Z M17,7 L17,12 L21,12 L21,7 L23,7 L23,13 L13,13 L13,7 L17,7 Z M25.414,5 L25,5 L21,5 L17,5 L11,5 L8,5 C6.346,5 5,6.346 5,8 L5,28 C5,29.654 6.346,31 8,31 L9,31 L27,31 L28,31 C29.654,31 31,29.654 31,28 L31,10.586 L25.414,5 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M18 11C17.449 11 17 10.552 17 10 17 9.448 17.449 9 18 9 18.551 9 19 9.448 19 10 19 10.552 18.551 11 18 11M18 7C16.346 7 15 8.346 15 10 15 11.654 16.346 13 18 13 19.654 13 21 11.654 21 10 21 8.346 19.654 7 18 7M18 19C17.449 19 17 18.552 17 18 17 17.448 17.449 17 18 17 18.551 17 19 17.448 19 18 19 18.552 18.551 19 18 19M18 15C16.346 15 15 16.346 15 18 15 19.654 16.346 21 18 21 19.654 21 21 19.654 21 18 21 16.346 19.654 15 18 15\\\"/><path d=\\\"M23,22 C23,22.552 22.551,23 22,23 L14,23 C13.449,23 13,22.552 13,22 L13,6 C13,5.448 13.449,5 14,5 L22,5 C22.551,5 23,5.448 23,6 L23,22 Z M27,11 L27,9 L25,9 L25,6 C25,4.346 23.654,3 22,3 L14,3 C12.346,3 11,4.346 11,6 L11,9 L9,9 L9,11 L11,11 L11,17 L9,17 L9,19 L11,19 L11,22 C11,23.654 12.346,25 14,25 L17,25 L17,31 L13,31 L13,33 L23,33 L23,31 L19,31 L19,25 L22,25 C23.654,25 25,23.654 25,22 L25,19 L27,19 L27,17 L25,17 L25,11 L27,11 Z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M18.0474,16.5 C17.2194,16.5 16.5474,17.172 16.5474,18 C16.5474,18.828 17.2194,19.5 18.0474,19.5 C18.8754,19.5 19.5474,18.828 19.5474,18 C19.5474,17.172 18.8754,16.5 18.0474,16.5\\\"/><path d=\\\"M18.0474,23 C15.2904,23 13.0474,20.757 13.0474,18 C13.0474,15.243 15.2904,13 18.0474,13 C20.8044,13 23.0474,15.243 23.0474,18 C23.0474,20.757 20.8044,23 18.0474,23 M18.0474,11 C14.1874,11 11.0474,14.141 11.0474,18 C11.0474,21.859 14.1874,25 18.0474,25 C21.9074,25 25.0474,21.859 25.0474,18 C25.0474,14.141 21.9074,11 18.0474,11\\\"/><path d=\\\"M18.0474,27 C12.1774,27 6.8994,23.314 5.0984,18 C6.8994,12.686 12.1774,9 18.0474,9 C23.9174,9 29.1954,12.686 30.9964,18 C29.1954,23.314 23.9174,27 18.0474,27 L18.0474,27 Z M33.0024,17.703 C31.0434,11.401 24.8934,7 18.0474,7 C11.2014,7 5.0514,11.401 3.0924,17.703 L3.0004,18 L3.0924,18.297 C5.0514,24.599 11.2014,29 18.0474,29 C24.8934,29 31.0434,24.599 33.0024,18.297 L33.0944,18 L33.0024,17.703 Z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M15 13L31 13 31 11 15 11zM17 19L29 19 29 17 17 17zM19 25L27 25 27 23 19 23zM11 25.586L11 7 9 7 9 25.586 5.707 22.293 4.293 23.707 10 29.414 15.707 23.707 14.293 22.293z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M15 25L31 25 31 23 15 23zM17 19L29 19 29 17 17 17zM19 13L27 13 27 11 19 11zM15.707 12.293L10 6.586 4.293 12.293 5.707 13.707 9 10.414 9 29 11 29 11 10.414 14.293 13.707z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M17 9L11 9 11 13 13 13 13 11 17 11 17 29 15 29 15 31 17 31 19 31 21 31 21 29 19 29 19 11 23 11 23 13 25 13 25 9 19 9z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M23,17 L29,17 L29,13 L23,13 L23,17 Z M23,29 L29,29 L29,25 L23,25 L23,29 Z M15,29 L21,29 L21,25 L15,25 L15,29 Z M7,29 L13,29 L13,25 L7,25 L7,29 Z M7,17 L13,17 L13,13 L7,13 L7,17 Z M7,11 L13,11 L13,7 L7,7 L7,11 Z M15,17 L21,17 L21,13 L15,13 L15,17 Z M7,23 L13,23 L13,19 L7,19 L7,23 Z M23,23 L29,23 L29,19 L23,19 L23,23 Z M15,23 L21,23 L21,19 L15,19 L15,23 Z M15,11 L21,11 L21,7 L15,7 L15,11 Z M23,11 L29,11 L29,7 L23,7 L23,11 Z M23,5 L13,5 L5,5 L5,13 L5,17 L5,25 L5,31 L13,31 L23,31 L31,31 L31,25 L31,17 L31,13 L31,5 L23,5 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M19.0596,7 C18.7926,7 18.5416,7.104 18.3536,7.292 L6.9346,18.691 C6.7446,18.881 6.6406,19.134 6.6416,19.403 C6.6426,19.672 6.7496,19.925 6.9416,20.113 L15.6346,28.626 C16.0126,28.996 16.6616,28.995 17.0356,28.624 L28.7016,17.143 C28.8916,16.956 28.9996,16.696 28.9996,16.43 L28.9996,8 C28.9996,7.448 28.5516,7 27.9996,7 L19.0596,7 Z M16.3336,30.911 C15.5446,30.911 14.7996,30.607 14.2356,30.056 L5.5426,21.542 C4.9656,20.977 4.6456,20.22 4.6416,19.412 C4.6386,18.604 4.9506,17.846 5.5216,17.275 L16.9396,5.877 C17.5056,5.312 18.2586,5 19.0596,5 L27.9996,5 C29.6546,5 30.9996,6.346 30.9996,8 L30.9996,16.43 C30.9996,17.229 30.6736,18.008 30.1046,18.568 L18.4386,30.05 C17.8736,30.605 17.1266,30.911 16.3336,30.911 L16.3336,30.911 Z\\\"/><path d=\\\"M24,11 C23.449,11 23,11.448 23,12 C23,12.552 23.449,13 24,13 C24.551,13 25,12.552 25,12 C25,11.448 24.551,11 24,11 M24,15 C22.346,15 21,13.654 21,12 C21,10.346 22.346,9 24,9 C25.654,9 27,10.346 27,12 C27,13.654 25.654,15 24,15\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M19 5L17 5 9 5 9 9 11 9 11 7 17 7 17 29 15 29 15 31 17 31 19 31 21 31 21 29 19 29 19 7 25 7 25 9 27 9 27 5z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M21.0107,16.8418 C20.2147,16.0458 19.2217,15.4488 18.1387,15.1148 C15.6417,14.3438 12.9477,15.0058 11.1107,16.8418 L10.0507,17.9028 L11.4647,19.3168 L12.5247,18.2558 C13.8347,16.9448 15.7587,16.4718 17.5497,17.0258 C18.3337,17.2678 19.0217,17.6808 19.5957,18.2558 C19.7777,18.4378 19.9527,18.6478 20.1307,18.8988 C20.8217,19.8728 21.1417,21.0678 21.0317,22.2608 C20.9237,23.4198 20.4137,24.5088 19.5957,25.3268 L15.3537,29.5698 C13.4047,31.5188 10.2317,31.5188 8.2817,29.5698 C7.3427,28.6298 6.8247,27.3738 6.8247,26.0338 C6.8247,24.6938 7.3427,23.4378 8.2817,22.4988 L6.8677,21.0848 C5.5507,22.4018 4.8247,24.1588 4.8247,26.0338 C4.8247,27.9088 5.5507,29.6668 6.8677,30.9838 C8.2327,32.3478 10.0257,33.0298 11.8177,33.0298 C13.6107,33.0298 15.4027,32.3478 16.7677,30.9838 L21.0107,26.7408 C22.1567,25.5938 22.8717,24.0688 23.0227,22.4458 C23.1777,20.7758 22.7297,19.1058 21.7617,17.7408 C21.5177,17.3978 21.2717,17.1038 21.0107,16.8418\\\"/><path d=\\\"M10.1343 22.0127C10.4893 22.2367 10.8293 22.4137 11.1733 22.5567 12.0123 22.9047 12.9223 23.0837 13.8363 23.0837 14.0523 23.0837 14.2703 23.0737 14.4863 23.0537 16.3673 22.8777 18.1243 21.9367 19.3063 20.4717L17.7493 19.2167C16.9053 20.2627 15.6473 20.9357 14.3003 21.0617 13.4823 21.1387 12.6873 21.0197 11.9393 20.7087 11.7003 20.6107 11.4583 20.4827 11.1983 20.3197 10.1863 19.6837 9.4343 18.7027 9.0803 17.5577 8.7363 16.4457 8.7893 15.2447 9.2323 14.1767L11.5283 8.6327C12.5833 6.0857 15.5133 4.8707 18.0613 5.9267L18.8263 4.0787C15.2603 2.6027 11.1583 4.3027 9.6803 7.8667L7.3843 13.4107C6.7633 14.9087 6.6873 16.5927 7.1693 18.1487 7.6653 19.7507 8.7183 21.1227 10.1343 22.0127M25 15.316L31 15.316 31 13.316 25 13.316zM24.949 3.633L23.052 3 21.052 9 22.949 9.633zM31.581 7.13L30.419 5.502 23.419 10.502 24.581 12.13zM24.553 18.211L28.553 20.211 29.448 18.422 25.448 16.422z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M26.707 21.293L25.293 22.707 18 15.414 10.707 22.707 9.293 21.293 18 12.586z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M12.293 22.293L13.707 23.707 17 20.414 17 31 19 31 19 20.414 22.293 23.707 23.707 22.293 18 16.586z\\\"/><path d=\\\"M28.9707,15.6641 C28.9907,15.4401 28.9997,15.2191 28.9997,15.0001 C28.9997,10.5891 25.4107,7.0001 20.9997,7.0001 C17.9547,7.0001 15.2217,8.7151 13.8727,11.3711 C13.2807,11.1261 12.6477,11.0001 11.9997,11.0001 C9.3517,11.0001 7.1777,13.0691 7.0107,15.6761 C4.5837,16.8221 2.9997,19.2771 2.9997,22.0001 C2.9997,25.8591 6.1407,29.0001 9.9997,29.0001 L11.9997,29.0001 L11.9997,27.0001 L9.9997,27.0001 C7.2427,27.0001 4.9997,24.7571 4.9997,22.0001 C4.9997,19.8761 6.3517,17.9791 8.3627,17.2801 L9.0977,17.0251 L8.9997,16.0001 C8.9997,14.3461 10.3457,13.0001 11.9997,13.0001 C12.6307,13.0001 13.2427,13.2051 13.7697,13.5931 L14.8757,14.4071 L15.3107,13.1031 C16.1287,10.6491 18.4147,9.0001 20.9997,9.0001 C24.3087,9.0001 26.9997,11.6911 26.9997,15.0001 C26.9997,15.3601 26.9637,15.7361 26.8917,16.1161 L26.7287,16.9781 L27.5617,17.2531 C29.6177,17.9301 30.9997,19.8371 30.9997,22.0001 C30.9997,24.7571 28.7567,27.0001 25.9997,27.0001 L23.9997,27.0001 L23.9997,29.0001 L25.9997,29.0001 C29.8597,29.0001 32.9997,25.8591 32.9997,22.0001 C32.9997,19.2551 31.4107,16.8041 28.9707,15.6641\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M6.1489,31 L29.8659,31 C28.9469,28.423 24.7499,26.945 24.7019,26.93 C20.1909,25.863 20.0059,23.309 19.9999,23.021 L19.9999,19.343 L20.5549,19.067 C21.9049,18.396 21.9389,17.185 21.9379,17.049 L21.9349,16.378 L22.5539,16.105 C22.7179,15.989 23.0089,15.3 23.1659,14.93 L23.3109,14.592 C23.2749,14.575 23.0639,14.35 22.9479,14.268 L22.3489,13.841 L23.0479,11.696 C23.4589,10.035 23.2839,8.605 22.5499,7.666 C22.1689,7.179 21.6629,7 21.1619,7 L20.6129,7 L20.3179,6.437 C20.3129,6.429 19.4429,5.078 18.0419,5.078 C17.4239,5.082 15.5859,5.212 14.5679,5.877 C13.3689,6.661 12.1199,8.31 12.9809,11.778 L13.6699,13.873 L13.0319,14.29 C12.8809,14.396 12.7099,14.61 12.7319,14.674 C13.1429,15.896 13.4309,16.093 13.4619,16.111 L14.1019,16.377 L14.0669,17.065 C14.0659,17.188 14.0969,18.398 15.4449,19.067 L15.9999,19.343 L15.9999,23 C15.9949,23.306 15.8159,25.862 11.2159,26.954 C10.0019,27.369 6.9249,28.854 6.1489,31 L6.1489,31 Z M31.9999,33 L3.9999,33 L3.9999,32 C3.9999,27.334 10.4089,25.125 10.6829,25.033 C13.8199,24.284 14.0089,22.949 14.0099,22.936 L14.0039,20.538 C12.6399,19.628 12.2339,18.339 12.1169,17.592 C11.4859,17.034 11.1059,16.11 10.8369,15.312 C10.5399,14.429 10.8879,13.668 11.3329,13.151 L11.0599,12.317 C9.8349,7.397 12.0479,5.109 13.4739,4.178 C15.1699,3.069 17.7509,3.029 18.0389,3.028 C19.8919,3.028 21.1359,4.191 21.6859,4.841 C22.6139,4.985 23.4829,5.512 24.1249,6.334 C24.7809,7.172 25.7619,9.056 24.9699,12.248 L24.6739,13.158 C25.1509,13.711 25.5249,14.519 25.1429,15.393 L25.0079,15.708 C24.7259,16.375 24.4159,17.109 23.8899,17.587 C23.7719,18.333 23.3679,19.625 21.9999,20.538 L21.9999,22.999 L21.9999,22.998 C22.0079,22.998 22.2369,24.298 25.2299,25.009 C25.5909,25.125 31.9999,27.334 31.9999,32 L31.9999,33 Z\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path d=\\\"M3 27L23 27 23 9 3 9 3 27zM5 24.999L21 24.999 21 11 5 11 5 24.999zM24.9996 15.4644L24.9996 20.5354 32.9996 25.8684 32.9996 10.1314 24.9996 15.4644zM27.0006 19.4654L27.0006 16.5354 30.9996 13.8684 30.9996 22.1314 27.0006 19.4654z\\\" fill-rule=\\\"evenodd\\\"/>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<g fill-rule=\\\"evenodd\\\"><path d=\\\"M6.7139,29 L29.2859,29 L17.9999,9.032 L6.7139,29 Z M32.7139,31 L3.2859,31 L17.9999,4.968 L32.7139,31 Z\\\"/><path d=\\\"M19.5 26C19.5 26.828 18.828 27.5 18 27.5 17.172 27.5 16.5 26.828 16.5 26 16.5 25.172 17.172 24.5 18 24.5 18.828 24.5 19.5 25.172 19.5 26L19.5 26zM17 23L19 23 19 14 17 14z\\\"/></g>\"}","module.exports = {\"attributes\":{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":\"36\",\"height\":\"36\",\"viewBox\":\"0 0 36 36\"},\"content\":\"<path fill-rule=\\\"evenodd\\\" d=\\\"M7,16 C7,11.038 11.037,7 16,7 C20.963,7 25,11.038 25,16 C25,20.962 20.963,25 16,25 C11.037,25 7,20.962 7,16 L7,16 Z M32.707,31.293 L24.448,23.034 C26.039,21.125 27,18.673 27,16 C27,9.935 22.065,5 16,5 C9.935,5 5,9.935 5,16 C5,22.065 9.935,27 16,27 C18.673,27 21.125,26.039 23.034,24.448 L31.293,32.707 L32.707,31.293 Z\\\"/>\"}","/**\n * Api middleware.\n * @module middleware/api\n */\n\nimport cookie from 'react-cookie';\nimport jwtDecode from 'jwt-decode';\nimport config from '@plone/volto/registry';\n\nimport {\n  LOGIN,\n  RESET_APIERROR,\n  SET_APIERROR,\n} from '@plone/volto/constants/ActionTypes';\n\nlet socket = null;\n\n/**\n * Send a message on a websocket.\n * @function sendOnSocket\n * @param {Object} request Request object.\n * @returns {Promise} message is send\n */\nfunction sendOnSocket(request) {\n  return new Promise((resolve, reject) => {\n    switch (socket.readyState) {\n      case socket.CONNECTING:\n        socket.addEventListener('open', () => resolve(socket));\n        socket.addEventListener('error', reject);\n        break;\n      case socket.OPEN:\n        resolve(socket);\n        break;\n      default:\n        reject();\n        break;\n    }\n  }).then(() => {\n    socket.send(JSON.stringify(request));\n  });\n}\n\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\nexport default (api) => ({ dispatch, getState }) => (next) => (action) => {\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n\n  const { request, type, mode = 'paralel', ...rest } = action;\n  let actionPromise;\n\n  if (!request) {\n    return next(action);\n  }\n\n  next({ ...rest, type: `${type}_PENDING` });\n\n  if (socket) {\n    actionPromise = Array.isArray(request)\n      ? Promise.all(request.map((item) => sendOnSocket({ ...item, id: type })))\n      : sendOnSocket({ ...request, id: type });\n  } else {\n    actionPromise = Array.isArray(request)\n      ? mode === 'serial'\n        ? request.reduce((prevPromise, item) => {\n            return prevPromise.then((acc) => {\n              return api[item.op](item.path, {\n                data: item.data,\n                type: item.type,\n                headers: item.headers,\n              }).then((reqres) => {\n                return [...acc, reqres];\n              });\n            });\n          }, Promise.resolve([]))\n        : Promise.all(\n            request.map((item) =>\n              api[item.op](item.path, {\n                data: item.data,\n                type: item.type,\n                headers: item.headers,\n              }),\n            ),\n          )\n      : api[request.op](request.path, {\n          data: request.data,\n          type: request.type,\n          headers: request.headers,\n        });\n    actionPromise.then(\n      (result) => {\n        const { settings } = config;\n        if (getState().apierror.connectionRefused) {\n          next({\n            ...rest,\n            type: RESET_APIERROR,\n          });\n        }\n        if (type === LOGIN && settings.websockets) {\n          cookie.save('auth_token', result.token, {\n            path: '/',\n            expires: new Date(jwtDecode(result.token).exp * 1000),\n          });\n          api.get('/@wstoken').then((res) => {\n            socket = new WebSocket(\n              `${settings.apiPath.replace('http', 'ws')}/@ws?ws_token=${\n                res.token\n              }`,\n            );\n            socket.onmessage = (message) => {\n              const packet = JSON.parse(message.data);\n              if (packet.error) {\n                dispatch({\n                  type: `${packet.id}_FAIL`,\n                  error: packet.error,\n                });\n              } else {\n                dispatch({\n                  type: `${packet.id}_SUCCESS`,\n                  result: JSON.parse(packet.data),\n                });\n              }\n            };\n          });\n        }\n        return next({ ...rest, result, type: `${type}_SUCCESS` });\n      },\n      (error) => {\n        const { settings } = config;\n        // Only SRR can set ECONNREFUSED\n        if (error.code === 'ECONNREFUSED') {\n          next({\n            ...rest,\n            error,\n            statusCode: error.code,\n            connectionRefused: true,\n            type: SET_APIERROR,\n          });\n        }\n\n        // Response error is marked crossDomain if CORS error happen\n        else if (error.crossDomain) {\n          next({\n            ...rest,\n            error,\n            statusCode: 'CORSERROR',\n            connectionRefused: false,\n            type: SET_APIERROR,\n          });\n        }\n\n        // Gateway timeout\n        else if (error.response.statusCode === 504) {\n          next({\n            ...rest,\n            error,\n            statusCode: error.code,\n            connectionRefused: true,\n            type: SET_APIERROR,\n          });\n\n          // The rest\n        } else if (settings.actions_raising_api_errors.includes(action.type)) {\n          if (error.response.statusCode === 401) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.response,\n              message: error.response.body.message,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n        }\n        return next({ ...rest, error, type: `${type}_FAIL` });\n      },\n    );\n  }\n\n  return actionPromise;\n};\n","const Sentry = __CLIENT__\n  ? require('@sentry/browser')\n  : require('@sentry/node');\n\nconst crashReporter = (store) => (next) => (action) => {\n  try {\n    return next(action);\n  } catch (error) {\n    if (\n      __SENTRY__?.SENTRY_DSN ||\n      process?.env?.RAZZLE_SENTRY_DSN ||\n      window?.env?.RAZZLE_SENTRY_DSN\n    ) {\n      Sentry.withScope((scope) => {\n        scope.setExtras({\n          action,\n          state: store.getState(),\n        });\n        Sentry.captureException(error);\n      });\n    }\n    throw error;\n  }\n};\n\nexport default crashReporter;\n","/**\n * Point of contact for middleware modules.\n * @module middleware\n * @example import { api } from 'middleware';\n */\n\nexport api from '@plone/volto/middleware/api';\nexport crashReporter from '@plone/volto/middleware/crashReporter';\n","/**\n * Actions reducer.\n * @module reducers/actions/actions\n */\n\nimport { LIST_ACTIONS } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  actions: {\n    object: [],\n    object_buttons: [],\n    site_actions: [],\n    user: [],\n    document_actions: [],\n    portal_tabs: [],\n  },\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Actions reducer.\n * @function actions\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function actions(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${LIST_ACTIONS}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${LIST_ACTIONS}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        actions: action.result,\n        loaded: true,\n        loading: false,\n      };\n    case `${LIST_ACTIONS}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        actions: {},\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Addons reducer.\n * @module reducers/addons/addons\n */\n\nimport {\n  INSTALL_ADDON,\n  LIST_ADDONS,\n  UNINSTALL_ADDON,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  installedAddons: [],\n  availableAddons: [],\n  upgradableAddons: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Case-insensitive sorting method for Addons names.\n * @function addonsSorter\n * @param {String} a Add-on name.\n * @param {String} b Add-on name.\n * @returns {Number} Comparison result.\n */\nfunction addonsSorter(a, b) {\n  const titleA = a.title.toUpperCase();\n  const titleB = b.title.toUpperCase();\n  if (titleA < titleB) {\n    return -1;\n  } else if (titleA > titleB) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n * Addons reducer.\n * @function addons\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function addons(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${INSTALL_ADDON}_PENDING`:\n    case `${LIST_ADDONS}_PENDING`:\n    case `${UNINSTALL_ADDON}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${LIST_ADDONS}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        installedAddons: action.result.items\n          .filter((elem) => elem.is_installed === true)\n          .sort(addonsSorter),\n        availableAddons: action.result.items\n          .filter((elem) => elem.is_installed === false)\n          .sort(addonsSorter),\n        upgradableAddons: action.result.items\n          .filter((elem) => elem.upgrade_info.available === true)\n          .sort(addonsSorter),\n        loaded: true,\n        loading: false,\n      };\n    case `${INSTALL_ADDON}_SUCCESS`:\n    case `${UNINSTALL_ADDON}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loaded: true,\n        loading: false,\n      };\n    case `${INSTALL_ADDON}_FAIL`:\n    case `${LIST_ADDONS}_FAIL`:\n    case `${UNINSTALL_ADDON}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        installedAddons: [],\n        availableAddons: [],\n        upgradableAddons: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Breadcrumbs reducer.\n * @module reducers/apierror/apierror\n */\n\nimport {\n  RESET_APIERROR,\n  SET_APIERROR,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  statusCode: null,\n  connectionRefused: false,\n  message: null,\n};\n\n/**\n * apierror reducer.\n * @function apierror\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function apierror(state = initialState, action = {}) {\n  switch (action.type) {\n    case SET_APIERROR:\n      return {\n        ...state,\n        error: action.error,\n        statusCode: action.statusCode,\n        message: action.message,\n        connectionRefused: action.connectionRefused,\n      };\n    case RESET_APIERROR:\n      return {\n        ...state,\n        error: null,\n        statusCode: null,\n        message: null,\n        connectionRefused: false,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  loaded: false,\n  loadState: {},\n};\n\nexport default function asyncConnect(state = initialState, action = {}) {\n  const { key, data, error } = action;\n  switch (action.type) {\n    case '@redux-conn/BEGIN_GLOBAL_LOAD':\n      return {\n        ...state,\n        loaded: false,\n      };\n    case '@redux-conn/END_GLOBAL_LOAD':\n      return {\n        ...state,\n        loaded: true,\n      };\n    case '@redux-conn/LOAD':\n      return {\n        ...state,\n        loadState: {\n          ...state.loadState,\n          [key]: {\n            loading: true,\n            loaded: false,\n          },\n        },\n      };\n    case '@redux-conn/LOAD_SUCCESS':\n      return {\n        ...state,\n        loadState: {\n          ...state.loadState,\n          [key]: {\n            loading: false,\n            loaded: true,\n            error: null,\n          },\n        },\n        [key]: data,\n      };\n    case '@redux-conn/LOAD_FAIL':\n      return {\n        ...state,\n        loadState: {\n          ...state.loadState,\n          [key]: {\n            loading: false,\n            loaded: false,\n            error: error,\n          },\n        },\n      };\n    case '@redux-conn/CLEAR':\n      return {\n        ...state,\n        loadState: {\n          ...state.loadState,\n          [key]: {\n            loading: false,\n            loaded: false,\n            error: null,\n          },\n        },\n        [key]: null,\n      };\n    default:\n      break;\n  }\n  return state;\n}\n","import {\n  SET_BLOCKS_CLIPBOARD,\n  RESET_BLOCKS_CLIPBOARD,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {};\n\nexport default function blocks(state = initialState, action = {}) {\n  switch (action.type) {\n    case RESET_BLOCKS_CLIPBOARD:\n      return initialState;\n    case SET_BLOCKS_CLIPBOARD:\n      return {\n        ...Object.assign(\n          {},\n          action.cut ? { cut: action.cut } : {},\n          action.copy ? { copy: action.copy } : {},\n        ),\n      };\n    default:\n      break;\n  }\n  return state;\n}\n","/**\n * Breadcrumbs reducer.\n * @module reducers/breadcrumbs/breadcrumbs\n */\n\nimport { map } from 'lodash';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport { GET_BREADCRUMBS } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  items: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Breadcrumbs reducer.\n * @function breadcrumbs\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function breadcrumbs(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_BREADCRUMBS}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${GET_BREADCRUMBS}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        items: map(action.result.items, (item) => ({\n          title: item.title,\n          url: flattenToAppURL(item['@id']),\n        })),\n        loaded: true,\n        loading: false,\n      };\n    case `${GET_BREADCRUMBS}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        items: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = { name: null, version: null, os: null };\n\n/**\n * browserdetect reducer.\n * @function browserdetect\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function browserdetect(state = initialState, action = {}) {\n  return state;\n}\n","/**\n * Clipboard reducer.\n * @module reducers/clipboard/clipboard\n */\n\nimport {\n  COPY,\n  CUT,\n  COPY_CONTENT,\n  MOVE_CONTENT,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  action: null,\n  source: null,\n  request: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * Clipboard reducer.\n * @function clipboard\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function clipboard(state = initialState, action = {}) {\n  switch (action.type) {\n    case COPY:\n      return {\n        ...state,\n        action: 'copy',\n        source: action.source,\n      };\n    case CUT:\n      return {\n        ...state,\n        action: 'cut',\n        source: action.source,\n      };\n    case `${COPY_CONTENT}_PENDING`:\n    case `${MOVE_CONTENT}_PENDING`:\n      return {\n        ...state,\n        request: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${COPY_CONTENT}_SUCCESS`:\n    case `${MOVE_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        request: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${COPY_CONTENT}_FAIL`:\n    case `${MOVE_CONTENT}_FAIL`:\n      return {\n        ...state,\n        request: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Comments reducer.\n * @module reducers/comments/comments\n */\n\nimport {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  LIST_COMMENTS,\n  LIST_MORE_COMMENTS,\n  UPDATE_COMMENT,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  add: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  items: [],\n  items_total: null,\n  next: null,\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Comments reducer.\n * @function comments\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function comments(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${ADD_COMMENT}_PENDING`:\n    case `${DELETE_COMMENT}_PENDING`:\n    case `${UPDATE_COMMENT}_PENDING`:\n    case `${LIST_COMMENTS}_PENDING`:\n    case `${LIST_MORE_COMMENTS}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${LIST_COMMENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: action.result.items,\n        next: action.result.batching?.next,\n        items_total: action.result.items_total,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_MORE_COMMENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: [...state.items, ...action.result.items],\n        next: action.result.batching?.next,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${ADD_COMMENT}_SUCCESS`:\n    case `${DELETE_COMMENT}_SUCCESS`:\n    case `${UPDATE_COMMENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_COMMENTS}_FAIL`:\n      return {\n        ...state,\n        items: [],\n        items_total: null,\n        next: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${LIST_MORE_COMMENTS}_FAIL`:\n    case `${ADD_COMMENT}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Content reducer.\n * @module reducers/content/content\n */\n\nimport { map, mapKeys, omit } from 'lodash';\n\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport {\n  CREATE_CONTENT,\n  DELETE_CONTENT,\n  GET_CONTENT,\n  ORDER_CONTENT,\n  RESET_CONTENT,\n  UPDATE_CONTENT,\n  UPDATECOLUMNS_CONTENT,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  create: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  order: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  updatecolumns: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  data: null,\n  subrequests: {},\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function content(state = initialState, action = {}) {\n  let { result } = action;\n  switch (action.type) {\n    case `${UPDATECOLUMNS_CONTENT}`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n          idx: action.indexcolumns,\n        },\n      };\n    case `${CREATE_CONTENT}_PENDING`:\n    case `${DELETE_CONTENT}_PENDING`:\n    case `${UPDATE_CONTENT}_PENDING`:\n    case `${GET_CONTENT}_PENDING`:\n    case `${ORDER_CONTENT}_PENDING`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                ...(state.subrequests[action.subrequest] || {\n                  data: null,\n                }),\n                loaded: false,\n                loading: true,\n                error: null,\n              },\n            },\n          }\n        : {\n            ...state,\n            [getRequestKey(action.type)]: {\n              loading: true,\n              loaded: false,\n              error: null,\n            },\n          };\n    case `${CREATE_CONTENT}_SUCCESS`:\n      if (result['@static_behaviors']) {\n        map(result['@static_behaviors'], (behavior) => {\n          result = {\n            ...omit(result, behavior),\n            ...mapKeys(result[behavior], (value, key) => `${behavior}.${key}`),\n          };\n        });\n      }\n      const data = action.subrequest\n        ? Array.isArray(result)\n          ? result.map((item) => ({\n              ...item,\n              url: flattenToAppURL(item['@id']),\n            }))\n          : {\n              ...result,\n              items:\n                action.result &&\n                action.result.items &&\n                action.result.items.map((item) => ({\n                  ...item,\n                  url: flattenToAppURL(item['@id']),\n                })),\n            }\n        : {\n            ...result,\n            items:\n              action.result &&\n              action.result.items &&\n              action.result.items.map((item) => ({\n                ...item,\n                url: flattenToAppURL(item['@id']),\n              })),\n          };\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                loading: false,\n                loaded: true,\n                error: null,\n                data,\n              },\n            },\n          }\n        : {\n            ...state,\n            data,\n            [getRequestKey(action.type)]: {\n              loading: false,\n              loaded: true,\n              error: null,\n            },\n          };\n    case `${GET_CONTENT}_SUCCESS`:\n      if (result['@static_behaviors']) {\n        map(result['@static_behaviors'], (behavior) => {\n          result = {\n            ...omit(result, behavior),\n            ...mapKeys(result[behavior], (value, key) => `${behavior}.${key}`),\n          };\n        });\n      }\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                loading: false,\n                loaded: true,\n                error: null,\n                data: {\n                  ...result,\n                  items:\n                    action.result &&\n                    action.result.items &&\n                    action.result.items.map((item) => ({\n                      ...item,\n                      url: flattenToAppURL(item['@id']),\n                    })),\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            data: {\n              ...result,\n              items:\n                action.result &&\n                action.result.items &&\n                action.result.items.map((item) => ({\n                  ...item,\n                  url: flattenToAppURL(item['@id']),\n                })),\n            },\n            [getRequestKey(action.type)]: {\n              loading: false,\n              loaded: true,\n              error: null,\n            },\n          };\n    case `${DELETE_CONTENT}_SUCCESS`:\n    case `${ORDER_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n          sort: {\n            on: action.sort?.on,\n            order: action.sort?.order,\n          },\n          index: action.index,\n        },\n      };\n    case `${UPDATE_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n          sort: {\n            on: action.sort?.on,\n            order: action.sort?.order,\n          },\n        },\n      };\n    case `${CREATE_CONTENT}_FAIL`:\n    case `${DELETE_CONTENT}_FAIL`:\n    case `${UPDATE_CONTENT}_FAIL`:\n    case `${GET_CONTENT}_FAIL`:\n    case `${ORDER_CONTENT}_FAIL`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                data: null,\n                loading: false,\n                loaded: false,\n                error: action.error,\n              },\n            },\n          }\n        : {\n            ...state,\n            data: null,\n            [getRequestKey(action.type)]: {\n              loading: false,\n              loaded: false,\n              error: action.error,\n            },\n          };\n    case RESET_CONTENT:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: omit(state.subrequests, action.subrequest),\n          }\n        : {\n            ...state,\n            data: null,\n          };\n    default:\n      return state;\n  }\n}\n","import { GET_CONTEXT_NAVIGATION } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Context Navigation reducer.\n * @function navigation\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function rawdata(state = {}, action = {}) {\n  let { result, url } = action;\n\n  switch (action.type) {\n    case `${GET_CONTEXT_NAVIGATION}_PENDING`:\n      return {\n        ...state,\n        [url]: {\n          ...state[url],\n          loading: true,\n          loaded: false,\n          error: undefined,\n        },\n      };\n    case `${GET_CONTEXT_NAVIGATION}_SUCCESS`:\n      return {\n        ...state,\n        [url]: {\n          ...state[url],\n          loading: false,\n          loaded: true,\n          error: undefined,\n          data: result,\n        },\n      };\n    case `${GET_CONTEXT_NAVIGATION}_FAIL`:\n      return {\n        ...state,\n        [url]: {\n          ...state[url],\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      break;\n  }\n  return state;\n}\n","/**\n * Controlpanels reducer.\n * @module reducers/controlpanels/controlpanels\n */\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport {\n  GET_CONTROLPANEL,\n  POST_CONTROLPANEL,\n  DELETE_CONTROLPANEL,\n  LIST_CONTROLPANELS,\n  UPDATE_CONTROLPANEL,\n  SYSTEM_INFORMATION,\n  DATABASE_INFORMATION,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  post: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  controlpanel: null,\n  controlpanels: [],\n  systeminformation: null,\n  databaseinformation: null,\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Controlpanels reducer.\n * @function controlpanels\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function controlpanels(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_CONTROLPANEL}_PENDING`:\n    case `${LIST_CONTROLPANELS}_PENDING`:\n    case `${SYSTEM_INFORMATION}_PENDING`:\n    case `${DATABASE_INFORMATION}_PENDING`:\n      return {\n        ...state,\n        controlpanel: null,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${POST_CONTROLPANEL}_PENDING`:\n    case `${UPDATE_CONTROLPANEL}_PENDING`:\n    case `${DELETE_CONTROLPANEL}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_CONTROLPANEL}_SUCCESS`:\n      return {\n        ...state,\n        controlpanel: {\n          ...action.result,\n          '@id': flattenToAppURL(action.result['@id']),\n        },\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${POST_CONTROLPANEL}_SUCCESS`:\n    case `${UPDATE_CONTROLPANEL}_SUCCESS`:\n    case `${DELETE_CONTROLPANEL}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_CONTROLPANELS}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n        controlpanels: action.result,\n      };\n    case `${SYSTEM_INFORMATION}_SUCCESS`: {\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n        systeminformation: action.result,\n      };\n    }\n    case `${SYSTEM_INFORMATION}_FAIL`: {\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: action.error,\n        },\n      };\n    }\n    case `${DATABASE_INFORMATION}_SUCCESS`: {\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n        databaseinformation: action.result,\n      };\n    }\n    case `${DATABASE_INFORMATION}_FAIL`: {\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: action.error,\n        },\n      };\n    }\n    case `${GET_CONTROLPANEL}_FAIL`:\n      return {\n        ...state,\n        controlpanel: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${LIST_CONTROLPANELS}_FAIL`:\n      return {\n        ...state,\n        controlpanels: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${POST_CONTROLPANEL}_FAIL`:\n    case `${UPDATE_CONTROLPANEL}_FAIL`:\n    case `${DELETE_CONTROLPANEL}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Diff reducer.\n * @module reducers/diff/diff\n */\n\nimport { GET_DIFF } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  data: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Diff reducer.\n * @function diff\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function diff(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_DIFF}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${GET_DIFF}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        data: action.result,\n        loaded: true,\n        loading: false,\n      };\n    case `${GET_DIFF}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        data: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * emailNotification reducer.\n * @module reducers/emailNotification/emailNotification\n */\n\nimport { EMAIL_NOTIFICATION } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n};\n\n/**\n * emailNotification reducer.\n * @function emailNotification\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function emailNotification(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${EMAIL_NOTIFICATION}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${EMAIL_NOTIFICATION}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loaded: true,\n        loading: false,\n      };\n    case `${EMAIL_NOTIFICATION}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * emailSend reducer.\n * @module reducers/emailSend/emailSend\n */\n\nimport { EMAIL_SEND } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n};\n\n/**\n * emailSend reducer.\n * @function emailSend\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function emailSend(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${EMAIL_SEND}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${EMAIL_SEND}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loaded: true,\n        loading: false,\n      };\n    case `${EMAIL_SEND}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Form reducer.\n * This reducer is prepopulated on the server based on post data.\n * @module reducers/form/form\n */\n\nconst initialState = {};\n\n/**\n * Form reducer.\n * @function form\n * @param {Object} state Current state.\n * @returns {Object} New state.\n */\nexport default function form(state = initialState) {\n  return state;\n}\n","/**\n * Groups reducer.\n * @module reducers/groups/groups\n */\n\nimport {\n  CREATE_GROUP,\n  DELETE_GROUP,\n  GET_GROUP,\n  LIST_GROUPS,\n  UPDATE_GROUP,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  create: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  groups: [],\n  group: {},\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Groups reducer.\n * @function groups\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function groups(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${CREATE_GROUP}_PENDING`:\n    case `${DELETE_GROUP}_PENDING`:\n    case `${GET_GROUP}_PENDING`:\n    case `${LIST_GROUPS}_PENDING`:\n    case `${UPDATE_GROUP}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_GROUP}_SUCCESS`:\n      return {\n        ...state,\n        group: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_GROUPS}_SUCCESS`:\n      return {\n        ...state,\n        groups: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${CREATE_GROUP}_SUCCESS`:\n    case `${DELETE_GROUP}_SUCCESS`:\n    case `${UPDATE_GROUP}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${CREATE_GROUP}_FAIL`:\n    case `${DELETE_GROUP}_FAIL`:\n    case `${UPDATE_GROUP}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${GET_GROUP}_FAIL`:\n      return {\n        ...state,\n        group: {},\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${LIST_GROUPS}_FAIL`:\n      return {\n        ...state,\n        groups: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * History reducer.\n * @module reducers/history/history\n */\n\nimport {\n  GET_HISTORY,\n  REVERT_HISTORY,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  entries: [],\n  get: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  revert: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * History reducer.\n * @function history\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function history(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_HISTORY}_PENDING`:\n    case `${REVERT_HISTORY}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_HISTORY}_SUCCESS`:\n      return {\n        ...state,\n        entries: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${REVERT_HISTORY}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_HISTORY}_FAIL`:\n    case `${REVERT_HISTORY}_FAIL`:\n      return {\n        ...state,\n        entries: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Root reducer.\n * @module reducers/root\n */\n\nimport { intlReducer } from 'react-intl-redux';\n\nimport actions from '@plone/volto/reducers/actions/actions';\nimport addons from '@plone/volto/reducers/addons/addons';\nimport apierror from '@plone/volto/reducers/apierror/apierror';\nimport breadcrumbs from '@plone/volto/reducers/breadcrumbs/breadcrumbs';\nimport browserdetect from '@plone/volto/reducers/browserdetect/browserdetect';\nimport comments from '@plone/volto/reducers/comments/comments';\nimport content from '@plone/volto/reducers/content/content';\nimport controlpanels from '@plone/volto/reducers/controlpanels/controlpanels';\nimport clipboard from '@plone/volto/reducers/clipboard/clipboard';\nimport diff from '@plone/volto/reducers/diff/diff';\nimport emailNotification from '@plone/volto/reducers/emailNotification/emailNotification';\nimport emailSend from '@plone/volto/reducers/emailSend/emailSend';\nimport form from '@plone/volto/reducers/form/form';\nimport history from '@plone/volto/reducers/history/history';\nimport groups from '@plone/volto/reducers/groups/groups';\nimport messages from '@plone/volto/reducers/messages/messages';\nimport navigation from '@plone/volto/reducers/navigation/navigation';\nimport querystring from '@plone/volto/reducers/querystring/querystring';\nimport querystringsearch from '@plone/volto/reducers/querystringsearch/querystringsearch';\nimport roles from '@plone/volto/reducers/roles/roles';\nimport schema from '@plone/volto/reducers/schema/schema';\nimport search from '@plone/volto/reducers/search/search';\nimport sharing from '@plone/volto/reducers/sharing/sharing';\nimport sidebar from '@plone/volto/reducers/sidebar/sidebar';\nimport types from '@plone/volto/reducers/types/types';\nimport users from '@plone/volto/reducers/users/users';\nimport userSession from '@plone/volto/reducers/userSession/userSession';\nimport vocabularies from '@plone/volto/reducers/vocabularies/vocabularies';\nimport workflow from '@plone/volto/reducers/workflow/workflow';\nimport toolbar from '@plone/volto/reducers/toolbar/toolbar';\nimport blocksClipboard from '@plone/volto/reducers/blocksClipboard/blocksClipboard';\nimport lazyLibraries from '@plone/volto/reducers/lazyLibraries/lazyLibraries';\nimport contextNavigation from '@plone/volto/reducers/contextNavigation/contextNavigation';\nimport reduxAsyncConnect from './asyncConnect/asyncConnect';\n\n/**\n * Root reducer.\n * @function\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nconst reducers = {\n  intl: intlReducer,\n  reduxAsyncConnect,\n  actions,\n  addons,\n  apierror,\n  breadcrumbs,\n  browserdetect,\n  comments,\n  content,\n  controlpanels,\n  clipboard,\n  diff,\n  emailNotification,\n  emailSend,\n  form,\n  groups,\n  history,\n  messages,\n  navigation,\n  querystring,\n  querystringsearch,\n  roles,\n  schema,\n  search,\n  sharing,\n  sidebar,\n  types,\n  users,\n  userSession,\n  vocabularies,\n  workflow,\n  toolbar,\n  blocksClipboard,\n  lazyLibraries,\n  contextNavigation,\n};\n\nexport default reducers;\n","import { LOAD_LAZY_LIBRARY } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {};\n\nexport default function lazyLibraries(state = initialState, action = {}) {\n  switch (action.type) {\n    case LOAD_LAZY_LIBRARY:\n      const { libName, libModule } = action;\n      return {\n        ...state,\n        [libName]: libModule,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Messages reducer.\n * @module reducers/messages/messages\n */\nimport { map, concat, filter } from 'lodash';\n\nimport {\n  ADD_MESSAGE,\n  REMOVE_MESSAGE,\n  PURGE_MESSAGES,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  messages: [],\n};\n\n/**\n * Messages reducer.\n * @function messages\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function messages(state = initialState, action = {}) {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        messages: concat(\n          [\n            {\n              id: action.id,\n              title: action.title,\n              body: action.body,\n              level: action.level,\n              show: action.show,\n            },\n          ],\n          state.messages,\n        ),\n      };\n    case REMOVE_MESSAGE:\n      return {\n        messages: filter(state.messages, (message, index) =>\n          action.index === -1\n            ? index !== state.messages.length - 1\n            : index !== action.index,\n        ),\n      };\n    case PURGE_MESSAGES:\n      return {\n        messages: map(\n          filter(state.messages, (message) => message.show),\n          (message) => ({\n            ...message,\n            show: false,\n          }),\n        ),\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Navigation reducer.\n * @module reducers/navigation/navigation\n */\n\nimport { map } from 'lodash';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport { GET_NAVIGATION } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  items: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Recursive function that process the items returned by the navigation\n * endpoint\n * @function getRecursiveItems\n * @param {array} items The items inside a navigation response.\n * @returns {*} The navigation items object (recursive)\n */\nfunction getRecursiveItems(items) {\n  return map(items, (item) => ({\n    title: item.title,\n    url: flattenToAppURL(item['@id']),\n    ...(item.items && { items: getRecursiveItems(item.items) }),\n  }));\n}\n\n/**\n * Navigation reducer.\n * @function navigation\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function navigation(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_NAVIGATION}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${GET_NAVIGATION}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        items: getRecursiveItems(action.result.items),\n        loaded: true,\n        loading: false,\n      };\n    case `${GET_NAVIGATION}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        items: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Querystring reducer.\n * @module reducers/querystring/querystring\n */\n\nimport { GET_QUERYSTRING } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  indexes: {},\n  sortable_indexes: {},\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Querystring reducer.\n * @function querystring\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function querystring(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_QUERYSTRING}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${GET_QUERYSTRING}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        indexes: action.result.indexes,\n        sortable_indexes: action.result.sortable_indexes,\n        loaded: true,\n        loading: false,\n      };\n    case `${GET_QUERYSTRING}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        indexes: {},\n        sortable_indexes: {},\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { map, omit } from 'lodash';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nconst GET_QUERYSTRING_RESULTS = 'GET_QUERYSTRING_RESULTS';\nconst RESET_QUERYSTRING_RESULTS = 'RESET_QUERYSTRING_RESULTS';\n\nconst initialState = {\n  error: null,\n  items: [],\n  total: 0,\n  loaded: false,\n  loading: false,\n  batching: {},\n  subrequests: {},\n};\n\n/**\n * querystringsearch reducer.\n * @function querystring\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function querystringsearch(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_QUERYSTRING_RESULTS}_PENDING`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                ...(state.subrequests[action.subrequest] || {\n                  items: [],\n                  total: 0,\n                  batching: {},\n                }),\n                error: null,\n                loaded: false,\n                loading: true,\n              },\n            },\n          }\n        : {\n            ...state,\n            error: null,\n            loading: true,\n            loaded: false,\n          };\n    case `${GET_QUERYSTRING_RESULTS}_SUCCESS`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                error: null,\n                items: map(action.result.items, (item) => ({\n                  ...item,\n                  '@id': flattenToAppURL(item['@id']),\n                })),\n                total: action.result.items_total,\n                loaded: true,\n                loading: false,\n                batching: { ...action.result.batching },\n              },\n            },\n          }\n        : {\n            ...state,\n            error: null,\n            items: map(action.result.items, (item) => ({\n              ...item,\n              '@id': flattenToAppURL(item['@id']),\n            })),\n            total: action.result.items_total,\n            loaded: true,\n            loading: false,\n            batching: { ...action.result.batching },\n          };\n    case `${GET_QUERYSTRING_RESULTS}_FAIL`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                error: action.error,\n                items: [],\n                total: 0,\n                loading: false,\n                loaded: false,\n                batching: {},\n              },\n            },\n          }\n        : {\n            ...state,\n            error: action.error,\n            items: [],\n            total: 0,\n            loading: false,\n            loaded: false,\n            batching: {},\n          };\n    case RESET_QUERYSTRING_RESULTS:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: omit(state.subrequests, [action.subrequest]),\n          }\n        : {\n            ...state,\n            error: null,\n            items: [],\n            total: 0,\n            loading: false,\n            loaded: false,\n            batching: {},\n          };\n    default:\n      return state;\n  }\n}\n","/**\n * Roles reducer.\n * @module reducers/roles/roles\n */\n\nimport { LIST_ROLES } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  roles: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Roles reducer.\n * @function roles\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function roles(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${LIST_ROLES}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${LIST_ROLES}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        roles: action.result,\n        loaded: true,\n        loading: false,\n      };\n    case `${LIST_ROLES}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        roles: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Schema reducer.\n * @module reducers/schema/schema\n */\n\nimport { flatten, keys, pickBy, isArray, map, mapKeys, merge } from 'lodash';\n\nimport {\n  GET_SCHEMA,\n  POST_SCHEMA,\n  PUT_SCHEMA,\n  UPDATE_SCHEMA,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n  post: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  put: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function schema(state = initialState, action = {}) {\n  switch (action.type) {\n    /** PENDING */\n    case `${GET_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${POST_SCHEMA}_PENDING`:\n    case `${PUT_SCHEMA}_PENDING`:\n    case `${UPDATE_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n\n    /** SUCCESS */\n    case `${GET_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: {\n          ...action.result,\n          required: [\n            ...action.result.required,\n            ...flatten(\n              map(keys(pickBy(action.result.properties, isArray)), (fieldset) =>\n                map(\n                  action.result.definitions[fieldset].required,\n                  (required) => `${fieldset}.${required}`,\n                ),\n              ),\n            ),\n          ],\n          properties: {\n            ...action.result.properties,\n            ...merge(\n              ...map(\n                keys(pickBy(action.result.properties, isArray)),\n                (fieldset) =>\n                  mapKeys(\n                    action.result.definitions[fieldset].properties,\n                    (value, key) => `${fieldset}.${key}`,\n                  ),\n              ),\n            ),\n          },\n        },\n      };\n    case `${POST_SCHEMA}_SUCCESS`:\n    case `${PUT_SCHEMA}_SUCCESS`:\n    case `${UPDATE_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n\n    /** FAIL */\n    case `${GET_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null,\n      };\n    case `${POST_SCHEMA}_FAIL`:\n    case `${PUT_SCHEMA}_FAIL`:\n    case `${UPDATE_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Search reducer.\n * @module reducers/search/search\n */\n\nimport { map, omit } from 'lodash';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport {\n  RESET_SEARCH_CONTENT,\n  SEARCH_CONTENT,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  items: [],\n  total: 0,\n  loaded: false,\n  loading: false,\n  batching: {},\n  subrequests: {},\n};\n\n/**\n * Search reducer.\n * @function search\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function search(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${SEARCH_CONTENT}_PENDING`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                ...(state.subrequests[action.subrequest] || {\n                  items: [],\n                  total: 0,\n                  batching: {},\n                }),\n                error: null,\n                loaded: false,\n                loading: true,\n              },\n            },\n          }\n        : {\n            ...state,\n            error: null,\n            loading: true,\n            loaded: false,\n          };\n    case `${SEARCH_CONTENT}_SUCCESS`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                error: null,\n                items: map(action.result.items, (item) => ({\n                  ...item,\n                  '@id': flattenToAppURL(item['@id']),\n                })),\n                total: action.result.items_total,\n                loaded: true,\n                loading: false,\n                batching: { ...action.result.batching },\n              },\n            },\n          }\n        : {\n            ...state,\n            error: null,\n            items: map(action.result.items, (item) => ({\n              ...item,\n              '@id': flattenToAppURL(item['@id']),\n            })),\n            total: action.result.items_total,\n            loaded: true,\n            loading: false,\n            batching: { ...action.result.batching },\n          };\n    case `${SEARCH_CONTENT}_FAIL`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                error: action.error,\n                items: [],\n                total: 0,\n                loading: false,\n                loaded: false,\n                batching: {},\n              },\n            },\n          }\n        : {\n            ...state,\n            error: action.error,\n            items: [],\n            total: 0,\n            loading: false,\n            loaded: false,\n            batching: {},\n          };\n    case RESET_SEARCH_CONTENT:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: omit(state.subrequests, [action.subrequest]),\n          }\n        : {\n            ...state,\n            error: null,\n            items: [],\n            total: 0,\n            loading: false,\n            loaded: false,\n            batching: {},\n          };\n    default:\n      return state;\n  }\n}\n","/**\n * Sharing reducer.\n * @module reducers/sharing/sharing\n */\n\nimport {\n  UPDATE_SHARING,\n  GET_SHARING,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  data: {\n    available_roles: [],\n    entries: [],\n    inherit: null,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Sharing reducer.\n * @function sharing\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function sharing(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${UPDATE_SHARING}_PENDING`:\n    case `${GET_SHARING}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${UPDATE_SHARING}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_SHARING}_SUCCESS`:\n      return {\n        ...state,\n        data: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${UPDATE_SHARING}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${GET_SHARING}_FAIL`:\n      return {\n        ...state,\n        data: initialState.data,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Sidebar reducer.\n * @module reducers/sidebar/sidebar\n */\n\nimport { SET_SIDEBAR_TAB } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  tab: 0,\n};\n\n/**\n * Sidebar reducer.\n * @function sidebar\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function sidebar(state = initialState, action = {}) {\n  switch (action.type) {\n    case SET_SIDEBAR_TAB:\n      return {\n        ...state,\n        tab: action.index,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Toolbar reducer.\n * @module reducers/toolbar/toolbar\n */\n\nimport { EXPAND_TOOLBAR } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  expanded: false,\n};\n\n/**\n * Toolbar reducer.\n * @function toolbar\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function toolbar(state = initialState, action = {}) {\n  switch (action.type) {\n    case EXPAND_TOOLBAR:\n      return {\n        expanded: action.isExpanded,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Types reducer.\n * @module reducers/types/types\n */\n\nimport { GET_TYPES } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  types: [],\n};\n\n/**\n * Types reducer.\n * @function types\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function types(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_TYPES}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${GET_TYPES}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loading: false,\n        loaded: true,\n        types: action.result,\n      };\n    case `${GET_TYPES}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n        loaded: false,\n        types: [],\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * User session reducer.\n * @module reducers/userSession/userSession\n */\n\nimport { LOGIN, LOGIN_RENEW, LOGOUT } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  token: null,\n  login: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * User session reducer.\n * @function userSession\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function userSession(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${LOGIN}_PENDING`:\n      return {\n        ...state,\n        token: null,\n        login: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${LOGIN}_SUCCESS`:\n    case `${LOGIN_RENEW}_SUCCESS`:\n      return {\n        ...state,\n        token: action.result.token,\n        login: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LOGIN}_FAIL`:\n    case `${LOGIN_RENEW}_FAIL`:\n      return {\n        ...state,\n        token: null,\n        login: {\n          loading: false,\n          loaded: false,\n          error: action.error.response.error,\n        },\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        token: null,\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Users reducer.\n * @module reducers/users/users\n */\n\nimport { startsWith } from 'lodash';\n\nimport {\n  CREATE_USER,\n  DELETE_USER,\n  GET_USER,\n  LIST_USERS,\n  UPDATE_PASSWORD,\n  UPDATE_USER,\n  INITIAL_PASSWORD,\n  RESET_PASSWORD,\n  Show_All_USERS,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  user: {},\n  users: [],\n  showAllUser: false,\n  create: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  get: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  list: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  delete: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  update: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  update_password: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  password: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  initial: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  reset: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  if (startsWith(actionType, 'UPDATE_PASSWORD')) {\n    return 'update_password';\n  }\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Users reducer.\n * @function users\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function users(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${CREATE_USER}_PENDING`:\n    case `${DELETE_USER}_PENDING`:\n    case `${GET_USER}_PENDING`:\n    case `${LIST_USERS}_PENDING`:\n    case `${UPDATE_USER}_PENDING`:\n    case `${UPDATE_PASSWORD}_PENDING`:\n    case `${INITIAL_PASSWORD}_PENDING`:\n    case `${RESET_PASSWORD}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_USER}_SUCCESS`:\n      return {\n        ...state,\n        user: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_USERS}_SUCCESS`:\n      return {\n        ...state,\n        users: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${CREATE_USER}_SUCCESS`:\n    case `${DELETE_USER}_SUCCESS`:\n    case `${UPDATE_USER}_SUCCESS`:\n    case `${UPDATE_PASSWORD}_SUCCESS`:\n    case `${INITIAL_PASSWORD}_SUCCESS`:\n    case `${RESET_PASSWORD}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_USER}_FAIL`:\n      return {\n        ...state,\n        user: {},\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error.error,\n        },\n      };\n    case `${LIST_USERS}_FAIL`:\n      return {\n        ...state,\n        users: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error.error,\n        },\n      };\n    case `${CREATE_USER}_FAIL`:\n    case `${DELETE_USER}_FAIL`:\n    case `${UPDATE_USER}_FAIL`:\n    case `${UPDATE_PASSWORD}_FAIL`:\n    case `${INITIAL_PASSWORD}_FAIL`:\n    case `${RESET_PASSWORD}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error.error,\n        },\n      };\n    case Show_All_USERS: {\n      return {\n        ...state,\n        showAllUser: true,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","/**\n * Vocabularies reducer.\n * @module reducers/vocabularies/vocabularies\n */\n\nimport {\n  GET_VOCABULARY,\n  GET_VOCABULARY_TOKEN_TITLE,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {};\n\n/**\n * Vocabularies reducer.\n * @function vocabularies\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function vocabularies(state = initialState, action = {}) {\n  const vocabState = state[action.vocabulary] || {};\n  switch (action.type) {\n    case `${GET_VOCABULARY}_PENDING`:\n    case `${GET_VOCABULARY_TOKEN_TITLE}_PENDING`:\n      return {\n        ...state,\n        [action.vocabulary]: {\n          // We preserve here the previous items array to prevent the component\n          // to rerender due to prop changes while the PENDING state is active,\n          // this little trick allow us to use how react-select do things\n          // internally. This has a very low consequences since in the SUCCESS\n          // state the items are overwritten anyways.\n          ...vocabState,\n          error: null,\n          loaded: vocabState.loaded || false,\n          loading: !!((vocabState.loading || 0) + 1),\n        },\n      };\n    case `${GET_VOCABULARY}_SUCCESS`:\n      return {\n        ...state,\n        [action.vocabulary]: {\n          ...state[action.vocabulary],\n          error: null,\n          loaded: true,\n          loading: !!(vocabState.loading - 1),\n          items: [\n            ...action.result.items.map((item) => ({\n              label: item.title,\n              value: item.token,\n            })),\n          ],\n          batching: action.result.batching,\n          itemsTotal: action.result.items_total,\n        },\n      };\n    case `${GET_VOCABULARY}_FAIL`:\n    case `${GET_VOCABULARY_TOKEN_TITLE}_FAIL`:\n      return {\n        ...state,\n        [action.vocabulary]: {\n          error: action.error,\n          loaded: false,\n          loading: !!(vocabState.loading - 1),\n        },\n      };\n    case `${GET_VOCABULARY_TOKEN_TITLE}_SUCCESS`:\n      return {\n        ...state,\n        [action.vocabulary]: {\n          ...state[action.vocabulary],\n          error: null,\n          loaded: true,\n          loading: !!(vocabState.loading - 1),\n          [action.token]: action.result.items[0].title,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","/**\n * Workflow reducer.\n * @module reducers/workflow/workflow\n */\n\nimport {\n  TRANSITION_WORKFLOW,\n  GET_WORKFLOW,\n  GET_WORKFLOW_MULTIPLE,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  transition: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  history: [],\n  transitions: [],\n  multiple: [],\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function content(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_WORKFLOW}_PENDING`:\n    case `${GET_WORKFLOW_MULTIPLE}_PENDING`:\n    case `${TRANSITION_WORKFLOW}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_WORKFLOW}_SUCCESS`:\n    case `${TRANSITION_WORKFLOW}_SUCCESS`:\n      return {\n        ...state,\n        history: action.result.history ? action.result.history : state.history,\n        transitions: action.result.transitions\n          ? action.result.transitions\n          : state.transitions,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_WORKFLOW_MULTIPLE}_SUCCESS`:\n      return {\n        ...state,\n        multiple: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_WORKFLOW}_FAIL`:\n    case `${TRANSITION_WORKFLOW}_FAIL`:\n      return {\n        ...state,\n        history: [],\n        transitions: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${GET_WORKFLOW_MULTIPLE}_FAIL`:\n      return {\n        ...state,\n        multiple: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","class Config {\n  constructor() {\n    if (!Config.instance) {\n      this._data = {};\n      Config.instance = this;\n    }\n\n    return Config.instance;\n  }\n\n  set(registry, item) {\n    this._data[registry] = item;\n  }\n\n  get(registry) {\n    return this._data[registry];\n  }\n\n  get settings() {\n    return this._data.settings;\n  }\n\n  set settings(settings) {\n    this._data.settings = settings;\n  }\n\n  get blocks() {\n    return this._data.blocks;\n  }\n\n  set blocks(blocks) {\n    this._data.blocks = blocks;\n  }\n\n  get views() {\n    return this._data.views;\n  }\n\n  set views(views) {\n    this._data.views = views;\n  }\n\n  get widgets() {\n    return this._data.widgets;\n  }\n\n  set widgets(widgets) {\n    this._data.widgets = widgets;\n  }\n\n  get addonReducers() {\n    return this._data.addonReducers;\n  }\n\n  set addonReducers(addonReducers) {\n    this._data.addonReducers = addonReducers;\n  }\n\n  get addonRoutes() {\n    return this._data.addonRoutes;\n  }\n\n  set addonRoutes(addonRoutes) {\n    this._data.addonRoutes = addonRoutes;\n  }\n\n  get appExtras() {\n    return this._data.appExtras;\n  }\n\n  set appExtras(appExtras) {\n    this._data.appExtras = appExtras;\n  }\n\n  get slots() {\n    return this._data.slots;\n  }\n\n  set slots(slots) {\n    this._data.slots = slots;\n  }\n}\n\nconst instance = new Config();\nObject.freeze(instance);\n\nexport default instance;\n","/**\n * Routes.\n * @module routes\n */\nimport {\n  Add,\n  AddonsControlpanel,\n  ChangePassword,\n  ContactForm,\n  Contents,\n  ContentType,\n  ContentTypeLayout,\n  ContentTypeSchema,\n  ContentTypes,\n  Controlpanel,\n  Controlpanels,\n  CreateTranslation,\n  DatabaseInformation,\n  Delete,\n  Diff,\n  Edit,\n  History,\n  Login,\n  Logout,\n  ManageTranslations,\n  ModerateComments,\n  NotFound,\n  PasswordReset,\n  Register,\n  RequestPasswordReset,\n  Search,\n  Sharing,\n  Sitemap,\n  UsersControlpanel,\n} from '@plone/volto/components';\n\n// Deliberatelly use of absolute path of these components, since we do not want them\n// in the components/index.js file.\nimport App from '@plone/volto/components/theme/App/App';\nimport View from '@plone/volto/components/theme/View/View';\n\nimport config from '@plone/volto/registry';\n\n/**\n * Default routes array.\n * @array\n * @returns {array} Routes.\n */\nexport const defaultRoutes = [\n  {\n    path: '/',\n    component: View,\n    exact: true,\n  },\n  {\n    path: '/login',\n    component: Login,\n  },\n  {\n    path: '/logout',\n    component: Logout,\n  },\n  {\n    path: '/sitemap',\n    component: Sitemap,\n  },\n  {\n    path: '/search',\n    component: Search,\n  },\n  {\n    path: '/contact-form',\n    component: ContactForm,\n  },\n  {\n    path: '/controlpanel',\n    exact: true,\n    component: Controlpanels,\n  },\n  {\n    path: '/controlpanel/dexterity-types/:id/layout',\n    component: ContentTypeLayout,\n  },\n  {\n    path: '/controlpanel/dexterity-types/:id/schema',\n    component: ContentTypeSchema,\n  },\n  {\n    path: '/controlpanel/dexterity-types/:id',\n    component: ContentType,\n  },\n  {\n    path: '/controlpanel/dexterity-types',\n    component: ContentTypes,\n  },\n  {\n    path: '/controlpanel/addons',\n    component: AddonsControlpanel,\n  },\n  {\n    path: '/controlpanel/database',\n    component: DatabaseInformation,\n  },\n  {\n    path: '/controlpanel/moderate-comments',\n    component: ModerateComments,\n  },\n  {\n    path: '/controlpanel/users',\n    component: UsersControlpanel,\n  },\n  {\n    path: '/controlpanel/:id',\n    component: Controlpanel,\n  },\n  {\n    path: '/change-password',\n    component: ChangePassword,\n  },\n  {\n    path: '/add',\n    component: Add,\n  },\n  {\n    path: '/edit',\n    component: Edit,\n  },\n  {\n    path: '/contents',\n    component: Contents,\n  },\n  {\n    path: '/sharing',\n    component: Sharing,\n  },\n  {\n    path: '/**/add',\n    component: Add,\n  },\n  {\n    path: '/**/create-translation',\n    component: CreateTranslation,\n  },\n  {\n    path: '/**/contents',\n    component: Contents,\n  },\n  {\n    path: '/**/sharing',\n    component: Sharing,\n  },\n  {\n    path: '/**/delete',\n    component: Delete,\n  },\n  {\n    path: '/**/diff',\n    component: Diff,\n  },\n  {\n    path: '/**/edit',\n    component: Edit,\n  },\n  {\n    path: '/**/history',\n    component: History,\n  },\n  {\n    path: '/**/sharing',\n    component: Sharing,\n  },\n  {\n    path: '/**/manage-translations',\n    component: ManageTranslations,\n  },\n  {\n    path: '/**/login',\n    component: Login,\n  },\n  {\n    path: '/register',\n    component: Register,\n  },\n  {\n    path: '/password-reset',\n    component: RequestPasswordReset,\n    exact: true,\n  },\n  {\n    path: '/password-reset/:token',\n    component: PasswordReset,\n    exact: true,\n  },\n  {\n    path: '/**',\n    component: View,\n  },\n  {\n    path: '*',\n    component: NotFound,\n  },\n];\n\n/**\n * Routes array.\n * @array\n * @returns {array} Routes.\n */\nconst routes = [\n  {\n    path: '/',\n    component: App,\n    routes: [\n      // addon routes have a higher priority then default routes\n      ...(config.addonRoutes || []),\n      ...defaultRoutes,\n    ],\n  },\n];\n\nexport default routes;\n","let env_obj = {};\nif (typeof window === 'undefined') {\n  if (process.env) {\n    const envs = Object.keys(process.env);\n    const filtered = envs.filter((env) => env.startsWith('RAZZLE_'));\n    env_obj = filtered.reduce(\n      (o, key) => Object.assign(o, { [key]: process.env[key] }),\n      {},\n    );\n  }\n} else {\n  if (window.env) {\n    const envs = Object.keys(window.env);\n    env_obj = envs.reduce(\n      (o, key) => Object.assign(o, { [key]: window.env[key] }),\n      {},\n    );\n  }\n}\nexport const runtimeConfig = env_obj;\n","import config from '@plone/volto/registry';\nconst reserved_option_names = ['tags', 'extras'];\n\nconst initSentry = (Sentry) => {\n  const { settings } = config;\n  let sentry_config = __SENTRY__;\n\n  if (__SENTRY__) {\n    if (!sentry_config) {\n      sentry_config = {};\n    }\n    sentry_config.SENTRY_DSN = __SENTRY__.SENTRY_DSN;\n    sentry_config.SENTRY_CONFIG = __SENTRY__.SENTRY_CONFIG;\n  }\n\n  if (__SERVER__) {\n    if (process.env.RAZZLE_SENTRY_DSN) {\n      if (!sentry_config) {\n        sentry_config = {};\n      }\n      sentry_config.SENTRY_DSN = process.env.RAZZLE_SENTRY_DSN;\n    }\n    if (sentry_config) {\n      if (process.env.RAZZLE_SENTRY_BACKEND_CONFIG) {\n        sentry_config.SENTRY_CONFIG = JSON.parse(\n          process.env.RAZZLE_SENTRY_BACKEND_CONFIG,\n        );\n      }\n      if (process.env.RAZZLE_SENTRY_RELEASE) {\n        if (!sentry_config.SENTRY_CONFIG) {\n          sentry_config.SENTRY_CONFIG = {};\n        }\n        sentry_config.SENTRY_CONFIG.release = process.env.RAZZLE_SENTRY_RELEASE;\n      }\n    }\n  }\n\n  if (__CLIENT__) {\n    if (window?.env?.RAZZLE_SENTRY_DSN) {\n      if (!sentry_config) {\n        sentry_config = {};\n      }\n      sentry_config.SENTRY_DSN = window.env.RAZZLE_SENTRY_DSN;\n    }\n    if (sentry_config) {\n      if (window?.env?.RAZZLE_SENTRY_FRONTEND_CONFIG) {\n        sentry_config.SENTRY_CONFIG = JSON.parse(\n          window.env.RAZZLE_SENTRY_FRONTEND_CONFIG,\n        );\n      }\n      if (window?.env?.RAZZLE_SENTRY_RELEASE) {\n        if (!sentry_config.SENTRY_CONFIG) {\n          sentry_config.SENTRY_CONFIG = {};\n        }\n        sentry_config.SENTRY_CONFIG.release = window.env.RAZZLE_SENTRY_RELEASE;\n      }\n    }\n  }\n\n  if (sentry_config || settings?.sentryOptions?.dsn) {\n    let sentry_options = {\n      ...settings.sentryOptions,\n    };\n    if (sentry_config?.SENTRY_DSN) {\n      sentry_options.dsn = sentry_config.SENTRY_DSN;\n    }\n    if (sentry_config?.SENTRY_CONFIG !== undefined) {\n      const options = Object.keys(sentry_config.SENTRY_CONFIG);\n      options.forEach((field) => {\n        if (!reserved_option_names.includes(field)) {\n          sentry_options[field] = sentry_config.SENTRY_CONFIG[field];\n        }\n      });\n    }\n    Sentry.init(sentry_options);\n    if (sentry_options?.tags) {\n      Sentry.setTags(sentry_options.tags);\n    }\n    if (sentry_options?.extras) {\n      Sentry.setExtras(sentry_options.extras);\n    }\n\n    if (sentry_config?.SENTRY_CONFIG !== undefined) {\n      if (sentry_config?.SENTRY_CONFIG?.tags !== undefined) {\n        Sentry.setTags(sentry_config.SENTRY_CONFIG.tags);\n      }\n      if (sentry_config?.SENTRY_CONFIG?.extras !== undefined) {\n        Sentry.setExtras(sentry_config.SENTRY_CONFIG.extras);\n      }\n    }\n  }\n};\n\nexport default initSentry;\n","/* eslint no-console: 0 */\nimport '~/config'; // This is the bootstrap for the global config - server side\nimport { existsSync, lstatSync, readFileSync } from 'fs';\nimport React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-intl-redux';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport { createMemoryHistory } from 'history';\nimport { parse as parseUrl } from 'url';\nimport { keys } from 'lodash';\nimport cookie, { plugToRequest } from 'react-cookie';\nimport locale from 'locale';\nimport { detect } from 'detect-browser';\nimport path from 'path';\nimport { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';\nimport { createProxyMiddleware } from 'http-proxy-middleware';\nimport { updateIntl } from 'react-intl-redux';\nimport { resetServerContext } from 'react-beautiful-dnd';\n\nimport routes from '~/routes';\nimport config from '@plone/volto/registry';\n\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport { Html, Api, persistAuthToken } from '@plone/volto/helpers';\n\nimport userSession from '@plone/volto/reducers/userSession/userSession';\n\nimport ErrorPage from '@plone/volto/error';\n\nimport languages from '@plone/volto/constants/Languages';\n\nimport configureStore from '@plone/volto/store';\nimport { ReduxAsyncConnect, loadOnServer } from './helpers/AsyncConnect';\n\nlet locales = {};\n\nif (config.settings) {\n  config.settings.supportedLanguages.forEach((lang) => {\n    import('~/../locales/' + lang + '.json').then((locale) => {\n      locales = { ...locales, [lang]: locale.default };\n    });\n  });\n}\n\nconst supported = new locale.Locales(keys(languages), 'en');\n\nconst server = express()\n  .disable('x-powered-by')\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .head('/*', function (req, res) {\n    // Support for HEAD requests. Required by start-test utility in CI.\n    res.send('');\n  });\n\n// Internal proxy to bypass CORS while developing.\nif (__DEVELOPMENT__ && config.settings.devProxyToApiPath) {\n  const apiPathURL = parseUrl(config.settings.apiPath);\n  const proxyURL = parseUrl(config.settings.devProxyToApiPath);\n  const serverURL = `${proxyURL.protocol}//${proxyURL.host}`;\n  const instancePath = proxyURL.pathname;\n  server.use(\n    '/api',\n    createProxyMiddleware({\n      target: serverURL,\n      pathRewrite: {\n        '^/api':\n          config.settings.proxyRewriteTarget ||\n          `/VirtualHostBase/http/${apiPathURL.hostname}:${apiPathURL.port}${instancePath}/VirtualHostRoot/_vh_api`,\n      },\n      logLevel: 'silent', // change to 'debug' to see all requests\n      ...(config.settings?.proxyRewriteTarget?.startsWith('https') && {\n        changeOrigin: true,\n        secure: false,\n      }),\n    }),\n  );\n}\n\nserver.all('*', setupServer);\n\nfunction setupServer(req, res, next) {\n  plugToRequest(req, res);\n\n  const api = new Api(req);\n\n  const browserdetect = detect(req.headers['user-agent']);\n\n  const lang = new locale.Locales(\n    cookie.load('I18N_LANGUAGE') ||\n      config.settings.defaultLanguage ||\n      req.headers['accept-language'],\n  )\n    .best(supported)\n    .toString();\n\n  const authToken = cookie.load('auth_token');\n  const initialState = {\n    userSession: { ...userSession(), token: authToken },\n    form: req.body,\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang],\n    },\n    browserdetect,\n  };\n\n  const history = createMemoryHistory({\n    initialEntries: [req.url],\n  });\n\n  // Create a new Redux store instance\n  const store = configureStore(initialState, history, api);\n\n  persistAuthToken(store);\n\n  function errorHandler(error) {\n    const errorPage = (\n      <Provider store={store}>\n        <StaticRouter context={{}} location={req.url}>\n          <ErrorPage message={error.message} />\n        </StaticRouter>\n      </Provider>\n    );\n\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform',\n    });\n\n    // Displays error in console\n    console.error(error);\n\n    res\n      .status(error.status)\n      .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n\n  req.app.locals = {\n    ...req.app.locals,\n    store,\n    api,\n    errorHandler,\n  };\n\n  next();\n}\n\nconst expressMiddleware = (config.settings.expressMiddleware || []).filter(\n  (m) => typeof m !== 'undefined',\n);\nif (expressMiddleware.length) server.use('/', expressMiddleware);\n\nserver.get('/*', (req, res) => {\n  const { store, api, errorHandler } = req.app.locals;\n\n  // @loadable/server extractor\n  const extractor = new ChunkExtractor({\n    statsFile: path.resolve('build/loadable-stats.json'),\n    entrypoints: ['client'],\n  });\n\n  const url = req.originalUrl || req.url;\n  const location = parseUrl(url);\n\n  loadOnServer({ store, location, routes, api })\n    .then(() => {\n      // The content info is in the store at this point thanks to the asynconnect\n      // features, then we can force the current language info into the store when\n      // coming from an SSR request\n      const updatedLang =\n        store.getState().content.data?.language?.token ||\n        config.settings.defaultLanguage;\n      store.dispatch(\n        updateIntl({\n          locale: updatedLang,\n          messages: locales[updatedLang],\n        }),\n      );\n\n      const context = {};\n      resetServerContext();\n      const markup = renderToString(\n        <ChunkExtractorManager extractor={extractor}>\n          <Provider store={store}>\n            <StaticRouter context={context} location={req.url}>\n              <ReduxAsyncConnect routes={routes} helpers={api} />\n            </StaticRouter>\n          </Provider>\n        </ChunkExtractorManager>,\n      );\n\n      const readCriticalCss =\n        config.settings.serverConfig.readCriticalCss || defaultReadCriticalCss;\n\n      if (context.url) {\n        res.redirect(flattenToAppURL(context.url));\n      } else if (context.error_code) {\n        res.set({\n          'Cache-Control': 'no-cache',\n        });\n\n        res.status(context.error_code).send(\n          `<!doctype html>\n              ${renderToString(\n                <Html\n                  extractor={extractor}\n                  markup={markup}\n                  store={store}\n                  extractScripts={process.env.NODE_ENV !== 'production'}\n                  criticalCss={readCriticalCss(req)}\n                />,\n              )}\n            `,\n        );\n      } else {\n        res.status(200).send(\n          `<!doctype html>\n              ${renderToString(\n                <Html\n                  extractor={extractor}\n                  markup={markup}\n                  store={store}\n                  criticalCss={readCriticalCss(req)}\n                />,\n              )}\n            `,\n        );\n      }\n    }, errorHandler)\n    .catch(errorHandler);\n});\n\nexport const defaultReadCriticalCss = () => {\n  const { criticalCssPath } = config.settings.serverConfig;\n\n  const e = existsSync(criticalCssPath);\n  if (!e) return;\n\n  const f = lstatSync(criticalCssPath);\n  if (!f.isFile()) return;\n\n  return readFileSync(criticalCssPath, { encoding: 'utf-8' });\n};\n\nserver.apiPath = config.settings.apiPath;\nserver.devProxyToApiPath = config.settings.devProxyToApiPath;\n\nexport default server;\n","/* eslint no-console: 0 */\nimport http from 'http';\n\nimport app from './server';\n\nimport * as Sentry from '@sentry/node';\nimport initSentry from '@plone/volto/sentry';\n\ninitSentry(Sentry);\n\nexport default () => {\n  const server = http.createServer(app);\n  const host = process.env.HOST || 'localhost';\n  const port = process.env.PORT || 3000;\n  const bind_address = process.env.RAZZLE_BIND_ADDRESS || '0.0.0.0';\n\n  let currentApp = app;\n\n  server\n    .listen(port, bind_address, () => {\n      console.log(`API server (API_PATH) is set to: ${app.apiPath}`);\n      if (__DEVELOPMENT__ && app.devProxyToApiPath)\n        console.log(\n          `Using internal proxy: http://${host}:${port}/api -> ${app.devProxyToApiPath}`,\n        );\n      console.log(`🎭 Volto started at http://${host}:${port} 🚀`);\n    })\n    .on('error', (e) => {\n      console.error(e.message);\n      throw e;\n    });\n\n  return () => {\n    console.log('✅  Server-side HMR Enabled!');\n\n    module.hot.accept('./server', () => {\n      console.log('🔁  HMR Reloading `./server`...');\n      server.removeListener('request', currentApp);\n      const newApp = require('./server').default; // eslint-disable-line global-require\n      server.on('request', newApp);\n      currentApp = newApp;\n    });\n  };\n};\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { save, load } from 'redux-localstorage-simple';\n\nimport config from '@plone/volto/registry';\nimport reducers from '~/reducers';\n\nimport { api, crashReporter } from '@plone/volto/middleware';\n\nconst configureStore = (initialState, history, apiHelper) => {\n  let stack = [\n    routerMiddleware(history),\n    crashReporter,\n    thunk,\n    api(apiHelper),\n    ...(__CLIENT__\n      ? [save({ states: config.settings.persistentReducers, debounce: 500 })]\n      : []),\n  ];\n  stack = config.settings.storeExtenders.reduce(\n    (acc, extender) => extender(acc),\n    stack,\n  );\n  const middlewares = composeWithDevTools(applyMiddleware(...stack));\n  const store = createStore(\n    combineReducers({\n      router: connectRouter(history),\n      ...reducers,\n      ...config.addonReducers,\n    }),\n    {\n      ...initialState,\n      ...(__CLIENT__\n        ? load({ states: config.settings.persistentReducers })\n        : {}),\n    },\n    middlewares,\n  );\n\n  return store;\n};\n\nexport default configureStore;\n","const fs = require('fs');\nconst {\n  getTopFrame,\n  getStackTraceLines,\n  separateMessageFromStack,\n} = require('jest-message-util');\nconst { codeFrameColumns } = require('@babel/code-frame');\n\nfunction pretty(error) {\n  const { message, stack } = error;\n  const lines = getStackTraceLines(stack);\n  const topFrame = getTopFrame(lines);\n  const fallback = `${message}${stack}`;\n\n  if (!topFrame) {\n    return fallback;\n  }\n\n  const { file, line } = topFrame;\n  try {\n    const result = codeFrameColumns(\n      fs.readFileSync(file, 'utf8'),\n      { start: { line } },\n      { highlightCode: true }\n    );\n    return `\\n${message}\\n\\n${result}\\n${stack}\\n`;\n  } catch (error) {\n    return fallback;\n  }\n}\n\nfunction usePrettyErrors(transform) {\n  const { prepareStackTrace } = Error;\n\n  Error.prepareStackTrace = (error, trace) => {\n    const prepared = prepareStackTrace\n      ? separateMessageFromStack(prepareStackTrace(error, trace))\n      : error;\n    const transformed = transform ? transform(prepared) : prepared;\n    return pretty(transformed);\n  };\n}\n\n// Clean up Webpack's sourcemap namespacing in error stacks\n// @see https://github.com/facebook/create-react-app/blob/next/packages/react-dev-utils/formatWebpackMessages.js#L112\nconst stackTransform = ({ stack = '', ...rest }) => ({\n  stack: stack.replace('/build/webpack:', ''),\n  ...rest,\n});\n\nusePrettyErrors(stackTransform);\n","// Exports\nmodule.exports = {};\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nmodule.exports = function(updatedModules, renewedModules) {\n\tvar unacceptedModules = updatedModules.filter(function(moduleId) {\n\t\treturn renewedModules && renewedModules.indexOf(moduleId) < 0;\n\t});\n\tvar log = require(\"./log\");\n\n\tif (unacceptedModules.length > 0) {\n\t\tlog(\n\t\t\t\"warning\",\n\t\t\t\"[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\"\n\t\t);\n\t\tunacceptedModules.forEach(function(moduleId) {\n\t\t\tlog(\"warning\", \"[HMR]  - \" + moduleId);\n\t\t});\n\t}\n\n\tif (!renewedModules || renewedModules.length === 0) {\n\t\tlog(\"info\", \"[HMR] Nothing hot updated.\");\n\t} else {\n\t\tlog(\"info\", \"[HMR] Updated modules:\");\n\t\trenewedModules.forEach(function(moduleId) {\n\t\t\tif (typeof moduleId === \"string\" && moduleId.indexOf(\"!\") !== -1) {\n\t\t\t\tvar parts = moduleId.split(\"!\");\n\t\t\t\tlog.groupCollapsed(\"info\", \"[HMR]  - \" + parts.pop());\n\t\t\t\tlog(\"info\", \"[HMR]  - \" + moduleId);\n\t\t\t\tlog.groupEnd(\"info\");\n\t\t\t} else {\n\t\t\t\tlog(\"info\", \"[HMR]  - \" + moduleId);\n\t\t\t}\n\t\t});\n\t\tvar numberIds = renewedModules.every(function(moduleId) {\n\t\t\treturn typeof moduleId === \"number\";\n\t\t});\n\t\tif (numberIds)\n\t\t\tlog(\n\t\t\t\t\"info\",\n\t\t\t\t\"[HMR] Consider using the NamedModulesPlugin for module names.\"\n\t\t\t);\n\t}\n};\n","var logLevel = \"info\";\n\nfunction dummy() {}\n\nfunction shouldLog(level) {\n\tvar shouldLog =\n\t\t(logLevel === \"info\" && level === \"info\") ||\n\t\t([\"info\", \"warning\"].indexOf(logLevel) >= 0 && level === \"warning\") ||\n\t\t([\"info\", \"warning\", \"error\"].indexOf(logLevel) >= 0 && level === \"error\");\n\treturn shouldLog;\n}\n\nfunction logGroup(logFn) {\n\treturn function(level, msg) {\n\t\tif (shouldLog(level)) {\n\t\t\tlogFn(msg);\n\t\t}\n\t};\n}\n\nmodule.exports = function(level, msg) {\n\tif (shouldLog(level)) {\n\t\tif (level === \"info\") {\n\t\t\tconsole.log(msg);\n\t\t} else if (level === \"warning\") {\n\t\t\tconsole.warn(msg);\n\t\t} else if (level === \"error\") {\n\t\t\tconsole.error(msg);\n\t\t}\n\t}\n};\n\n/* eslint-disable node/no-unsupported-features/node-builtins */\nvar group = console.group || dummy;\nvar groupCollapsed = console.groupCollapsed || dummy;\nvar groupEnd = console.groupEnd || dummy;\n/* eslint-enable node/no-unsupported-features/node-builtins */\n\nmodule.exports.group = logGroup(group);\n\nmodule.exports.groupCollapsed = logGroup(groupCollapsed);\n\nmodule.exports.groupEnd = logGroup(groupEnd);\n\nmodule.exports.setLogLevel = function(level) {\n\tlogLevel = level;\n};\n\nmodule.exports.formatError = function(err) {\n\tvar message = err.message;\n\tvar stack = err.stack;\n\tif (!stack) {\n\t\treturn message;\n\t} else if (stack.indexOf(message) < 0) {\n\t\treturn message + \"\\n\" + stack;\n\t} else {\n\t\treturn stack;\n\t}\n};\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/*globals __resourceQuery */\nif (module.hot) {\n\tvar hotPollInterval = +__resourceQuery.substr(1) || 10 * 60 * 1000;\n\tvar log = require(\"./log\");\n\n\tvar checkForUpdate = function checkForUpdate(fromUpdate) {\n\t\tif (module.hot.status() === \"idle\") {\n\t\t\tmodule.hot\n\t\t\t\t.check(true)\n\t\t\t\t.then(function(updatedModules) {\n\t\t\t\t\tif (!updatedModules) {\n\t\t\t\t\t\tif (fromUpdate) log(\"info\", \"[HMR] Update applied.\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\trequire(\"./log-apply-result\")(updatedModules, updatedModules);\n\t\t\t\t\tcheckForUpdate(true);\n\t\t\t\t})\n\t\t\t\t.catch(function(err) {\n\t\t\t\t\tvar status = module.hot.status();\n\t\t\t\t\tif ([\"abort\", \"fail\"].indexOf(status) >= 0) {\n\t\t\t\t\t\tlog(\"warning\", \"[HMR] Cannot apply update.\");\n\t\t\t\t\t\tlog(\"warning\", \"[HMR] \" + log.formatError(err));\n\t\t\t\t\t\tlog(\"warning\", \"[HMR] You need to restart the application!\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog(\"warning\", \"[HMR] Update failed: \" + log.formatError(err));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t};\n\tsetInterval(checkForUpdate, hotPollInterval);\n} else {\n\tthrow new Error(\"[HMR] Hot Module Replacement is disabled.\");\n}\n","/**\n * Add your config changes here.\n * @module config\n * @example\n * export default function applyConfig(config) {\n *   config.settings = {\n *     ...config.settings,\n *     port: 4300,\n *     listBlockTypes: {\n *       ...config.settings.listBlockTypes,\n *       'my-list-item',\n *    }\n * }\n */\n\n// All your imports required for the config here BEFORE this line\nimport '@plone/volto/config';\n\nexport default function applyConfig(config) {\n  // Add here your project's configuration here by modifying `config` accordingly\n  return config;\n}\n","/**\n * Replace with custom runner when needed.\n * @module index\n */\n\nimport start from '@plone/volto/start-server';\n\nconst reloadServer = start();\n\nif (module.hot) {\n  reloadServer();\n}\n","/**\n * Root reducer.\n * @module reducers/root\n */\n\nimport defaultReducers from '@plone/volto/reducers';\n\n/**\n * Root reducer.\n * @function\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nconst reducers = {\n  ...defaultReducers,\n  // Add your reducers here\n};\n\nexport default reducers;\n","/**\n * Routes.\n * @module routes\n */\n\nimport { App } from '@plone/volto/components';\nimport { defaultRoutes } from '@plone/volto/routes';\nimport config from '@plone/volto/registry';\n\n/**\n * Routes array.\n * @array\n * @returns {array} Routes.\n */\nconst routes = [\n  {\n    path: '/',\n    component: App, // Change this if you want a different component\n    routes: [\n      // Add your routes here\n      ...(config.addonRoutes || []),\n      ...defaultRoutes,\n    ],\n  },\n];\n\nexport default routes;\n","module.exports = require(\"@babel/code-frame\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/extends\");","module.exports = require(\"@babel/runtime/helpers/objectWithoutProperties\");","module.exports = require(\"@loadable/component\");","module.exports = require(\"@loadable/server\");","module.exports = require(\"@sentry/browser\");","module.exports = require(\"@sentry/integrations\");","module.exports = require(\"@sentry/node\");","module.exports = require(\"classnames\");","module.exports = require(\"connected-react-router\");","module.exports = require(\"date-fns\");","module.exports = require(\"decorate-component-with-props\");","module.exports = require(\"detect-browser\");","module.exports = require(\"diff\");","module.exports = require(\"draft-js\");","module.exports = require(\"draft-js-block-breakout-plugin\");","module.exports = require(\"draft-js-buttons/lib/utils/createBlockStyleButton\");","module.exports = require(\"draft-js-buttons/lib/utils/createInlineStyleButton\");","module.exports = require(\"draft-js-import-html\");","module.exports = require(\"draft-js-inline-toolbar-plugin\");","module.exports = require(\"draft-js-plugins-editor\");","module.exports = require(\"draft-js-plugins-utils\");","module.exports = require(\"draft-js/lib/isSoftNewlineEvent\");","module.exports = require(\"draftjs-filters\");","module.exports = require(\"express\");","module.exports = require(\"filesize\");","module.exports = require(\"fs\");","module.exports = require(\"history\");","module.exports = require(\"hoist-non-react-statics\");","module.exports = require(\"http\");","module.exports = require(\"http-proxy-middleware\");","module.exports = require(\"immutable\");","module.exports = require(\"jest-message-util\");","module.exports = require(\"jwt-decode\");","module.exports = require(\"langmap\");","module.exports = require(\"locale\");","module.exports = require(\"lodash-move\");","module.exports = require(\"lodash/cloneDeep\");","module.exports = require(\"lodash/compact\");","module.exports = require(\"lodash/concat\");","module.exports = require(\"lodash/endsWith\");","module.exports = require(\"lodash/filter\");","module.exports = require(\"lodash/find\");","module.exports = require(\"lodash/findIndex\");","module.exports = require(\"lodash/flatten\");","module.exports = require(\"lodash/fromPairs\");","module.exports = require(\"lodash/groupBy\");","module.exports = require(\"lodash/identity\");","module.exports = require(\"lodash/includes\");","module.exports = require(\"lodash/indexOf\");","module.exports = require(\"lodash/intersection\");","module.exports = require(\"lodash/isArray\");","module.exports = require(\"lodash/isBoolean\");","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"lodash/isEqual\");","module.exports = require(\"lodash/isObject\");","module.exports = require(\"lodash/isString\");","module.exports = require(\"lodash/join\");","module.exports = require(\"lodash/keys\");","module.exports = require(\"lodash/last\");","module.exports = require(\"lodash/map\");","module.exports = require(\"lodash/mapKeys\");","module.exports = require(\"lodash/mapValues\");","module.exports = require(\"lodash/memoize\");","module.exports = require(\"lodash/merge\");","module.exports = require(\"lodash/nth\");","module.exports = require(\"lodash/omit\");","module.exports = require(\"lodash/omitBy\");","module.exports = require(\"lodash/pickBy\");","module.exports = require(\"lodash/pull\");","module.exports = require(\"lodash/reduce\");","module.exports = require(\"lodash/remove\");","module.exports = require(\"lodash/reverse\");","module.exports = require(\"lodash/slice\");","module.exports = require(\"lodash/split\");","module.exports = require(\"lodash/startsWith\");","module.exports = require(\"lodash/toPairs\");","module.exports = require(\"lodash/transform\");","module.exports = require(\"lodash/trim\");","module.exports = require(\"lodash/union\");","module.exports = require(\"lodash/uniq\");","module.exports = require(\"lodash/uniqBy\");","module.exports = require(\"lodash/values\");","module.exports = require(\"lodash/without\");","module.exports = require(\"moment\");","module.exports = require(\"object-assign\");","module.exports = require(\"path\");","module.exports = require(\"prepend-http\");","module.exports = require(\"prettier/parser-html\");","module.exports = require(\"prettier/standalone\");","module.exports = require(\"pretty-bytes\");","module.exports = require(\"prismjs/components/prism-core\");","module.exports = require(\"prismjs/components/prism-markup\");","module.exports = require(\"promise-file-reader\");","module.exports = require(\"prop-types\");","module.exports = require(\"query-string\");","module.exports = require(\"rc-time-picker\");","module.exports = require(\"react\");","module.exports = require(\"react-anchor-link-smooth-scroll\");","module.exports = require(\"react-animate-height\");","module.exports = require(\"react-beautiful-dnd\");","module.exports = require(\"react-cookie\");","module.exports = require(\"react-dates\");","module.exports = require(\"react-dates/initialize\");","module.exports = require(\"react-dnd\");","module.exports = require(\"react-dnd-html5-backend\");","module.exports = require(\"react-dom/server\");","module.exports = require(\"react-dropzone\");","module.exports = require(\"react-fast-compare\");","module.exports = require(\"react-image-gallery\");","module.exports = require(\"react-intl\");","module.exports = require(\"react-intl-redux\");","module.exports = require(\"react-portal\");","module.exports = require(\"react-redux\");","module.exports = require(\"react-router\");","module.exports = require(\"react-router-config\");","module.exports = require(\"react-router-dom\");","module.exports = require(\"react-select\");","module.exports = require(\"react-select-async-paginate\");","module.exports = require(\"react-select/async-creatable\");","module.exports = require(\"react-select/creatable\");","module.exports = require(\"react-share\");","module.exports = require(\"react-side-effect\");","module.exports = require(\"react-simple-code-editor\");","module.exports = require(\"react-toastify\");","module.exports = require(\"react-transition-group\");","module.exports = require(\"redraft\");","module.exports = require(\"redux\");","module.exports = require(\"redux-devtools-extension/developmentOnly\");","module.exports = require(\"redux-localstorage-simple\");","module.exports = require(\"redux-mock-store\");","module.exports = require(\"redux-thunk\");","module.exports = require(\"rrule\");","module.exports = require(\"semantic-ui-react\");","module.exports = require(\"semantic-ui-react/dist/commonjs/lib\");","module.exports = require(\"serialize-javascript\");","module.exports = require(\"superagent\");","module.exports = require(\"tlds\");","module.exports = require(\"union-class-names\");","module.exports = require(\"url\");","module.exports = require(\"uuid\");","module.exports = require(\"zlib\");"],"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AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAEA;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAFA;AAQA;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AAMA;AAMA;AAOA;AA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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAOA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA,+TACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;A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AEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAFA;AALA;AAYA;AACA;AACA;AACA;AAHA;AAdA;AAqBA;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;;;;;;;;;;;;ACLA;AAAA;;;;;;;;;;;;ACAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAeA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AASA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;ACtJA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAkBA;AACA;AACA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;A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A;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AAOA;;;;;;AAKA;AAAA;AAAA;AACA;AADA;AA4BA;AACA;AACA;AAHA;AACA;AA5BA;AA4EA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAYA;AACA;AACA;AAnGA;AAuHA;AAAA;AACA;AACA;AADA;AAGA;AACA;AA5HA;AAoIA;AAEA;AAFA;AAIA;AACA;AAzIA;AA2IA;AACA;AADA;AAGA;AACA;AA/IA;AAuJA;AACA;AADA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAYA;AACA;AACA;AA7KA;AAuLA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAjMA;AAkMA;AAAA;AAAA;AACA;AACA;AApMA;AAqMA;AAAA;AAAA;AACA;AACA;AAvMA;AAAA;AACA;AAgCA;;;;;;AAMA;AACA;AAKA;AACA;AADA;AAGA;AAEA;AACA;AAHA;AAKA;AACA;AAEA;;;;;;;AAKA;AACA;AAKA;AAEA;;;;;;;;AA+BA;;;;;;AAMA;AACA;AAEA;AAFA;AAIA;AAEA;;;;;;;;AAyFA;;;;;AAKA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AAGA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AACA;AAEA;AAIA;AAEA;AACA;AAGA;AAvBA;AAAA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A;;;;;;;AAKA;AACA;AADA;AAIA;;;;;;;;;;;AC1DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;AAKA;AACA;;;;;;AAgBA;;;;;;AASA;;;;;;AAMA;AACA;AACA;AACA,iBAYA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AAKA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA5JA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAPA;AAuBA;AADA;AACA;AAuIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjLA;;;;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAZA;AACA;AAcA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AARA;AAgBA;AACA;AAEA;AACA;AA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A;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AATA;AAaA;AACA;AACA;AAAA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAiBA;;;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAjTA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAPA;AAiCA;AADA;AACA;AAkRA;;;;;;;;;;;;;;;;;;;;;;ACrVA;AACA;AACA;AAEA;AAUA;AAZA;AACA;AA2BA;;;;;;;;;;;;;;;;;;;;;;AC9BA;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAKA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;AAKA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;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A;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AA16CA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AAFA;AAKA;AACA;AA3CA;AACA;AAPA;AA0DA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AANA;AAJA;AACA;AAk3CA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAeA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA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AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;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AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;;;;;;AAKA;AACA;;;;;;AAmCA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAFA;AAIA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AADA;AAGA;AAEA;;;;;;;;;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AADA;AAGA;AAEA;;;;;;;;;AAOA;AACA;AACA;AAEA;AAFA;AADA;AAWA;AACA;;;;;;;;AAMA;AACA;AACA;AAEA;AAFA;AADA;AAWA;AAEA;;;;;;;;;;AAQA;AACA;AACA;AACA;AADA;AAGA;AAEA;;;;;;;;AAMA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;AAOA;AACA;AACA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AAHA;AAQA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;;;;;AC9WA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAKA;AATA;AAYA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AAC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A;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAFA;AASA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAFA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;AAkDA;;;;;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AADA;AAOA;AACA;AAAA;AAEA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAEA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAwBA;AAAA;AAAA;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A4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAoHA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1KA;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAbA;AAmBA;;;;;;AAKA;AACA;;;;;;AAqBA;;;;;AAmBA;AACA;AACA;AAFA;AAJA;AACA;AAFA;AACA;AAIA;AA0CA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAhDA;AAiDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhGA;AAkGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAzGA;AA2GA;AACA;AACA;AACA;AACA;AACA;AACA;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A;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AAxIA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AAPA;AAYA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAPA;AASA;AACA;AACA;AACA;AACA;AAJA;AAVA;AAjBA;AAoCA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAQA;AAFA;AAUA;AACA;AACA;AACA;AACA;AADA;AAGA;AAPA;AAYA;AACA;AACA;AACA;AACA;AAJA;AA3BA;AADA;AAoCA;AAEA;;;;;;;;;AAQA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AA0BA;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAWA;AACA;AAMA;AACA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AA3OA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAtBA;AACA;AAPA;AAqCA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAwMA;AAIA;AADA;AAGA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACptGA;AA4GA;;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AASA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAxBA;AA0BA;AAhCA;AAqCA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAfA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AASA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AArDA;AAgEA;AAEA;AA7HA;AAgIA;;;;;;AAIA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AANA;AAWA;AAnBA;AAsBA;;;;;;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AALA;AACA;AAUA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AADA;AAIA;;;;;;AAIA;AACA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;AAKA;AACA;;;;;;AA+BA;;;;;;AAWA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAEA;;;;;;;;AAMA;AACA;AACA;AAGA;AACA;AAQA;AAEA;AAIA;AAJA;AAQA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAFA;AA3FA;AAgGA;AAvGA;AA0GA;AApHA;AAwHA;AACA;AAEA;;;;;;;;AAMA;AACA;AAEA;AAIA;AAJA;AAFA;AAUA;AACA;AAEA;;;;;;;;AAMA;AAAA;AACA;AAAA;AAIA;AAEA;AAFA;AAQA;AACA;AAEA;;;;;;;;;;;;;AAWA;AAOA;AACA;AAGA;AACA;AAGA;AAIA;AAJA;AAWA;AACA;AAiBA;AAIA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAIA;AAJA;AAUA;AACA;AACA;AAIA;AACA;AAEA;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AASA;AAEA;AAFA;AASA;AApBA;AACA;AA0BA;AAEA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAEA;AAIA;AANA;AAWA;AACA;AAEA;;;;;;;AAKA;AACA;AAEA;AAIA;AAJA;AAWA;AAbA;AAeA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AACA;AAEA;AAEA;AAFA;AAIA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AADA;AAGA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AADA;AAGA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AADA;AADA;AAKA;AAEA;;;;;;;;;AAOA;AACA;AACA;AADA;AAGA;AAEA;;;;;;;;;AAOA;AACA;AACA;AADA;AAGA;AAEA;;;;;;;;AAMA;AACA;AACA;AADA;AAGA;AAEA;;;;;;;;;AAOA;AACA;AAEA;AAIA;AAJA;AAFA;AAeA;AAEA;;;;;;;;;AAOA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AACA;AADA;AADA;AAKA;AACA;AAEA;;;;;;;;AAMA;AACA;AAIA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAOA;AAIA;AACA;AACA;AAGA;AAQA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAeA;AAQA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AADA;AAIA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AADA;AAGA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsfA;AAoBA;AA5BA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AATA;AAaA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAn/BA;AACA;AADA;AAOA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;AAAA;;;AAGA;AACA;;;;AArBA;AACA;AAPA;AAsCA;AACA;AACA;AAHA;AACA;AA+8BA;AAIA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACp4CA;AACA;AAAA;AACA;AAAA;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AAHA;AAHA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AAFA;AAIA;AAEA;AAFA;AAIA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAhBA;AA5BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AAEA;AAOA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAzCA;AACA;AA8CA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AAAA;AAAA;AACA;AADA;AAkEA;AACA;AAAA;AAAA;AAFA;AACA;AAlEA;AA2FA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AADA;AAPA;AAWA;AACA;AAAA;AACA;AACA;AA/GA;AAwHA;AAAA;AAAA;AACA;AACA;AA1HA;AACA;AAsEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AA0CA;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AAJA;AASA;AACA;AAFA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AA5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiDA;AACA;AA/MA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AACA;AAPA;AA6CA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAoKA;AAIA;AAKA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5WA;;;;AAKA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAKA;AACA;;;;;;AA8BA;;;;;;AAsBA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAjHA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAtBA;AACA;AAPA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AA8EA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpIA;;;;AAKA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAOA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA,mKACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AALA;AAWA;;;;;;AAKA;AACA;;;;;;AA0BA;;;;;;AAoBA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAFA;AAKA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAQA;AACA;AAEA;AACA;AAFA;AAKA;AAEA;;;;;;;;;AAOA;AACA;AAAA;AAAA;AACA;AAIA;AAEA;;;;;;;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AACA;AA1JA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAlBA;AACA;AAPA;AAiCA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAZA;AACA;AA2HA;AAIA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AARA;AAUA;AACA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClOA;;;;AAKA;AACA;AACA;AACA;AACA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AACA;AACA;AACA;AACA;AAFA;AAZA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAZA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAAA;AAGA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AANA;AAfA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAZA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAXA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAZA;AAnMA;AAsNA;AAEA;;;;;;;;;;;;;AC/UA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AA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;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA,+TACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAQA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA,oZACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA,qkBAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AA9BA;AACA;AA0CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;;;;AAIA;AACA;AACA;AAMA;AACA;AAGA;AAKA;AACA;AACA;AAMA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AADA;AAUA;AACA;AAAA;AACA;AACA;AACA;AA/DA;AAiEA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAnFA;AAsFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3KA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AATA;AAWA;;;;;;;;;;;;AChzFA;AAAA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;;;;;;;;;;;;ACLA;AAAA;AAAA;;;;AAKA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CA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;AACA;AACA;AAEA;AAEA;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;AAIA;AACA;;;;;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;AACA;AA4CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AAKA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AArFA;AAuFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAKA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAFA;AAIA;AAEA;AACA;AACA;AAhCA;AAmCA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAKA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAgBA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjIA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAJA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAJA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;AACA;AAEA;AACA;AAEA;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;AAMA;AACA;AAEA;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AAEA;;;;;;;AAMA;AACA;AAMA;AAEA;;;;;;;AAMA;AACA;AAMA;AAEA;;;;;;;AAMA;AACA;AAMA;AAEA;;;;;;;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;AAMA;AAAA;AACA;AAAA;AACA;AACA;AAMA;AAEA;;;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AADA;AAFA;AAMA;AAEA;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AADA;AAQA;AAEA;AACA;AADA;AAFA;AAMA;AACA;AADA;AADA;AAjBA;AAyBA;AAEA;;;;;;;;;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAHA;AAOA;AACA;AADA;AATA;AAiBA;AAEA;;;;;;;;;AAQA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAFA;AAIA;AACA;AADA;AARA;AAiBA;AAEA;;;;;;;;;AAQA;AACA;AACA;AAEA;AAEA;AAFA;AAFA;AAOA;AAEA;;;;;;;;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;;;;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AANA;AAQA;;;;;;;;;;;;ACjVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;AAKA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAZA;AACA;AAaA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AAKA;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AAEA;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AAEA;;;;;;;AAMA;AACA;AAGA;AAEA;;;;;;;;;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/DA;AAEA;;;;;;;;AAOA;AAGA;AADA;AAIA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAbA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAbA;AAqBA;AACA;AAOA;AARA;AAgBA;AACA;AAOA;AARA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;AAtFA;AAmGA;;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAQA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;;;;;;;AAKA;AACA;AACA;AACA;;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAKA;AACA;AACA;AApCA;AACA;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9UA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAAA;AACA;AADA;AAEA;;;;;;;;;;;;;;;;;AA4CA;AACA;AACA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AADA;AARA;AACA;AAYA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAFA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAKA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAEA;AAFA;AAfA;AACA;AAoBA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AArBA;AAuBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA5PA;AAmBA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAuBA;AACA;AAFA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AACA;AAxEA;AACA;AA8PA;AACA;AACA;AAMA;AACA;AAEA;AAEA;;;;;;;;;;;;ACzRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AAIA;AACA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;AACA;AAAA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AAGA;AAGA;AAGA;AACA;AAbA;AACA;AAcA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AACA;AA/CA;AAiDA;;;;;;;;;;;;;;;;;;;;;;;AC/FA;;;;AAKA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAlBA;AAoBA;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAFA;AAFA;AACA;AASA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAVA;AACA;AAWA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AAFA;AACA;AAUA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAVA;AACA;AAWA;AACA;AA7DA;AACA;AA8DA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAZA;AACA;AAaA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AARA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AA5BA;AA8BA;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;;AAKA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAUA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AA5CA;AA8CA;;;;;;;;;;;;;;;;;;;;;;;AC5EA;;;;AAKA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAvBA;AA0BA;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AALA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AALA;AACA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAvEA;AAyEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3HA;AAEA;AAUA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAhCA;AAmCA;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AADA;AAGA;AACA;AACA;AANA;AAFA;AAHA;AAiBA;AACA;AACA;AACA;AAHA;AAjBA;AACA;AAsBA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAIA;AAFA;AAMA;AAKA;AAFA;AAVA;AAiBA;AAKA;AAFA;AArBA;AA0BA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAHA;AAeA;AACA;AACA;AACA;AACA;AAHA;AAhBA;AACA;AAqBA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAFA;AALA;AAJA;AAFA;AAHA;AAwBA;AAEA;AAKA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAHA;AAlCA;AACA;AAuCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AARA;AAFA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAFA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAHA;AAeA;AACA;AACA;AACA;AACA;AAHA;AAhBA;AACA;AAqBA;AACA;AAGA;AAHA;AAOA;AAPA;AACA;AAQA;AACA;AAnNA;AAqNA;;;;;;;;;;;;;;;;;;;;;;;AC9RA;AAEA;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAJA;AAFA;AACA;AAQA;AACA;AAEA;AAEA;AACA;AACA;AACA;AALA;AAFA;AACA;AASA;AACA;AAEA;AAEA;AACA;AACA;AAJA;AAFA;AACA;AAQA;AACA;AAjCA;AACA;AAkCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChDA;;;;AAIA;AACA;AAUA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AA7BA;AAgCA;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AANA;AACA;AAWA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AACA;AAQA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AArIA;AAuIA;;;;;;;;;;;;;;;;;;;;;;;ACxMA;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAzBA;AA2BA;;;;;;;;;;;;;;;;;;;;;;;ACjDA;;;;AAKA;AAEA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAvBA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;AC9CA;;;;AAKA;AAEA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAvBA;AAyBA;;;;;;;;;;;;AC9CA;AAAA;AAAA;;;;;AAMA;AAEA;;;;;;;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AChBA;;;;AAKA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AA3BA;AA8BA;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AA7EA;AA+EA;;;;;;;;;;;;;;;;;;;;;;;AC5IA;;;;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAPA;AAcA;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AA1CA;AA4CA;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAsCA;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AARA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AAMA;AACA;AADA;AAIA;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AALA;AAHA;AACA;AAaA;AACA;AACA;AADA;AACA;AAMA;AACA;AACA;AAIA;AAFA;AAHA;AACA;AAQA;AACA;AAnCA;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;AAOA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AAEA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAzBA;AA2BA;;;;;;;;;;;;;;;;;;;;;;;ACnEA;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AACA;AAOA;AACA;AA3BA;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;;;;;;;;AAOA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;AAFA;AAHA;AAmBA;AACA;AACA;AArBA;AACA;AAsBA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AATA;AAFA;AAHA;AAoBA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AA5BA;AACA;AA6BA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAHA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAtBA;AACA;AAuBA;AACA;AAGA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAaA;AACA;AAjGA;AAmGA;;;;;;;;;;;;;;;;;;;;;;;AC3HA;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAzBA;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAfA;AAsBA;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAQA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAWA;AAbA;AALA;AACA;AAgCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAQA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAzFA;AA2FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3IA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;;;;;;;;AAOA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AARA;AAFA;AAHA;AAmBA;AACA;AACA;AArBA;AACA;AAsBA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AATA;AAFA;AAHA;AAoBA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AA5BA;AACA;AA6BA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAHA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAtBA;AACA;AAuBA;AACA;AAGA;AAHA;AAOA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAaA;AACA;AAjGA;AAmGA;;;;;;;;;;;;;;;;;;;;;;;AClIA;;;;AAKA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAXA;AAkBA;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AAlDA;AAoDA;;;;;;;;;;;;;;;;;;;;;;;AClGA;;;;AAKA;AAEA;AACA;AADA;AAIA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAPA;AASA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;;;;AAKA;AAEA;AACA;AADA;AAIA;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AANA;AAQA;;;;;;;;;;;;;;;;;;;;;;;AC3BA;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AACA;AAzBA;AA2BA;;;;;;;;;;;;;;;;;;;;;;;ACjDA;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAvCA;AAyCA;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AA5CA;AAmDA;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AA5FA;AA8FA;;;;;;;;;;;;;;;;;;;;;;;ACzLA;;;;AAKA;AAKA;AAEA;;;;;;;;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AATA;AAFA;AACA;AAaA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AAZA;AAFA;AACA;AAgBA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AALA;AAFA;AACA;AASA;AACA;AAzDA;AA2DA;;;;;;;;;;;;;;;;;;;;;;;AChFA;;;;AAKA;AAMA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAbA;AAgBA;;;;;;;AAMA;AACA;AACA;AAEA;;;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAHA;AANA;AACA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AACA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AAQA;AACA;AA3DA;AA6DA;;;;;;;;;;;;AC1GA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjFA;AACA;AAkFA;AACA;AAEA;;;;;;;;;;;;ACtFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AAiCA;AACA;AAAA;AACA;AAEA;AAEA;;;;;;AAKA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;;;;;;AAKA;AAEA;AACA;AACA;AAEA;AALA;AAWA;;;;;;;;;;;;AC5NA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA,0FAoBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AAKA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;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}